
Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008424  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  080085f4  080085f4  000095f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d24  08008d24  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d24  08008d24  00009d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d2c  08008d2c  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d2c  08008d2c  00009d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d30  08008d30  00009d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008d34  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000266c  20000074  08008da8  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026e0  08008da8  0000a6e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f60c  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002818  00000000  00000000  000196b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  0001bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a37  00000000  00000000  0001cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002337b  00000000  00000000  0001d64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d66  00000000  00000000  000409ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc3b1  00000000  00000000  00054730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb0  00000000  00000000  00120b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001246d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085dc 	.word	0x080085dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080085dc 	.word	0x080085dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	@ 0x40
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SELECT+0x18>)
 80005f6:	f001 fcb1 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f001 f946 	bl	800188c <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	@ 0x40
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DESELECT+0x18>)
 8000612:	f001 fca3 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 f938 	bl	800188c <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <SPI_TxByte+0x30>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_TxByte+0x30>)
 8000646:	f002 fa8e 	bl	8002b66 <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200022b4 	.word	0x200022b4

08000658 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000664:	bf00      	nop
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SPI_TxBuffer+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b02      	cmp	r3, #2
 8000672:	d1f8      	bne.n	8000666 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_TxBuffer+0x30>)
 800067c:	f002 fa73 	bl	8002b66 <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200022b4 	.word	0x200022b4

0800068c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000696:	bf00      	nop
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <SPI_RxByte+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1f8      	bne.n	8000698 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	1df9      	adds	r1, r7, #7
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SPI_RxByte+0x34>)
 80006b2:	f002 fb9c 	bl	8002dee <HAL_SPI_TransmitReceive>

	return data;
 80006b6:	79bb      	ldrb	r3, [r7, #6]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200022b4 	.word	0x200022b4

080006c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006cc:	f7ff ffde 	bl	800068c <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <SD_ReadyWait+0x30>)
 80006e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ee:	f7ff ffcd 	bl	800068c <SPI_RxByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d003      	beq.n	8000704 <SD_ReadyWait+0x24>
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <SD_ReadyWait+0x30>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f4      	bne.n	80006ee <SD_ReadyWait+0xe>

	return res;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000092 	.word	0x20000092

08000714 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800071a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800071e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000720:	f7ff ff72 	bl	8000608 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e005      	b.n	8000736 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	f7ff ff7a 	bl	8000624 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b09      	cmp	r3, #9
 800073a:	ddf6      	ble.n	800072a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800073c:	f7ff ff56 	bl	80005ec <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000754:	2395      	movs	r3, #149	@ 0x95
 8000756:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000758:	463b      	mov	r3, r7
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff7b 	bl	8000658 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000762:	e002      	b.n	800076a <SD_PowerOn+0x56>
	{
		cnt--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800076a:	f7ff ff8f 	bl	800068c <SPI_RxByte>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <SD_PowerOn+0x66>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_PowerOn+0x50>
	}

	DESELECT();
 800077a:	f7ff ff45 	bl	8000608 <DESELECT>
	SPI_TxByte(0XFF);
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	f7ff ff50 	bl	8000624 <SPI_TxByte>

	PowerFlag = 1;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_PowerOn+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000095 	.word	0x20000095

08000798 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <SD_PowerOff+0x14>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	20000095 	.word	0x20000095

080007b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SD_CheckPower+0x14>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000095 	.word	0x20000095

080007c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007d4:	22c8      	movs	r2, #200	@ 0xc8
 80007d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007d8:	f7ff ff58 	bl	800068c <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d103      	bne.n	80007ee <SD_RxDataBlock+0x26>
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f4      	bne.n	80007d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f2:	d001      	beq.n	80007f8 <SD_RxDataBlock+0x30>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00f      	b.n	8000818 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff60 	bl	80006c4 <SPI_RxBytePtr>
	} while(len--);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	603a      	str	r2, [r7, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800080e:	f7ff ff3d 	bl	800068c <SPI_RxByte>
	SPI_RxByte();
 8000812:	f7ff ff3b 	bl	800068c <SPI_RxByte>

	return TRUE;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000090 	.word	0x20000090

08000824 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000834:	f7ff ff54 	bl	80006e0 <SD_ReadyWait>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d001      	beq.n	8000842 <SD_TxDataBlock+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	e02f      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff feed 	bl	8000624 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2bfd      	cmp	r3, #253	@ 0xfd
 800084e:	d020      	beq.n	8000892 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feff 	bl	8000658 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800085a:	f7ff ff17 	bl	800068c <SPI_RxByte>
		SPI_RxByte();
 800085e:	f7ff ff15 	bl	800068c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000862:	e00b      	b.n	800087c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000864:	f7ff ff12 	bl	800068c <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b05      	cmp	r3, #5
 8000874:	d006      	beq.n	8000884 <SD_TxDataBlock+0x60>
			i++;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	2b40      	cmp	r3, #64	@ 0x40
 8000880:	d9f0      	bls.n	8000864 <SD_TxDataBlock+0x40>
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000884:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000886:	bf00      	nop
 8000888:	f7ff ff00 	bl	800068c <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2b05      	cmp	r3, #5
 800089a:	d101      	bne.n	80008a0 <SD_TxDataBlock+0x7c>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008b6:	f7ff ff13 	bl	80006e0 <SD_ReadyWait>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d001      	beq.n	80008c4 <SD_SendCmd+0x1a>
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	e042      	b.n	800094a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feac 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	0e1b      	lsrs	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fea0 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe9a 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe95 	bl	8000624 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <SD_SendCmd+0x5c>
 8000900:	2395      	movs	r3, #149	@ 0x95
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e007      	b.n	8000916 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b48      	cmp	r3, #72	@ 0x48
 800090a:	d102      	bne.n	8000912 <SD_SendCmd+0x68>
 800090c:	2387      	movs	r3, #135	@ 0x87
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e001      	b.n	8000916 <SD_SendCmd+0x6c>
	else crc = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe83 	bl	8000624 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b4c      	cmp	r3, #76	@ 0x4c
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x7e>
 8000924:	f7ff feb2 	bl	800068c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800092c:	f7ff feae 	bl	800068c <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da05      	bge.n	8000948 <SD_SendCmd+0x9e>
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3b01      	subs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCmd+0x82>

	return res;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x14>
 8000964:	2301      	movs	r3, #1
 8000966:	e0d1      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000968:	4b6a      	ldr	r3, [pc, #424]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SD_disk_initialize+0x2a>
 8000976:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e0c6      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800097e:	f7ff fec9 	bl	8000714 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000982:	f7ff fe33 	bl	80005ec <SELECT>

	/* check disk type */
	type = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f7ff ff8c 	bl	80008aa <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f040 80a1 	bne.w	8000adc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 800099c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a6:	2048      	movs	r0, #72	@ 0x48
 80009a8:	f7ff ff7f 	bl	80008aa <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d155      	bne.n	8000a5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e00c      	b.n	80009d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009b8:	7bfc      	ldrb	r4, [r7, #15]
 80009ba:	f7ff fe67 	bl	800068c <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9ef      	bls.n	80009b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17e      	bne.n	8000adc <SD_disk_initialize+0x188>
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2baa      	cmp	r3, #170	@ 0xaa
 80009e2:	d17b      	bne.n	8000adc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	2100      	movs	r1, #0
 80009e6:	2077      	movs	r0, #119	@ 0x77
 80009e8:	f7ff ff5f 	bl	80008aa <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d807      	bhi.n	8000a02 <SD_disk_initialize+0xae>
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f6:	2069      	movs	r0, #105	@ 0x69
 80009f8:	f7ff ff57 	bl	80008aa <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ec      	bne.n	80009e4 <SD_disk_initialize+0x90>
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d062      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff46 	bl	80008aa <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe2e 	bl	800068c <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x104>
 8000a54:	230c      	movs	r3, #12
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x106>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e03e      	b.n	8000adc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff22 	bl	80008aa <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1b 	bl	80008aa <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x12c>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0d 	bl	80008aa <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x160>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff06 	bl	80008aa <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x160>
 8000aa4:	e00c      	b.n	8000ac0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff fefe 	bl	80008aa <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e2      	bne.n	8000a82 <SD_disk_initialize+0x12e>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000abe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <SD_disk_initialize+0x184>
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	2050      	movs	r0, #80	@ 0x50
 8000ace:	f7ff feec 	bl	80008aa <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SD_disk_initialize+0x1c8>)
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ae2:	f7ff fd91 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000ae6:	f7ff fdd1 	bl	800068c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b02:	f7ff fe49 	bl	8000798 <SD_PowerOff>
	}

	return Stat;
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000090 	.word	0x20000090
 8000b1c:	20000094 	.word	0x20000094

08000b20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SD_disk_status+0x14>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <SD_disk_status+0x1a>
	return Stat;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SD_disk_status+0x28>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_read+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e051      	b.n	8000c10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SD_disk_read+0xcc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_read+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e048      	b.n	8000c10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SD_disk_read+0xd0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_read+0x44>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b90:	f7ff fd2c 	bl	80005ec <SELECT>

	if (count == 1)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2051      	movs	r0, #81	@ 0x51
 8000b9e:	f7ff fe84 	bl	80008aa <SD_SendCmd>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d129      	bne.n	8000bfc <SD_disk_read+0xb0>
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fe0b 	bl	80007c8 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <SD_disk_read+0xb0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e01e      	b.n	8000bfc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2052      	movs	r0, #82	@ 0x52
 8000bc2:	f7ff fe72 	bl	80008aa <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d117      	bne.n	8000bfc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fdf9 	bl	80007c8 <SD_RxDataBlock>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <SD_disk_read+0xa6>
				buff += 512;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ed      	bne.n	8000bcc <SD_disk_read+0x80>
 8000bf0:	e000      	b.n	8000bf4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bf2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	204c      	movs	r0, #76	@ 0x4c
 8000bf8:	f7ff fe57 	bl	80008aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fd04 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fd44 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000094 	.word	0x20000094

08000c20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <SD_disk_write+0x1c>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <SD_disk_write+0x20>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e06b      	b.n	8000d18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <SD_disk_write+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_write+0x32>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e062      	b.n	8000d18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SD_disk_write+0x100>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_write+0x44>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e059      	b.n	8000d18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <SD_disk_write+0x104>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SD_disk_write+0x56>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c76:	f7ff fcb9 	bl	80005ec <SELECT>

	if (count == 1)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d110      	bne.n	8000ca2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2058      	movs	r0, #88	@ 0x58
 8000c84:	f7ff fe11 	bl	80008aa <SD_SendCmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13a      	bne.n	8000d04 <SD_disk_write+0xe4>
 8000c8e:	21fe      	movs	r1, #254	@ 0xfe
 8000c90:	68b8      	ldr	r0, [r7, #8]
 8000c92:	f7ff fdc7 	bl	8000824 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d033      	beq.n	8000d04 <SD_disk_write+0xe4>
			count = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e030      	b.n	8000d04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <SD_disk_write+0x104>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2077      	movs	r0, #119	@ 0x77
 8000cb2:	f7ff fdfa 	bl	80008aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	2057      	movs	r0, #87	@ 0x57
 8000cba:	f7ff fdf6 	bl	80008aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2059      	movs	r0, #89	@ 0x59
 8000cc2:	f7ff fdf2 	bl	80008aa <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ccc:	21fc      	movs	r1, #252	@ 0xfc
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f7ff fda8 	bl	8000824 <SD_TxDataBlock>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <SD_disk_write+0xd0>
				buff += 512;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1ee      	bne.n	8000ccc <SD_disk_write+0xac>
 8000cee:	e000      	b.n	8000cf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cf2:	21fd      	movs	r1, #253	@ 0xfd
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd95 	bl	8000824 <SD_TxDataBlock>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d04:	f7ff fc80 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000d08:	f7ff fcc0 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000094 	.word	0x20000094

08000d28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	@ 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	603a      	str	r2, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x1e>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e113      	b.n	8000f6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d124      	bne.n	8000d9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d012      	beq.n	8000d80 <SD_disk_ioctl+0x58>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc1a      	bgt.n	8000d94 <SD_disk_ioctl+0x6c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <SD_disk_ioctl+0x40>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d006      	beq.n	8000d74 <SD_disk_ioctl+0x4c>
 8000d66:	e015      	b.n	8000d94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d68:	f7ff fd16 	bl	8000798 <SD_PowerOff>
			res = RES_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d72:	e0fa      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d74:	f7ff fcce 	bl	8000714 <SD_PowerOn>
			res = RES_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0f4      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	f7ff fd14 	bl	80007b0 <SD_CheckPower>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e0ea      	b.n	8000f6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d9a:	e0e6      	b.n	8000f6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	@ (8000f78 <SD_disk_ioctl+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_ioctl+0x86>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0df      	b.n	8000f6e <SD_disk_ioctl+0x246>

		SELECT();
 8000dae:	f7ff fc1d 	bl	80005ec <SELECT>

		switch (ctrl)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80c9 	bhi.w	8000f4c <SD_disk_ioctl+0x224>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <SD_disk_ioctl+0x98>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000eb7 	.word	0x08000eb7
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000ea7 	.word	0x08000ea7
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000f4d 	.word	0x08000f4d
 8000dec:	08000ec9 	.word	0x08000ec9
 8000df0:	08000eed 	.word	0x08000eed
 8000df4:	08000f11 	.word	0x08000f11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	@ 0x49
 8000dfc:	f7ff fd55 	bl	80008aa <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a6 	bne.w	8000f54 <SD_disk_ioctl+0x22c>
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fcda 	bl	80007c8 <SD_RxDataBlock>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 809c 	beq.w	8000f54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	029a      	lsls	r2, r3, #10
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02d      	b.n	8000e9e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e42:	7c7b      	ldrb	r3, [r7, #17]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	09db      	lsrs	r3, r3, #7
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3302      	adds	r3, #2
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e6a:	7d3b      	ldrb	r3, [r7, #20]
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000eb6:	f7ff fc13 	bl	80006e0 <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	@ 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x230>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	@ 0x49
 8000ecc:	f7ff fced 	bl	80008aa <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x234>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc75 	bl	80007c8 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x234>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	@ 0x4a
 8000ef0:	f7ff fcdb 	bl	80008aa <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x238>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc63 	bl	80007c8 <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x238>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	@ 0x7a
 8000f14:	f7ff fcc9 	bl	80008aa <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fbae 	bl	800068c <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f60:	bf00      	nop
		}

		DESELECT();
 8000f62:	f7ff fb51 	bl	8000608 <DESELECT>
		SPI_RxByte();
 8000f66:	f7ff fb91 	bl	800068c <SPI_RxByte>
	}

	return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <transmit_uart>:
void read_and_display_file(char* filename); // Función para leer y mostrar archivo
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmit_uart(char* string) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    uint8_t len = strlen(string);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff f943 	bl	8000210 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	23c8      	movs	r3, #200	@ 0xc8
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4805      	ldr	r0, [pc, #20]	@ (8000fac <transmit_uart+0x30>)
 8000f98:	f002 fb1c 	bl	80035d4 <HAL_UART_Transmit>
    HAL_Delay(10); // Pequeño retraso para que la terminal procese la línea
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f000 fc75 	bl	800188c <HAL_Delay>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000230c 	.word	0x2000230c

08000fb0 <display_menu>:

void display_menu(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0c0      	sub	sp, #256	@ 0x100
 8000fb4:	af00      	add	r7, sp, #0
    char file_list[MAX_FILES][13]; // Lista de nombres de archivo (formato 8.3)
    uint8_t file_count = 0;        // Contador de archivos
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    char menu_str[100];           // Buffer para mensajes del menú

    // Abrir directorio raíz
    fres = f_opendir(&dir, "/");
 8000fbc:	4947      	ldr	r1, [pc, #284]	@ (80010dc <display_menu+0x12c>)
 8000fbe:	4848      	ldr	r0, [pc, #288]	@ (80010e0 <display_menu+0x130>)
 8000fc0:	f006 fb97 	bl	80076f2 <f_opendir>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b46      	ldr	r3, [pc, #280]	@ (80010e4 <display_menu+0x134>)
 8000fca:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8000fcc:	4b45      	ldr	r3, [pc, #276]	@ (80010e4 <display_menu+0x134>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <display_menu+0x2c>
        transmit_uart("¡Error al abrir el directorio!\n");
 8000fd4:	4844      	ldr	r0, [pc, #272]	@ (80010e8 <display_menu+0x138>)
 8000fd6:	f7ff ffd1 	bl	8000f7c <transmit_uart>
 8000fda:	e07a      	b.n	80010d2 <display_menu+0x122>
        return;
    }

    // Mostrar encabezado del menú
    transmit_uart("\n=== Galeria de Arte ASCII ===\n");
 8000fdc:	4843      	ldr	r0, [pc, #268]	@ (80010ec <display_menu+0x13c>)
 8000fde:	f7ff ffcd 	bl	8000f7c <transmit_uart>
    transmit_uart("Archivos disponibles:\n");
 8000fe2:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <display_menu+0x140>)
 8000fe4:	f7ff ffca 	bl	8000f7c <transmit_uart>

    // Leer contenido del directorio
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] && file_count < MAX_FILES) {
 8000fe8:	e026      	b.n	8001038 <display_menu+0x88>
        if (!(fno.fattrib & AM_DIR)) { // Verificar que sea archivo, no directorio
 8000fea:	4b42      	ldr	r3, [pc, #264]	@ (80010f4 <display_menu+0x144>)
 8000fec:	7a1b      	ldrb	r3, [r3, #8]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d120      	bne.n	8001038 <display_menu+0x88>
            strcpy(file_list[file_count], fno.fname);
 8000ff6:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8000ffa:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	440b      	add	r3, r1
 800100a:	493b      	ldr	r1, [pc, #236]	@ (80010f8 <display_menu+0x148>)
 800100c:	4618      	mov	r0, r3
 800100e:	f006 fe93 	bl	8007d38 <strcpy>
            sprintf(menu_str, "%d. %13s\n", file_count + 1, fno.fname); // Limitar a 13 caracteres
 8001012:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	f107 0010 	add.w	r0, r7, #16
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <display_menu+0x148>)
 800101e:	4937      	ldr	r1, [pc, #220]	@ (80010fc <display_menu+0x14c>)
 8001020:	f006 fe26 	bl	8007c70 <siprintf>
            transmit_uart(menu_str);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ffa7 	bl	8000f7c <transmit_uart>
            file_count++;
 800102e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8001032:	3301      	adds	r3, #1
 8001034:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
    while (f_readdir(&dir, &fno) == FR_OK && fno.fname[0] && file_count < MAX_FILES) {
 8001038:	492e      	ldr	r1, [pc, #184]	@ (80010f4 <display_menu+0x144>)
 800103a:	4829      	ldr	r0, [pc, #164]	@ (80010e0 <display_menu+0x130>)
 800103c:	f006 fbf2 	bl	8007824 <f_readdir>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d107      	bne.n	8001056 <display_menu+0xa6>
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <display_menu+0x144>)
 8001048:	7d9b      	ldrb	r3, [r3, #22]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <display_menu+0xa6>
 800104e:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8001052:	2b09      	cmp	r3, #9
 8001054:	d9c9      	bls.n	8000fea <display_menu+0x3a>
        }
    }
    f_closedir(&dir);
 8001056:	4822      	ldr	r0, [pc, #136]	@ (80010e0 <display_menu+0x130>)
 8001058:	f006 fbbe 	bl	80077d8 <f_closedir>

    // Mostrar mensaje de selección
    transmit_uart("\nIngrese numero para seleccionar archivo (1-");
 800105c:	4828      	ldr	r0, [pc, #160]	@ (8001100 <display_menu+0x150>)
 800105e:	f7ff ff8d 	bl	8000f7c <transmit_uart>
    sprintf(menu_str, "%d): ", file_count);
 8001062:	f897 20ff 	ldrb.w	r2, [r7, #255]	@ 0xff
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4926      	ldr	r1, [pc, #152]	@ (8001104 <display_menu+0x154>)
 800106c:	4618      	mov	r0, r3
 800106e:	f006 fdff 	bl	8007c70 <siprintf>
    transmit_uart(menu_str);
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff80 	bl	8000f7c <transmit_uart>

    // Obtener entrada del usuario
    char input[10];
    HAL_UART_Receive(&huart2, (uint8_t*)input, 2, HAL_MAX_DELAY);
 800107c:	1d39      	adds	r1, r7, #4
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	2202      	movs	r2, #2
 8001084:	4820      	ldr	r0, [pc, #128]	@ (8001108 <display_menu+0x158>)
 8001086:	f002 fb30 	bl	80036ea <HAL_UART_Receive>
    input[1] = '\0'; // Terminar cadena
 800108a:	2300      	movs	r3, #0
 800108c:	717b      	strb	r3, [r7, #5]
    int choice = atoi(input);
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fd65 	bl	8007b60 <atoi>
 8001096:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8

    // Validar y mostrar archivo seleccionado
    if (choice > 0 && choice <= file_count) {
 800109a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dd14      	ble.n	80010cc <display_menu+0x11c>
 80010a2:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 80010a6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dc0e      	bgt.n	80010cc <display_menu+0x11c>
        read_and_display_file(file_list[choice-1]);
 80010ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f823 	bl	8001110 <read_and_display_file>
 80010ca:	e002      	b.n	80010d2 <display_menu+0x122>
    } else {
        transmit_uart("¡Seleccion invalida!\n");
 80010cc:	480f      	ldr	r0, [pc, #60]	@ (800110c <display_menu+0x15c>)
 80010ce:	f7ff ff55 	bl	8000f7c <transmit_uart>
    }
}
 80010d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	080085f4 	.word	0x080085f4
 80010e0:	20002104 	.word	0x20002104
 80010e4:	20002100 	.word	0x20002100
 80010e8:	080085f8 	.word	0x080085f8
 80010ec:	0800861c 	.word	0x0800861c
 80010f0:	0800863c 	.word	0x0800863c
 80010f4:	20002138 	.word	0x20002138
 80010f8:	2000214e 	.word	0x2000214e
 80010fc:	08008654 	.word	0x08008654
 8001100:	08008660 	.word	0x08008660
 8001104:	08008690 	.word	0x08008690
 8001108:	2000230c 	.word	0x2000230c
 800110c:	08008698 	.word	0x08008698

08001110 <read_and_display_file>:

void read_and_display_file(char* filename) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    fres = f_open(&fil, filename, FA_READ);
 8001118:	2201      	movs	r2, #1
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	481f      	ldr	r0, [pc, #124]	@ (800119c <read_and_display_file+0x8c>)
 800111e:	f005 ff19 	bl	8006f54 <f_open>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <read_and_display_file+0x90>)
 8001128:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK) {
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <read_and_display_file+0x90>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d12c      	bne.n	800118c <read_and_display_file+0x7c>
        transmit_uart("\nMostrando Arte ASCII:\n");
 8001132:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <read_and_display_file+0x94>)
 8001134:	f7ff ff22 	bl	8000f7c <transmit_uart>
        while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001138:	e019      	b.n	800116e <read_and_display_file+0x5e>
            // Eliminar cualquier '\r' (retorno de carro) que pueda estar presente
            char *pos;
            if ((pos = strchr(buffer, '\r')) != NULL) {
 800113a:	210d      	movs	r1, #13
 800113c:	481a      	ldr	r0, [pc, #104]	@ (80011a8 <read_and_display_file+0x98>)
 800113e:	f006 fdc1 	bl	8007cc4 <strchr>
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <read_and_display_file+0x40>
                *pos = '\0'; // Reemplazar '\r' con terminador nulo
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
            }
            // Transmitir la línea
            transmit_uart(buffer);
 8001150:	4815      	ldr	r0, [pc, #84]	@ (80011a8 <read_and_display_file+0x98>)
 8001152:	f7ff ff13 	bl	8000f7c <transmit_uart>
            // Asegurarse de que haya un salto de línea
            if (buffer[strlen(buffer)-1] != '\n') {
 8001156:	4814      	ldr	r0, [pc, #80]	@ (80011a8 <read_and_display_file+0x98>)
 8001158:	f7ff f85a 	bl	8000210 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	3b01      	subs	r3, #1
 8001160:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <read_and_display_file+0x98>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	2b0a      	cmp	r3, #10
 8001166:	d002      	beq.n	800116e <read_and_display_file+0x5e>
                transmit_uart("\n");
 8001168:	4810      	ldr	r0, [pc, #64]	@ (80011ac <read_and_display_file+0x9c>)
 800116a:	f7ff ff07 	bl	8000f7c <transmit_uart>
        while (f_gets(buffer, sizeof(buffer), &fil)) {
 800116e:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <read_and_display_file+0x8c>)
 8001170:	2164      	movs	r1, #100	@ 0x64
 8001172:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <read_and_display_file+0x98>)
 8001174:	f006 fb93 	bl	800789e <f_gets>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1dd      	bne.n	800113a <read_and_display_file+0x2a>
            }
        }
        f_close(&fil);
 800117e:	4807      	ldr	r0, [pc, #28]	@ (800119c <read_and_display_file+0x8c>)
 8001180:	f006 fa8d 	bl	800769e <f_close>
        transmit_uart("\nFin del arte\n");
 8001184:	480a      	ldr	r0, [pc, #40]	@ (80011b0 <read_and_display_file+0xa0>)
 8001186:	f7ff fef9 	bl	8000f7c <transmit_uart>
    } else {
        transmit_uart("¡Error al abrir el archivo!\n");
    }
}
 800118a:	e002      	b.n	8001192 <read_and_display_file+0x82>
        transmit_uart("¡Error al abrir el archivo!\n");
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <read_and_display_file+0xa4>)
 800118e:	f7ff fef5 	bl	8000f7c <transmit_uart>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200010d0 	.word	0x200010d0
 80011a0:	20002100 	.word	0x20002100
 80011a4:	080086b0 	.word	0x080086b0
 80011a8:	20002250 	.word	0x20002250
 80011ac:	080086c8 	.word	0x080086c8
 80011b0:	080086cc 	.word	0x080086cc
 80011b4:	080086dc 	.word	0x080086dc

080011b8 <main>:

/**
  * @brief  Punto de entrada de la aplicación
  * @retval int
  */
int main(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    HAL_Init();
 80011bc:	f000 faf4 	bl	80017a8 <HAL_Init>
    SystemClock_Config();
 80011c0:	f000 f836 	bl	8001230 <SystemClock_Config>
    MX_GPIO_Init();
 80011c4:	f000 f902 	bl	80013cc <MX_GPIO_Init>
    MX_SPI1_Init();
 80011c8:	f000 f8a0 	bl	800130c <MX_SPI1_Init>
    MX_USART2_UART_Init();
 80011cc:	f000 f8d4 	bl	8001378 <MX_USART2_UART_Init>
    MX_FATFS_Init();
 80011d0:	f003 fa48 	bl	8004664 <MX_FATFS_Init>

    HAL_Delay(500); // Esperar inicialización de la tarjeta SD
 80011d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011d8:	f000 fb58 	bl	800188c <HAL_Delay>

    // Montar sistema de archivos
    fres = f_mount(&fs, "/", 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	490f      	ldr	r1, [pc, #60]	@ (800121c <main+0x64>)
 80011e0:	480f      	ldr	r0, [pc, #60]	@ (8001220 <main+0x68>)
 80011e2:	f005 fe71 	bl	8006ec8 <f_mount>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <main+0x6c>)
 80011ec:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK) {
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <main+0x6c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <main+0x46>
        transmit_uart("¡Tarjeta Micro SD montada exitosamente!\n");
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <main+0x70>)
 80011f8:	f7ff fec0 	bl	8000f7c <transmit_uart>
 80011fc:	e004      	b.n	8001208 <main+0x50>
    } else {
        transmit_uart("¡Error al montar la tarjeta Micro SD!\n");
 80011fe:	480b      	ldr	r0, [pc, #44]	@ (800122c <main+0x74>)
 8001200:	f7ff febc 	bl	8000f7c <transmit_uart>
        return 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e006      	b.n	8001216 <main+0x5e>
    }

    // Bucle principal con el menú
    while (1) {
        display_menu();
 8001208:	f7ff fed2 	bl	8000fb0 <display_menu>
        HAL_Delay(1000); // Pequeña pausa antes de mostrar menú otra vez
 800120c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001210:	f000 fb3c 	bl	800188c <HAL_Delay>
        display_menu();
 8001214:	e7f8      	b.n	8001208 <main+0x50>
    }

    // Desmontar sistema de archivos (no se alcanza por el bucle infinito)
    f_mount(NULL, "", 1);
    return 0;
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	080085f4 	.word	0x080085f4
 8001220:	20000098 	.word	0x20000098
 8001224:	20002100 	.word	0x20002100
 8001228:	080086fc 	.word	0x080086fc
 800122c:	08008728 	.word	0x08008728

08001230 <SystemClock_Config>:

/**
  * @brief Configuración del reloj del sistema
  * @retval None
  */
void SystemClock_Config(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2234      	movs	r2, #52	@ 0x34
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f006 fd38 	bl	8007cb4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <SystemClock_Config+0xd4>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	4a29      	ldr	r2, [pc, #164]	@ (8001304 <SystemClock_Config+0xd4>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	@ 0x40
 8001264:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <SystemClock_Config+0xd4>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <SystemClock_Config+0xd8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800127c:	4a22      	ldr	r2, [pc, #136]	@ (8001308 <SystemClock_Config+0xd8>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <SystemClock_Config+0xd8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM = 8;
 80012a4:	2308      	movs	r3, #8
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN = 64;
 80012a8:	2340      	movs	r3, #64	@ 0x40
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR = 2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 f92b 	bl	8002518 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x9c>
        Error_Handler();
 80012c8:	f000 f8d0 	bl	800146c <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2302      	movs	r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2102      	movs	r1, #2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fe50 	bl	8001f90 <HAL_RCC_ClockConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xca>
        Error_Handler();
 80012f6:	f000 f8b9 	bl	800146c <Error_Handler>
    }
}
 80012fa:	bf00      	nop
 80012fc:	3750      	adds	r7, #80	@ 0x50
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <MX_SPI1_Init>:

/**
  * @brief Inicialización de SPI1
  * @retval None
  */
void MX_SPI1_Init(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001312:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <MX_SPI1_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001318:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800131c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001340:	2210      	movs	r2, #16
 8001342:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_SPI1_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001358:	220a      	movs	r2, #10
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_SPI1_Init+0x64>)
 800135e:	f001 fb79 	bl	8002a54 <HAL_SPI_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPI1_Init+0x60>
        Error_Handler();
 8001368:	f000 f880 	bl	800146c <Error_Handler>
    }
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200022b4 	.word	0x200022b4
 8001374:	40013000 	.word	0x40013000

08001378 <MX_USART2_UART_Init>:

/**
  * @brief Inicialización de USART2
  * @retval None
  */
void MX_USART2_UART_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <MX_USART2_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 9600;
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001384:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001388:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_USART2_UART_Init+0x4c>)
 80013b0:	f002 f8c0 	bl	8003534 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80013ba:	f000 f857 	bl	800146c <Error_Handler>
    }
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000230c 	.word	0x2000230c
 80013c8:	40004400 	.word	0x40004400

080013cc <MX_GPIO_Init>:

/**
  * @brief Inicialización de GPIO
  * @retval None
  */
void MX_GPIO_Init(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <MX_GPIO_Init+0x98>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <MX_GPIO_Init+0x98>)
 80013ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_GPIO_Init+0x98>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_GPIO_Init+0x98>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <MX_GPIO_Init+0x98>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_GPIO_Init+0x98>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_GPIO_Init+0x98>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <MX_GPIO_Init+0x98>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_GPIO_Init+0x98>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]

    HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2140      	movs	r1, #64	@ 0x40
 800143a:	480b      	ldr	r0, [pc, #44]	@ (8001468 <MX_GPIO_Init+0x9c>)
 800143c:	f000 fd8e 	bl	8001f5c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = SD_SS_Pin;
 8001440:	2340      	movs	r3, #64	@ 0x40
 8001442:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_GPIO_Init+0x9c>)
 8001458:	f000 fbec 	bl	8001c34 <HAL_GPIO_Init>
}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400

0800146c <Error_Handler>:

/**
  * @brief Función ejecutada en caso de error
  * @retval None
  */
void Error_Handler(void) {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
    __disable_irq();
    while (1) {
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <Error_Handler+0x8>

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_SPI_MspInit+0x94>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d133      	bne.n	8001552 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_SPI_MspInit+0x98>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001560 <HAL_SPI_MspInit+0x98>)
 80014f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_SPI_MspInit+0x98>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <HAL_SPI_MspInit+0x98>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <HAL_SPI_MspInit+0x98>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <HAL_SPI_MspInit+0x98>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001522:	23e0      	movs	r3, #224	@ 0xe0
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001532:	2305      	movs	r3, #5
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <HAL_SPI_MspInit+0x9c>)
 800153e:	f000 fb79 	bl	8001c34 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2023      	movs	r0, #35	@ 0x23
 8001548:	f000 fa9f 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800154c:	2023      	movs	r0, #35	@ 0x23
 800154e:	f000 fab8 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40013000 	.word	0x40013000
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1d      	ldr	r2, [pc, #116]	@ (80015fc <HAL_UART_MspInit+0x94>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d133      	bne.n	80015f2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <HAL_UART_MspInit+0x98>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <HAL_UART_MspInit+0x98>)
 8001594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_UART_MspInit+0x98>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <HAL_UART_MspInit+0x98>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <HAL_UART_MspInit+0x98>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_UART_MspInit+0x98>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015c2:	230c      	movs	r3, #12
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d2:	2307      	movs	r3, #7
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <HAL_UART_MspInit+0x9c>)
 80015de:	f000 fb29 	bl	8001c34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2026      	movs	r0, #38	@ 0x26
 80015e8:	f000 fa4f 	bl	8001a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ec:	2026      	movs	r0, #38	@ 0x26
 80015ee:	f000 fa68 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004400 	.word	0x40004400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
if(Timer1>0){
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <SysTick_Handler+0x38>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <SysTick_Handler+0x18>
	Timer1--;
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <SysTick_Handler+0x38>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <SysTick_Handler+0x38>)
 8001672:	801a      	strh	r2, [r3, #0]
}
if(Timer2>0){
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <SysTick_Handler+0x3c>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <SysTick_Handler+0x2c>
	Timer2--;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <SysTick_Handler+0x3c>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <SysTick_Handler+0x3c>)
 8001686:	801a      	strh	r2, [r3, #0]
}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f8e0 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800168c:	f000 fa33 	bl	8001af6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000090 	.word	0x20000090
 8001698:	20000092 	.word	0x20000092

0800169c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <SPI1_IRQHandler+0x10>)
 80016a2:	f001 fd4d 	bl	8003140 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200022b4 	.word	0x200022b4

080016b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <USART2_IRQHandler+0x10>)
 80016b6:	f002 f8af 	bl	8003818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000230c 	.word	0x2000230c

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	@ (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f006 faf4 	bl	8007ce0 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20020000 	.word	0x20020000
 8001724:	00000400 	.word	0x00000400
 8001728:	20002354 	.word	0x20002354
 800172c:	200026e0 	.word	0x200026e0

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800178c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001758:	f7ff ffea 	bl	8001730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	@ (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001782:	f006 fab3 	bl	8007cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fd17 	bl	80011b8 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001798:	08008d34 	.word	0x08008d34
  ldr r2, =_sbss
 800179c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017a0:	200026e0 	.word	0x200026e0

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <HAL_Init+0x40>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_Init+0x40>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	@ (80017e8 <HAL_Init+0x40>)
 80017ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f94f 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fe4c 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f967 	bl	8001ade <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 f92f 	bl	8001a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	@ (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000004 	.word	0x20000004
 8001844:	2000000c 	.word	0x2000000c
 8001848:	20000008 	.word	0x20000008

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000000c 	.word	0x2000000c
 8001870:	20002358 	.word	0x20002358

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20002358 	.word	0x20002358

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4907      	ldr	r1, [pc, #28]	@ (8001970 <__NVIC_EnableIRQ+0x38>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	@ (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	@ (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	@ 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff29 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff3e 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff8e 	bl	80019c8 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff31 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffa2 	bl	8001a30 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001afa:	f000 f802 	bl	8001b02 <HAL_SYSTICK_Callback>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b1e:	f7ff fea9 	bl	8001874 <HAL_GetTick>
 8001b22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d008      	beq.n	8001b42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e052      	b.n	8001be8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0216 	bic.w	r2, r2, #22
 8001b50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695a      	ldr	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <HAL_DMA_Abort+0x62>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0208 	bic.w	r2, r2, #8
 8001b80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0201 	bic.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b92:	e013      	b.n	8001bbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b94:	f7ff fe6e 	bl	8001874 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d90c      	bls.n	8001bbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e015      	b.n	8001be8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1e4      	bne.n	8001b94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	223f      	movs	r2, #63	@ 0x3f
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d004      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00c      	b.n	8001c28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2205      	movs	r2, #5
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e165      	b.n	8001f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f040 8154 	bne.w	8001f16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d005      	beq.n	8001c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d130      	bne.n	8001ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80ae 	beq.w	8001f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001f34 <HAL_GPIO_Init+0x300>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f34 <HAL_GPIO_Init+0x300>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dca:	4b5a      	ldr	r3, [pc, #360]	@ (8001f34 <HAL_GPIO_Init+0x300>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a58      	ldr	r2, [pc, #352]	@ (8001f38 <HAL_GPIO_Init+0x304>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4f      	ldr	r2, [pc, #316]	@ (8001f3c <HAL_GPIO_Init+0x308>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d025      	beq.n	8001e4e <HAL_GPIO_Init+0x21a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4e      	ldr	r2, [pc, #312]	@ (8001f40 <HAL_GPIO_Init+0x30c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01f      	beq.n	8001e4a <HAL_GPIO_Init+0x216>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f44 <HAL_GPIO_Init+0x310>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d019      	beq.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	@ (8001f48 <HAL_GPIO_Init+0x314>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d013      	beq.n	8001e42 <HAL_GPIO_Init+0x20e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f4c <HAL_GPIO_Init+0x318>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00d      	beq.n	8001e3e <HAL_GPIO_Init+0x20a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4a      	ldr	r2, [pc, #296]	@ (8001f50 <HAL_GPIO_Init+0x31c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d007      	beq.n	8001e3a <HAL_GPIO_Init+0x206>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a49      	ldr	r2, [pc, #292]	@ (8001f54 <HAL_GPIO_Init+0x320>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_GPIO_Init+0x202>
 8001e32:	2306      	movs	r3, #6
 8001e34:	e00c      	b.n	8001e50 <HAL_GPIO_Init+0x21c>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e00a      	b.n	8001e50 <HAL_GPIO_Init+0x21c>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x21c>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x21c>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x21c>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x21c>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x21c>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4935      	ldr	r1, [pc, #212]	@ (8001f38 <HAL_GPIO_Init+0x304>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e92:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ebc:	4a26      	ldr	r2, [pc, #152]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec2:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eec:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f10:	4a11      	ldr	r2, [pc, #68]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f ae96 	bls.w	8001c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	619a      	str	r2, [r3, #24]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0cc      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b68      	ldr	r3, [pc, #416]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d90c      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b65      	ldr	r3, [pc, #404]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a52      	ldr	r2, [pc, #328]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d044      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	2b03      	cmp	r3, #3
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e067      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b37      	ldr	r3, [pc, #220]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4934      	ldr	r1, [pc, #208]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7ff fbf8 	bl	8001874 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7ff fbf4 	bl	8001874 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d20c      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f855 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fb58 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00
 800214c:	40023800 	.word	0x40023800
 8002150:	08008798 	.word	0x08008798
 8002154:	20000004 	.word	0x20000004
 8002158:	20000008 	.word	0x20000008

0800215c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <HAL_RCC_GetHCLKFreq+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002178:	f7ff fff0 	bl	800215c <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	@ (8002198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	080087a8 	.word	0x080087a8

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a0:	f7ff ffdc 	bl	800215c <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0b5b      	lsrs	r3, r3, #13
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	@ (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	080087a8 	.word	0x080087a8

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c8:	b0a6      	sub	sp, #152	@ 0x98
 80021ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ea:	4bc8      	ldr	r3, [pc, #800]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	f200 817e 	bhi.w	80024f4 <HAL_RCC_GetSysClockFreq+0x330>
 80021f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002200 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002235 	.word	0x08002235
 8002204:	080024f5 	.word	0x080024f5
 8002208:	080024f5 	.word	0x080024f5
 800220c:	080024f5 	.word	0x080024f5
 8002210:	0800223d 	.word	0x0800223d
 8002214:	080024f5 	.word	0x080024f5
 8002218:	080024f5 	.word	0x080024f5
 800221c:	080024f5 	.word	0x080024f5
 8002220:	08002245 	.word	0x08002245
 8002224:	080024f5 	.word	0x080024f5
 8002228:	080024f5 	.word	0x080024f5
 800222c:	080024f5 	.word	0x080024f5
 8002230:	080023af 	.word	0x080023af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4bb6      	ldr	r3, [pc, #728]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002236:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800223a:	e15f      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223c:	4bb5      	ldr	r3, [pc, #724]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x350>)
 800223e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002242:	e15b      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002244:	4bb1      	ldr	r3, [pc, #708]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800224c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002250:	4bae      	ldr	r3, [pc, #696]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d031      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800225c:	4bab      	ldr	r3, [pc, #684]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	099b      	lsrs	r3, r3, #6
 8002262:	2200      	movs	r2, #0
 8002264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002266:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800226a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002270:	2300      	movs	r3, #0
 8002272:	667b      	str	r3, [r7, #100]	@ 0x64
 8002274:	4ba7      	ldr	r3, [pc, #668]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x350>)
 8002276:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800227a:	462a      	mov	r2, r5
 800227c:	fb03 f202 	mul.w	r2, r3, r2
 8002280:	2300      	movs	r3, #0
 8002282:	4621      	mov	r1, r4
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	4aa2      	ldr	r2, [pc, #648]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x350>)
 800228c:	4621      	mov	r1, r4
 800228e:	fba1 1202 	umull	r1, r2, r1, r2
 8002292:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002294:	460a      	mov	r2, r1
 8002296:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002298:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800229a:	4413      	add	r3, r2
 800229c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800229e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022a2:	2200      	movs	r2, #0
 80022a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80022b0:	f7fe f806 	bl	80002c0 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4613      	mov	r3, r2
 80022ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022be:	e064      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c0:	4b92      	ldr	r3, [pc, #584]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	2200      	movs	r2, #0
 80022c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80022ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80022cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022d4:	2300      	movs	r3, #0
 80022d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80022dc:	4622      	mov	r2, r4
 80022de:	462b      	mov	r3, r5
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	0159      	lsls	r1, r3, #5
 80022ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ee:	0150      	lsls	r0, r2, #5
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4621      	mov	r1, r4
 80022f6:	1a51      	subs	r1, r2, r1
 80022f8:	6139      	str	r1, [r7, #16]
 80022fa:	4629      	mov	r1, r5
 80022fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800230e:	4659      	mov	r1, fp
 8002310:	018b      	lsls	r3, r1, #6
 8002312:	4651      	mov	r1, sl
 8002314:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002318:	4651      	mov	r1, sl
 800231a:	018a      	lsls	r2, r1, #6
 800231c:	4651      	mov	r1, sl
 800231e:	ebb2 0801 	subs.w	r8, r2, r1
 8002322:	4659      	mov	r1, fp
 8002324:	eb63 0901 	sbc.w	r9, r3, r1
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800233c:	4690      	mov	r8, r2
 800233e:	4699      	mov	r9, r3
 8002340:	4623      	mov	r3, r4
 8002342:	eb18 0303 	adds.w	r3, r8, r3
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	462b      	mov	r3, r5
 800234a:	eb49 0303 	adc.w	r3, r9, r3
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800235c:	4629      	mov	r1, r5
 800235e:	028b      	lsls	r3, r1, #10
 8002360:	4621      	mov	r1, r4
 8002362:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002366:	4621      	mov	r1, r4
 8002368:	028a      	lsls	r2, r1, #10
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002372:	2200      	movs	r2, #0
 8002374:	643b      	str	r3, [r7, #64]	@ 0x40
 8002376:	647a      	str	r2, [r7, #68]	@ 0x44
 8002378:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800237c:	f7fd ffa0 	bl	80002c0 <__aeabi_uldivmod>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4613      	mov	r3, r2
 8002386:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800238a:	4b60      	ldr	r3, [pc, #384]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	3301      	adds	r3, #1
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800239c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023ac:	e0a6      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ae:	4b57      	ldr	r3, [pc, #348]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ba:	4b54      	ldr	r3, [pc, #336]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02a      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c6:	4b51      	ldr	r3, [pc, #324]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	2200      	movs	r2, #0
 80023ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023d8:	2100      	movs	r1, #0
 80023da:	4b4e      	ldr	r3, [pc, #312]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x350>)
 80023dc:	fb03 f201 	mul.w	r2, r3, r1
 80023e0:	2300      	movs	r3, #0
 80023e2:	fb00 f303 	mul.w	r3, r0, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002514 <HAL_RCC_GetSysClockFreq+0x350>)
 80023ea:	fba0 1202 	umull	r1, r2, r0, r2
 80023ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80023f0:	460a      	mov	r2, r1
 80023f2:	673a      	str	r2, [r7, #112]	@ 0x70
 80023f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80023f6:	4413      	add	r3, r2
 80023f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80023fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023fe:	2200      	movs	r2, #0
 8002400:	633b      	str	r3, [r7, #48]	@ 0x30
 8002402:	637a      	str	r2, [r7, #52]	@ 0x34
 8002404:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002408:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800240c:	f7fd ff58 	bl	80002c0 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4613      	mov	r3, r2
 8002416:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800241a:	e05b      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241c:	4b3b      	ldr	r3, [pc, #236]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	2200      	movs	r2, #0
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
 8002434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002438:	4642      	mov	r2, r8
 800243a:	464b      	mov	r3, r9
 800243c:	f04f 0000 	mov.w	r0, #0
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	0159      	lsls	r1, r3, #5
 8002446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244a:	0150      	lsls	r0, r2, #5
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4641      	mov	r1, r8
 8002452:	ebb2 0a01 	subs.w	sl, r2, r1
 8002456:	4649      	mov	r1, r9
 8002458:	eb63 0b01 	sbc.w	fp, r3, r1
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800246c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002470:	ebb2 040a 	subs.w	r4, r2, sl
 8002474:	eb63 050b 	sbc.w	r5, r3, fp
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	00eb      	lsls	r3, r5, #3
 8002482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002486:	00e2      	lsls	r2, r4, #3
 8002488:	4614      	mov	r4, r2
 800248a:	461d      	mov	r5, r3
 800248c:	4643      	mov	r3, r8
 800248e:	18e3      	adds	r3, r4, r3
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	464b      	mov	r3, r9
 8002494:	eb45 0303 	adc.w	r3, r5, r3
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024a6:	4629      	mov	r1, r5
 80024a8:	028b      	lsls	r3, r1, #10
 80024aa:	4621      	mov	r1, r4
 80024ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b0:	4621      	mov	r1, r4
 80024b2:	028a      	lsls	r2, r1, #10
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024bc:	2200      	movs	r2, #0
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	61fa      	str	r2, [r7, #28]
 80024c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c6:	f7fd fefb 	bl	80002c0 <__aeabi_uldivmod>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4613      	mov	r3, r2
 80024d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_RCC_GetSysClockFreq+0x348>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0f1b      	lsrs	r3, r3, #28
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80024e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024f2:	e003      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_RCC_GetSysClockFreq+0x34c>)
 80024f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80024fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002500:	4618      	mov	r0, r3
 8002502:	3798      	adds	r7, #152	@ 0x98
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	00f42400 	.word	0x00f42400
 8002514:	017d7840 	.word	0x017d7840

08002518 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e28d      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8083 	beq.w	800263e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002538:	4b94      	ldr	r3, [pc, #592]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b04      	cmp	r3, #4
 8002542:	d019      	beq.n	8002578 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002544:	4b91      	ldr	r3, [pc, #580]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
        || \
 800254c:	2b08      	cmp	r3, #8
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002550:	4b8e      	ldr	r3, [pc, #568]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002558:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800255c:	d00c      	beq.n	8002578 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255e:	4b8b      	ldr	r3, [pc, #556]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d112      	bne.n	8002590 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002576:	d10b      	bne.n	8002590 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	4b84      	ldr	r3, [pc, #528]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d05b      	beq.n	800263c <HAL_RCC_OscConfig+0x124>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d157      	bne.n	800263c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e25a      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002598:	d106      	bne.n	80025a8 <HAL_RCC_OscConfig+0x90>
 800259a:	4b7c      	ldr	r3, [pc, #496]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7b      	ldr	r2, [pc, #492]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01d      	b.n	80025e4 <HAL_RCC_OscConfig+0xcc>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0xb4>
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b73      	ldr	r3, [pc, #460]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a72      	ldr	r2, [pc, #456]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xcc>
 80025cc:	4b6f      	ldr	r3, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a6e      	ldr	r2, [pc, #440]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b6c      	ldr	r3, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6b      	ldr	r2, [pc, #428]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff f942 	bl	8001874 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7ff f93e 	bl	8001874 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e21f      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b61      	ldr	r3, [pc, #388]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0xdc>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7ff f92e 	bl	8001874 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7ff f92a 	bl	8001874 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e20b      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	4b57      	ldr	r3, [pc, #348]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x104>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d06f      	beq.n	800272a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800264a:	4b50      	ldr	r3, [pc, #320]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b00      	cmp	r3, #0
 8002654:	d017      	beq.n	8002686 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002656:	4b4d      	ldr	r3, [pc, #308]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
        || \
 800265e:	2b08      	cmp	r3, #8
 8002660:	d105      	bne.n	800266e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x186>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1d3      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4937      	ldr	r1, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x278>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff f8d7 	bl	8001874 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7ff f8d3 	bl	8001874 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1b4      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x278>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff f8b6 	bl	8001874 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7ff f8b2 	bl	8001874 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e193      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d036      	beq.n	80027a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x27c>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7ff f896 	bl	8001874 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7ff f892 	bl	8001874 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e173      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_OscConfig+0x274>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x234>
 800276a:	e01b      	b.n	80027a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x27c>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7ff f87f 	bl	8001874 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e00e      	b.n	8002798 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7ff f87b 	bl	8001874 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d907      	bls.n	8002798 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e15c      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b8a      	ldr	r3, [pc, #552]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b83      	ldr	r3, [pc, #524]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b7f      	ldr	r3, [pc, #508]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a7e      	ldr	r2, [pc, #504]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b7c      	ldr	r3, [pc, #496]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b79      	ldr	r3, [pc, #484]	@ (80029c8 <HAL_RCC_OscConfig+0x4b0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b76      	ldr	r3, [pc, #472]	@ (80029c8 <HAL_RCC_OscConfig+0x4b0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a75      	ldr	r2, [pc, #468]	@ (80029c8 <HAL_RCC_OscConfig+0x4b0>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7ff f83b 	bl	8001874 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7ff f837 	bl	8001874 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e118      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6c      	ldr	r3, [pc, #432]	@ (80029c8 <HAL_RCC_OscConfig+0x4b0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x31e>
 8002828:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a65      	ldr	r2, [pc, #404]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x358>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x340>
 800283e:	4b61      	ldr	r3, [pc, #388]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	4a60      	ldr	r2, [pc, #384]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	@ 0x70
 800284a:	4b5e      	ldr	r3, [pc, #376]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5d      	ldr	r2, [pc, #372]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x358>
 8002858:	4b5a      	ldr	r3, [pc, #360]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a59      	ldr	r2, [pc, #356]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b57      	ldr	r3, [pc, #348]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a56      	ldr	r2, [pc, #344]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe fffc 	bl	8001874 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fff8 	bl	8001874 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0d7      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b4b      	ldr	r3, [pc, #300]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x368>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe ffe6 	bl	8001874 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe ffe2 	bl	8001874 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0c1      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b40      	ldr	r3, [pc, #256]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b3b      	ldr	r3, [pc, #236]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a3a      	ldr	r2, [pc, #232]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80ad 	beq.w	8002a44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b36      	ldr	r3, [pc, #216]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d060      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d145      	bne.n	800298a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	4b33      	ldr	r3, [pc, #204]	@ (80029cc <HAL_RCC_OscConfig+0x4b4>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe ffb6 	bl	8001874 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe ffb2 	bl	8001874 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e093      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	071b      	lsls	r3, r3, #28
 8002956:	491b      	ldr	r1, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295c:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x4b4>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe ff87 	bl	8001874 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe ff83 	bl	8001874 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e064      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x452>
 8002988:	e05c      	b.n	8002a44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <HAL_RCC_OscConfig+0x4b4>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe ff70 	bl	8001874 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe ff6c 	bl	8001874 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e04d      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x480>
 80029b6:	e045      	b.n	8002a44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e040      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000
 80029cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a50 <HAL_RCC_OscConfig+0x538>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d030      	beq.n	8002a40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d129      	bne.n	8002a40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d122      	bne.n	8002a40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d119      	bne.n	8002a40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d10f      	bne.n	8002a40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07b      	b.n	8002b5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a76:	d009      	beq.n	8002a8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
 8002a7e:	e005      	b.n	8002a8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fd0e 	bl	80014c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b10:	ea42 0103 	orr.w	r1, r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0104 	and.w	r1, r3, #4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	f003 0210 	and.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b088      	sub	sp, #32
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b76:	f7fe fe7d 	bl	8001874 <HAL_GetTick>
 8002b7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d001      	beq.n	8002b90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e12a      	b.n	8002de6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Transmit+0x36>
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e122      	b.n	8002de6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_SPI_Transmit+0x48>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e11b      	b.n	8002de6 <HAL_SPI_Transmit+0x280>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bfc:	d10f      	bne.n	8002c1e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c28:	2b40      	cmp	r3, #64	@ 0x40
 8002c2a:	d007      	beq.n	8002c3c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c44:	d152      	bne.n	8002cec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <HAL_SPI_Transmit+0xee>
 8002c4e:	8b7b      	ldrh	r3, [r7, #26]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d145      	bne.n	8002ce0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	881a      	ldrh	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c64:	1c9a      	adds	r2, r3, #2
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c78:	e032      	b.n	8002ce0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d112      	bne.n	8002cae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	881a      	ldrh	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c98:	1c9a      	adds	r2, r3, #2
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002cac:	e018      	b.n	8002ce0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cae:	f7fe fde1 	bl	8001874 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d803      	bhi.n	8002cc6 <HAL_SPI_Transmit+0x160>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d102      	bne.n	8002ccc <HAL_SPI_Transmit+0x166>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e082      	b.n	8002de6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1c7      	bne.n	8002c7a <HAL_SPI_Transmit+0x114>
 8002cea:	e053      	b.n	8002d94 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_Transmit+0x194>
 8002cf4:	8b7b      	ldrh	r3, [r7, #26]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d147      	bne.n	8002d8a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d20:	e033      	b.n	8002d8a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d113      	bne.n	8002d58 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d56:	e018      	b.n	8002d8a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d58:	f7fe fd8c 	bl	8001874 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d803      	bhi.n	8002d70 <HAL_SPI_Transmit+0x20a>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d102      	bne.n	8002d76 <HAL_SPI_Transmit+0x210>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e02d      	b.n	8002de6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1c6      	bne.n	8002d22 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d94:	69fa      	ldr	r2, [r7, #28]
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fb77 	bl	800348c <SPI_EndRxTxTransaction>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b08a      	sub	sp, #40	@ 0x28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e00:	f7fe fd38 	bl	8001874 <HAL_GetTick>
 8002e04:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e0c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d00c      	beq.n	8002e38 <HAL_SPI_TransmitReceive+0x4a>
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e24:	d106      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x46>
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d001      	beq.n	8002e38 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
 8002e36:	e17f      	b.n	8003138 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_SPI_TransmitReceive+0x5c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_SPI_TransmitReceive+0x5c>
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e174      	b.n	8003138 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x6e>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e16d      	b.n	8003138 <HAL_SPI_TransmitReceive+0x34a>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d003      	beq.n	8002e78 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2205      	movs	r2, #5
 8002e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	887a      	ldrh	r2, [r7, #2]
 8002e8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	887a      	ldrh	r2, [r7, #2]
 8002e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b40      	cmp	r3, #64	@ 0x40
 8002eba:	d007      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ed4:	d17e      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_SPI_TransmitReceive+0xf6>
 8002ede:	8afb      	ldrh	r3, [r7, #22]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d16c      	bne.n	8002fbe <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f08:	e059      	b.n	8002fbe <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d11b      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x162>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x162>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d113      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d119      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x1a4>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d014      	beq.n	8002f92 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f72:	b292      	uxth	r2, r2
 8002f74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7a:	1c9a      	adds	r2, r3, #2
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f92:	f7fe fc6f 	bl	8001874 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d80d      	bhi.n	8002fbe <HAL_SPI_TransmitReceive+0x1d0>
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d009      	beq.n	8002fbe <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0bc      	b.n	8003138 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1a0      	bne.n	8002f0a <HAL_SPI_TransmitReceive+0x11c>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d19b      	bne.n	8002f0a <HAL_SPI_TransmitReceive+0x11c>
 8002fd2:	e082      	b.n	80030da <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_SPI_TransmitReceive+0x1f4>
 8002fdc:	8afb      	ldrh	r3, [r7, #22]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d171      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003008:	e05d      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d11c      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x264>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d017      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x264>
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	2b01      	cmp	r3, #1
 8003026:	d114      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	7812      	ldrb	r2, [r2, #0]
 8003034:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d119      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x2a6>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d014      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003090:	2301      	movs	r3, #1
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003094:	f7fe fbee 	bl	8001874 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d803      	bhi.n	80030ac <HAL_SPI_TransmitReceive+0x2be>
 80030a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d102      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x2c4>
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e038      	b.n	8003138 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d19c      	bne.n	800300a <HAL_SPI_TransmitReceive+0x21c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d197      	bne.n	800300a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030da:	6a3a      	ldr	r2, [r7, #32]
 80030dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f9d4 	bl	800348c <SPI_EndRxTxTransaction>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e01d      	b.n	8003138 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003136:	2300      	movs	r3, #0
  }
}
 8003138:	4618      	mov	r0, r3
 800313a:	3728      	adds	r7, #40	@ 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10f      	bne.n	8003184 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
    return;
 8003182:	e0d7      	b.n	8003334 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <HAL_SPI_IRQHandler+0x66>
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	09db      	lsrs	r3, r3, #7
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d004      	beq.n	80031a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
    return;
 80031a4:	e0c6      	b.n	8003334 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10c      	bne.n	80031cc <HAL_SPI_IRQHandler+0x8c>
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 80b4 	beq.w	8003334 <HAL_SPI_IRQHandler+0x1f4>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80ad 	beq.w	8003334 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d023      	beq.n	800322e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d011      	beq.n	8003216 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	f043 0204 	orr.w	r2, r3, #4
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	e00b      	b.n	800322e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
        return;
 800322c:	e082      	b.n	8003334 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d014      	beq.n	8003264 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00c      	beq.n	800328a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	f043 0208 	orr.w	r2, r3, #8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04f      	beq.n	8003332 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032a0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <HAL_SPI_IRQHandler+0x17e>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d034      	beq.n	8003328 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0203 	bic.w	r2, r2, #3
 80032cc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d011      	beq.n	80032fa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	4a18      	ldr	r2, [pc, #96]	@ (800333c <HAL_SPI_IRQHandler+0x1fc>)
 80032dc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fc84 	bl	8001bf0 <HAL_DMA_Abort_IT>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003306:	4a0d      	ldr	r2, [pc, #52]	@ (800333c <HAL_SPI_IRQHandler+0x1fc>)
 8003308:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fc6e 	bl	8001bf0 <HAL_DMA_Abort_IT>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003326:	e003      	b.n	8003330 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f809 	bl	8003340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800332e:	e000      	b.n	8003332 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003330:	bf00      	nop
    return;
 8003332:	bf00      	nop
  }
}
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	08003355 	.word	0x08003355

08003340 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ffe6 	bl	8003340 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800338c:	f7fe fa72 	bl	8001874 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	4413      	add	r3, r2
 800339a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800339c:	f7fe fa6a 	bl	8001874 <HAL_GetTick>
 80033a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033a2:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	015b      	lsls	r3, r3, #5
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b2:	e054      	b.n	800345e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d050      	beq.n	800345e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033bc:	f7fe fa5a 	bl	8001874 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d902      	bls.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d13d      	bne.n	800344e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033ea:	d111      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f4:	d004      	beq.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fe:	d107      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003418:	d10f      	bne.n	800343a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003438:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e017      	b.n	800347e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3b01      	subs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	429a      	cmp	r2, r3
 800347a:	d19b      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000004 	.word	0x20000004

0800348c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2201      	movs	r2, #1
 80034a0:	2102      	movs	r1, #2
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff ff6a 	bl	800337c <SPI_WaitFlagStateUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e032      	b.n	8003524 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034be:	4b1b      	ldr	r3, [pc, #108]	@ (800352c <SPI_EndRxTxTransaction+0xa0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003530 <SPI_EndRxTxTransaction+0xa4>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	0d5b      	lsrs	r3, r3, #21
 80034ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034dc:	d112      	bne.n	8003504 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2200      	movs	r2, #0
 80034e6:	2180      	movs	r1, #128	@ 0x80
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff ff47 	bl	800337c <SPI_WaitFlagStateUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d016      	beq.n	8003522 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f8:	f043 0220 	orr.w	r2, r3, #32
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e00f      	b.n	8003524 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3b01      	subs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	2b80      	cmp	r3, #128	@ 0x80
 800351c:	d0f2      	beq.n	8003504 <SPI_EndRxTxTransaction+0x78>
 800351e:	e000      	b.n	8003522 <SPI_EndRxTxTransaction+0x96>
        break;
 8003520:	bf00      	nop
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000004 	.word	0x20000004
 8003530:	165e9f81 	.word	0x165e9f81

08003534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e042      	b.n	80035cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe f804 	bl	8001568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	@ 0x24
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fdff 	bl	800417c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800358c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800359c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	@ 0x28
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d175      	bne.n	80036e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_UART_Transmit+0x2c>
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e06e      	b.n	80036e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2221      	movs	r2, #33	@ 0x21
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fe f92f 	bl	8001874 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	88fa      	ldrh	r2, [r7, #6]
 8003622:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800362c:	d108      	bne.n	8003640 <HAL_UART_Transmit+0x6c>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	e003      	b.n	8003648 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003648:	e02e      	b.n	80036a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	2180      	movs	r1, #128	@ 0x80
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fb9b 	bl	8003d90 <UART_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e03a      	b.n	80036e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	3302      	adds	r3, #2
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e007      	b.n	800369a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1cb      	bne.n	800364a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2140      	movs	r1, #64	@ 0x40
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fb67 	bl	8003d90 <UART_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e006      	b.n	80036e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b08a      	sub	sp, #40	@ 0x28
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	f040 8081 	bne.w	800380e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Receive+0x2e>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e079      	b.n	8003810 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2222      	movs	r2, #34	@ 0x22
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003730:	f7fe f8a0 	bl	8001874 <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374a:	d108      	bne.n	800375e <HAL_UART_Receive+0x74>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	e003      	b.n	8003766 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003766:	e047      	b.n	80037f8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	2120      	movs	r1, #32
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fb0c 	bl	8003d90 <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e042      	b.n	8003810 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10c      	bne.n	80037aa <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379c:	b29a      	uxth	r2, r3
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	3302      	adds	r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	e01f      	b.n	80037ea <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b2:	d007      	beq.n	80037c4 <HAL_UART_Receive+0xda>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_UART_Receive+0xe8>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e008      	b.n	80037e4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3301      	adds	r3, #1
 80037e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1b2      	bne.n	8003768 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	e000      	b.n	8003810 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800380e:	2302      	movs	r3, #2
  }
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b0ba      	sub	sp, #232	@ 0xe8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_UART_IRQHandler+0x66>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fbc2 	bl	8004000 <UART_Receive_IT>
      return;
 800387c:	e25b      	b.n	8003d36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800387e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 80de 	beq.w	8003a44 <HAL_UART_IRQHandler+0x22c>
 8003888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d106      	bne.n	80038a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003898:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80d1 	beq.w	8003a44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_UART_IRQHandler+0xae>
 80038ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_UART_IRQHandler+0xd2>
 80038d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_UART_IRQHandler+0xf6>
 80038f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d011      	beq.n	800393e <HAL_UART_IRQHandler+0x126>
 800391a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	f043 0208 	orr.w	r2, r3, #8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 81f2 	beq.w	8003d2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_UART_IRQHandler+0x14e>
 8003954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fb4d 	bl	8004000 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <HAL_UART_IRQHandler+0x17a>
 800398a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d04f      	beq.n	8003a32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fa55 	bl	8003e42 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a2:	2b40      	cmp	r3, #64	@ 0x40
 80039a4:	d141      	bne.n	8003a2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3314      	adds	r3, #20
 80039ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039b4:	e853 3f00 	ldrex	r3, [r3]
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3314      	adds	r3, #20
 80039ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1d9      	bne.n	80039a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d013      	beq.n	8003a22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	4a7e      	ldr	r2, [pc, #504]	@ (8003bf8 <HAL_UART_IRQHandler+0x3e0>)
 8003a00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe f8f2 	bl	8001bf0 <HAL_DMA_Abort_IT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00e      	b.n	8003a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f99e 	bl	8003d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e00a      	b.n	8003a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f99a 	bl	8003d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	e006      	b.n	8003a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f996 	bl	8003d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a3e:	e175      	b.n	8003d2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a40:	bf00      	nop
    return;
 8003a42:	e173      	b.n	8003d2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 814f 	bne.w	8003cec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8148 	beq.w	8003cec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8141 	beq.w	8003cec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8a:	2b40      	cmp	r3, #64	@ 0x40
 8003a8c:	f040 80b6 	bne.w	8003bfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8145 	beq.w	8003d30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	f080 813e 	bcs.w	8003d30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003aba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac6:	f000 8088 	beq.w	8003bda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003af6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1d9      	bne.n	8003aca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3314      	adds	r3, #20
 8003b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e1      	bne.n	8003b16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e3      	bne.n	8003b52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003baa:	f023 0310 	bic.w	r3, r3, #16
 8003bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003bbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bbe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e3      	bne.n	8003b98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fd ff9b 	bl	8001b10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f8c1 	bl	8003d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf6:	e09b      	b.n	8003d30 <HAL_UART_IRQHandler+0x518>
 8003bf8:	08003f09 	.word	0x08003f09
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 808e 	beq.w	8003d34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8089 	beq.w	8003d34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c46:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e3      	bne.n	8003c22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e3      	bne.n	8003c5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cc4:	61fa      	str	r2, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e3      	bne.n	8003ca0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f847 	bl	8003d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cea:	e023      	b.n	8003d34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_UART_IRQHandler+0x4f4>
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f913 	bl	8003f30 <UART_Transmit_IT>
    return;
 8003d0a:	e014      	b.n	8003d36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00e      	beq.n	8003d36 <HAL_UART_IRQHandler+0x51e>
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f953 	bl	8003fd0 <UART_EndTransmit_IT>
    return;
 8003d2a:	e004      	b.n	8003d36 <HAL_UART_IRQHandler+0x51e>
    return;
 8003d2c:	bf00      	nop
 8003d2e:	e002      	b.n	8003d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d34:	bf00      	nop
  }
}
 8003d36:	37e8      	adds	r7, #232	@ 0xe8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da0:	e03b      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d037      	beq.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fd fd63 	bl	8001874 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e03a      	b.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d023      	beq.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b80      	cmp	r3, #128	@ 0x80
 8003dd6:	d020      	beq.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b40      	cmp	r3, #64	@ 0x40
 8003ddc:	d01d      	beq.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d116      	bne.n	8003e1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f81d 	bl	8003e42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00f      	b.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d0b4      	beq.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b095      	sub	sp, #84	@ 0x54
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e5      	bne.n	8003e4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3314      	adds	r3, #20
 8003e84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d119      	bne.n	8003eee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f023 0310 	bic.w	r3, r3, #16
 8003ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eda:	61ba      	str	r2, [r7, #24]
 8003edc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003efc:	bf00      	nop
 8003efe:	3754      	adds	r7, #84	@ 0x54
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff ff1e 	bl	8003d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b21      	cmp	r3, #33	@ 0x21
 8003f42:	d13e      	bne.n	8003fc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4c:	d114      	bne.n	8003f78 <UART_Transmit_IT+0x48>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d110      	bne.n	8003f78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	621a      	str	r2, [r3, #32]
 8003f76:	e008      	b.n	8003f8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	1c59      	adds	r1, r3, #1
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6211      	str	r1, [r2, #32]
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4619      	mov	r1, r3
 8003f98:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff fea3 	bl	8003d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	@ 0x30
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b22      	cmp	r3, #34	@ 0x22
 8004012:	f040 80ae 	bne.w	8004172 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401e:	d117      	bne.n	8004050 <UART_Receive_IT+0x50>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d113      	bne.n	8004050 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004028:	2300      	movs	r3, #0
 800402a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403e:	b29a      	uxth	r2, r3
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	1c9a      	adds	r2, r3, #2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
 800404e:	e026      	b.n	800409e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004062:	d007      	beq.n	8004074 <UART_Receive_IT+0x74>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <UART_Receive_IT+0x82>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e008      	b.n	8004094 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800408e:	b2da      	uxtb	r2, r3
 8004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004092:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4619      	mov	r1, r3
 80040ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d15d      	bne.n	800416e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0220 	bic.w	r2, r2, #32
 80040c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d135      	bne.n	8004164 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	613b      	str	r3, [r7, #16]
   return(result);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f023 0310 	bic.w	r3, r3, #16
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411e:	623a      	str	r2, [r7, #32]
 8004120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	69f9      	ldr	r1, [r7, #28]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	61bb      	str	r3, [r7, #24]
   return(result);
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e5      	bne.n	80040fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d10a      	bne.n	8004156 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fe0b 	bl	8003d78 <HAL_UARTEx_RxEventCallback>
 8004162:	e002      	b.n	800416a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fdf3 	bl	8003d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e002      	b.n	8004174 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	4618      	mov	r0, r3
 8004176:	3730      	adds	r7, #48	@ 0x30
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800417c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004180:	b0c0      	sub	sp, #256	@ 0x100
 8004182:	af00      	add	r7, sp, #0
 8004184:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	68d9      	ldr	r1, [r3, #12]
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	ea40 0301 	orr.w	r3, r0, r1
 80041a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041d4:	f021 010c 	bic.w	r1, r1, #12
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041e2:	430b      	orrs	r3, r1
 80041e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f6:	6999      	ldr	r1, [r3, #24]
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	ea40 0301 	orr.w	r3, r0, r1
 8004202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b8f      	ldr	r3, [pc, #572]	@ (8004448 <UART_SetConfig+0x2cc>)
 800420c:	429a      	cmp	r2, r3
 800420e:	d005      	beq.n	800421c <UART_SetConfig+0xa0>
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b8d      	ldr	r3, [pc, #564]	@ (800444c <UART_SetConfig+0x2d0>)
 8004218:	429a      	cmp	r2, r3
 800421a:	d104      	bne.n	8004226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800421c:	f7fd ffbe 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8004220:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004224:	e003      	b.n	800422e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004226:	f7fd ffa5 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 800422a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004238:	f040 810c 	bne.w	8004454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800423c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004240:	2200      	movs	r2, #0
 8004242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004246:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800424a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	1891      	adds	r1, r2, r2
 8004254:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004256:	415b      	adcs	r3, r3
 8004258:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800425a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800425e:	4621      	mov	r1, r4
 8004260:	eb12 0801 	adds.w	r8, r2, r1
 8004264:	4629      	mov	r1, r5
 8004266:	eb43 0901 	adc.w	r9, r3, r1
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427e:	4690      	mov	r8, r2
 8004280:	4699      	mov	r9, r3
 8004282:	4623      	mov	r3, r4
 8004284:	eb18 0303 	adds.w	r3, r8, r3
 8004288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800428c:	462b      	mov	r3, r5
 800428e:	eb49 0303 	adc.w	r3, r9, r3
 8004292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042aa:	460b      	mov	r3, r1
 80042ac:	18db      	adds	r3, r3, r3
 80042ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80042b0:	4613      	mov	r3, r2
 80042b2:	eb42 0303 	adc.w	r3, r2, r3
 80042b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042c0:	f7fb fffe 	bl	80002c0 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4b61      	ldr	r3, [pc, #388]	@ (8004450 <UART_SetConfig+0x2d4>)
 80042ca:	fba3 2302 	umull	r2, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	011c      	lsls	r4, r3, #4
 80042d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042ec:	415b      	adcs	r3, r3
 80042ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042f4:	4641      	mov	r1, r8
 80042f6:	eb12 0a01 	adds.w	sl, r2, r1
 80042fa:	4649      	mov	r1, r9
 80042fc:	eb43 0b01 	adc.w	fp, r3, r1
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800430c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004314:	4692      	mov	sl, r2
 8004316:	469b      	mov	fp, r3
 8004318:	4643      	mov	r3, r8
 800431a:	eb1a 0303 	adds.w	r3, sl, r3
 800431e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004322:	464b      	mov	r3, r9
 8004324:	eb4b 0303 	adc.w	r3, fp, r3
 8004328:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004338:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800433c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004340:	460b      	mov	r3, r1
 8004342:	18db      	adds	r3, r3, r3
 8004344:	643b      	str	r3, [r7, #64]	@ 0x40
 8004346:	4613      	mov	r3, r2
 8004348:	eb42 0303 	adc.w	r3, r2, r3
 800434c:	647b      	str	r3, [r7, #68]	@ 0x44
 800434e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004356:	f7fb ffb3 	bl	80002c0 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4611      	mov	r1, r2
 8004360:	4b3b      	ldr	r3, [pc, #236]	@ (8004450 <UART_SetConfig+0x2d4>)
 8004362:	fba3 2301 	umull	r2, r3, r3, r1
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2264      	movs	r2, #100	@ 0x64
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	1acb      	subs	r3, r1, r3
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004376:	4b36      	ldr	r3, [pc, #216]	@ (8004450 <UART_SetConfig+0x2d4>)
 8004378:	fba3 2302 	umull	r2, r3, r3, r2
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004384:	441c      	add	r4, r3
 8004386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800438a:	2200      	movs	r2, #0
 800438c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004390:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004398:	4642      	mov	r2, r8
 800439a:	464b      	mov	r3, r9
 800439c:	1891      	adds	r1, r2, r2
 800439e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043a0:	415b      	adcs	r3, r3
 80043a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043a8:	4641      	mov	r1, r8
 80043aa:	1851      	adds	r1, r2, r1
 80043ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80043ae:	4649      	mov	r1, r9
 80043b0:	414b      	adcs	r3, r1
 80043b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043c0:	4659      	mov	r1, fp
 80043c2:	00cb      	lsls	r3, r1, #3
 80043c4:	4651      	mov	r1, sl
 80043c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ca:	4651      	mov	r1, sl
 80043cc:	00ca      	lsls	r2, r1, #3
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	4642      	mov	r2, r8
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043dc:	464b      	mov	r3, r9
 80043de:	460a      	mov	r2, r1
 80043e0:	eb42 0303 	adc.w	r3, r2, r3
 80043e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043fc:	460b      	mov	r3, r1
 80043fe:	18db      	adds	r3, r3, r3
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004402:	4613      	mov	r3, r2
 8004404:	eb42 0303 	adc.w	r3, r2, r3
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800440e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004412:	f7fb ff55 	bl	80002c0 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <UART_SetConfig+0x2d4>)
 800441c:	fba3 1302 	umull	r1, r3, r3, r2
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	2164      	movs	r1, #100	@ 0x64
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	3332      	adds	r3, #50	@ 0x32
 800442e:	4a08      	ldr	r2, [pc, #32]	@ (8004450 <UART_SetConfig+0x2d4>)
 8004430:	fba2 2303 	umull	r2, r3, r2, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	f003 0207 	and.w	r2, r3, #7
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4422      	add	r2, r4
 8004442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004444:	e106      	b.n	8004654 <UART_SetConfig+0x4d8>
 8004446:	bf00      	nop
 8004448:	40011000 	.word	0x40011000
 800444c:	40011400 	.word	0x40011400
 8004450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800445e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004466:	4642      	mov	r2, r8
 8004468:	464b      	mov	r3, r9
 800446a:	1891      	adds	r1, r2, r2
 800446c:	6239      	str	r1, [r7, #32]
 800446e:	415b      	adcs	r3, r3
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
 8004472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004476:	4641      	mov	r1, r8
 8004478:	1854      	adds	r4, r2, r1
 800447a:	4649      	mov	r1, r9
 800447c:	eb43 0501 	adc.w	r5, r3, r1
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	00eb      	lsls	r3, r5, #3
 800448a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800448e:	00e2      	lsls	r2, r4, #3
 8004490:	4614      	mov	r4, r2
 8004492:	461d      	mov	r5, r3
 8004494:	4643      	mov	r3, r8
 8004496:	18e3      	adds	r3, r4, r3
 8004498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800449c:	464b      	mov	r3, r9
 800449e:	eb45 0303 	adc.w	r3, r5, r3
 80044a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044c2:	4629      	mov	r1, r5
 80044c4:	008b      	lsls	r3, r1, #2
 80044c6:	4621      	mov	r1, r4
 80044c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044cc:	4621      	mov	r1, r4
 80044ce:	008a      	lsls	r2, r1, #2
 80044d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044d4:	f7fb fef4 	bl	80002c0 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4b60      	ldr	r3, [pc, #384]	@ (8004660 <UART_SetConfig+0x4e4>)
 80044de:	fba3 2302 	umull	r2, r3, r3, r2
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	011c      	lsls	r4, r3, #4
 80044e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	61b9      	str	r1, [r7, #24]
 8004500:	415b      	adcs	r3, r3
 8004502:	61fb      	str	r3, [r7, #28]
 8004504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004508:	4641      	mov	r1, r8
 800450a:	1851      	adds	r1, r2, r1
 800450c:	6139      	str	r1, [r7, #16]
 800450e:	4649      	mov	r1, r9
 8004510:	414b      	adcs	r3, r1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004520:	4659      	mov	r1, fp
 8004522:	00cb      	lsls	r3, r1, #3
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800452a:	4651      	mov	r1, sl
 800452c:	00ca      	lsls	r2, r1, #3
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	4603      	mov	r3, r0
 8004534:	4642      	mov	r2, r8
 8004536:	189b      	adds	r3, r3, r2
 8004538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800453c:	464b      	mov	r3, r9
 800453e:	460a      	mov	r2, r1
 8004540:	eb42 0303 	adc.w	r3, r2, r3
 8004544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004552:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004560:	4649      	mov	r1, r9
 8004562:	008b      	lsls	r3, r1, #2
 8004564:	4641      	mov	r1, r8
 8004566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800456a:	4641      	mov	r1, r8
 800456c:	008a      	lsls	r2, r1, #2
 800456e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004572:	f7fb fea5 	bl	80002c0 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4611      	mov	r1, r2
 800457c:	4b38      	ldr	r3, [pc, #224]	@ (8004660 <UART_SetConfig+0x4e4>)
 800457e:	fba3 2301 	umull	r2, r3, r3, r1
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	2264      	movs	r2, #100	@ 0x64
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	1acb      	subs	r3, r1, r3
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	3332      	adds	r3, #50	@ 0x32
 8004590:	4a33      	ldr	r2, [pc, #204]	@ (8004660 <UART_SetConfig+0x4e4>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800459c:	441c      	add	r4, r3
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80045a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80045a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045ac:	4642      	mov	r2, r8
 80045ae:	464b      	mov	r3, r9
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	415b      	adcs	r3, r3
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045bc:	4641      	mov	r1, r8
 80045be:	1851      	adds	r1, r2, r1
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	4649      	mov	r1, r9
 80045c4:	414b      	adcs	r3, r1
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045d4:	4659      	mov	r1, fp
 80045d6:	00cb      	lsls	r3, r1, #3
 80045d8:	4651      	mov	r1, sl
 80045da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045de:	4651      	mov	r1, sl
 80045e0:	00ca      	lsls	r2, r1, #3
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	4642      	mov	r2, r8
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ee:	464b      	mov	r3, r9
 80045f0:	460a      	mov	r2, r1
 80045f2:	eb42 0303 	adc.w	r3, r2, r3
 80045f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	663b      	str	r3, [r7, #96]	@ 0x60
 8004602:	667a      	str	r2, [r7, #100]	@ 0x64
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004610:	4649      	mov	r1, r9
 8004612:	008b      	lsls	r3, r1, #2
 8004614:	4641      	mov	r1, r8
 8004616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800461a:	4641      	mov	r1, r8
 800461c:	008a      	lsls	r2, r1, #2
 800461e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004622:	f7fb fe4d 	bl	80002c0 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4b0d      	ldr	r3, [pc, #52]	@ (8004660 <UART_SetConfig+0x4e4>)
 800462c:	fba3 1302 	umull	r1, r3, r3, r2
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	2164      	movs	r1, #100	@ 0x64
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	3332      	adds	r3, #50	@ 0x32
 800463e:	4a08      	ldr	r2, [pc, #32]	@ (8004660 <UART_SetConfig+0x4e4>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	f003 020f 	and.w	r2, r3, #15
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4422      	add	r2, r4
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800465a:	46bd      	mov	sp, r7
 800465c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004660:	51eb851f 	.word	0x51eb851f

08004664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004668:	4904      	ldr	r1, [pc, #16]	@ (800467c <MX_FATFS_Init+0x18>)
 800466a:	4805      	ldr	r0, [pc, #20]	@ (8004680 <MX_FATFS_Init+0x1c>)
 800466c:	f003 f9a2 	bl	80079b4 <FATFS_LinkDriver>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <MX_FATFS_Init+0x20>)
 8004676:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20002360 	.word	0x20002360
 8004680:	20000010 	.word	0x20000010
 8004684:	2000235c 	.word	0x2000235c

08004688 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800468c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800468e:	4618      	mov	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//     Stat = STA_NOINIT;
//     return Stat;
SD_disk_initialize(pdrv);
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fc f955 	bl	8000954 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80046aa:	bf00      	nop
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//     Stat = STA_NOINIT;
//     return Stat;
SD_disk_status (pdrv);
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc fa2d 	bl	8000b20 <SD_disk_status>
  /* USER CODE END STATUS */
}
 80046c6:	bf00      	nop
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4603      	mov	r3, r0
 80046de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 80046e0:	7bf8      	ldrb	r0, [r7, #15]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	f7fc fa30 	bl	8000b4c <SD_disk_read>
  /* USER CODE END READ */
}
 80046ec:	bf00      	nop
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4603      	mov	r3, r0
 8004704:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
   SD_disk_write (pdrv, buff, sector, count);
 8004706:	7bf8      	ldrb	r0, [r7, #15]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68b9      	ldr	r1, [r7, #8]
 800470e:	f7fc fa87 	bl	8000c20 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8004712:	bf00      	nop
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	603a      	str	r2, [r7, #0]
 8004726:	71fb      	strb	r3, [r7, #7]
 8004728:	460b      	mov	r3, r1
 800472a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//     DRESULT res = RES_ERROR;
//     return res;
SD_disk_ioctl (pdrv, cmd, buff);
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	79b9      	ldrb	r1, [r7, #6]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc faf8 	bl	8000d28 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8004738:	bf00      	nop
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	4a08      	ldr	r2, [pc, #32]	@ (8004774 <disk_status+0x30>)
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	79fa      	ldrb	r2, [r7, #7]
 800475c:	4905      	ldr	r1, [pc, #20]	@ (8004774 <disk_status+0x30>)
 800475e:	440a      	add	r2, r1
 8004760:	7a12      	ldrb	r2, [r2, #8]
 8004762:	4610      	mov	r0, r2
 8004764:	4798      	blx	r3
 8004766:	4603      	mov	r3, r0
 8004768:	73fb      	strb	r3, [r7, #15]
  return stat;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	2000258c 	.word	0x2000258c

08004778 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	4a0e      	ldr	r2, [pc, #56]	@ (80047c4 <disk_initialize+0x4c>)
 800478a:	5cd3      	ldrb	r3, [r2, r3]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d114      	bne.n	80047ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	4a0c      	ldr	r2, [pc, #48]	@ (80047c4 <disk_initialize+0x4c>)
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	79fa      	ldrb	r2, [r7, #7]
 800479e:	4909      	ldr	r1, [pc, #36]	@ (80047c4 <disk_initialize+0x4c>)
 80047a0:	440a      	add	r2, r1
 80047a2:	7a12      	ldrb	r2, [r2, #8]
 80047a4:	4610      	mov	r0, r2
 80047a6:	4798      	blx	r3
 80047a8:	4603      	mov	r3, r0
 80047aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d103      	bne.n	80047ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	4a03      	ldr	r2, [pc, #12]	@ (80047c4 <disk_initialize+0x4c>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	2000258c 	.word	0x2000258c

080047c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80047c8:	b590      	push	{r4, r7, lr}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	4603      	mov	r3, r0
 80047d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	4a0a      	ldr	r2, [pc, #40]	@ (8004804 <disk_read+0x3c>)
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	689c      	ldr	r4, [r3, #8]
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	4a07      	ldr	r2, [pc, #28]	@ (8004804 <disk_read+0x3c>)
 80047e8:	4413      	add	r3, r2
 80047ea:	7a18      	ldrb	r0, [r3, #8]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68b9      	ldr	r1, [r7, #8]
 80047f2:	47a0      	blx	r4
 80047f4:	4603      	mov	r3, r0
 80047f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	bf00      	nop
 8004804:	2000258c 	.word	0x2000258c

08004808 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <disk_write+0x3c>)
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	68dc      	ldr	r4, [r3, #12]
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	4a07      	ldr	r2, [pc, #28]	@ (8004844 <disk_write+0x3c>)
 8004828:	4413      	add	r3, r2
 800482a:	7a18      	ldrb	r0, [r3, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	47a0      	blx	r4
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]
  return res;
 8004838:	7dfb      	ldrb	r3, [r7, #23]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd90      	pop	{r4, r7, pc}
 8004842:	bf00      	nop
 8004844:	2000258c 	.word	0x2000258c

08004848 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	603a      	str	r2, [r7, #0]
 8004852:	71fb      	strb	r3, [r7, #7]
 8004854:	460b      	mov	r3, r1
 8004856:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	4a09      	ldr	r2, [pc, #36]	@ (8004880 <disk_ioctl+0x38>)
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	79fa      	ldrb	r2, [r7, #7]
 8004866:	4906      	ldr	r1, [pc, #24]	@ (8004880 <disk_ioctl+0x38>)
 8004868:	440a      	add	r2, r1
 800486a:	7a10      	ldrb	r0, [r2, #8]
 800486c:	79b9      	ldrb	r1, [r7, #6]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	4798      	blx	r3
 8004872:	4603      	mov	r3, r0
 8004874:	73fb      	strb	r3, [r7, #15]
  return res;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2000258c 	.word	0x2000258c

08004884 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3301      	adds	r3, #1
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004894:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	b21a      	sxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b21b      	sxth	r3, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b21b      	sxth	r3, r3
 80048a6:	81fb      	strh	r3, [r7, #14]
	return rv;
 80048a8:	89fb      	ldrh	r3, [r7, #14]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3303      	adds	r3, #3
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	3202      	adds	r2, #2
 80048ce:	7812      	ldrb	r2, [r2, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	3201      	adds	r2, #1
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
	return rv;
 80048ee:	68fb      	ldr	r3, [r7, #12]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	887a      	ldrh	r2, [r7, #2]
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	1c53      	adds	r3, r2, #1
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	6179      	str	r1, [r7, #20]
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f1      	bne.n	80049a4 <mem_cpy+0x1a>
	}
}
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	617a      	str	r2, [r7, #20]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f3      	bne.n	80049dc <mem_set+0x10>
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004a02:	b480      	push	{r7}
 8004a04:	b089      	sub	sp, #36	@ 0x24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	61fa      	str	r2, [r7, #28]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	4619      	mov	r1, r3
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	61ba      	str	r2, [r7, #24]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	1acb      	subs	r3, r1, r3
 8004a2e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <mem_cmp+0x40>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0eb      	beq.n	8004a1a <mem_cmp+0x18>

	return r;
 8004a42:	697b      	ldr	r3, [r7, #20]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3724      	adds	r7, #36	@ 0x24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a5a:	e002      	b.n	8004a62 <chk_chr+0x12>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <chk_chr+0x26>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d1f2      	bne.n	8004a5c <chk_chr+0xc>
	return *str;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	781b      	ldrb	r3, [r3, #0]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e029      	b.n	8004af0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a9c:	4a27      	ldr	r2, [pc, #156]	@ (8004b3c <chk_lock+0xb4>)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	4413      	add	r3, r2
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01d      	beq.n	8004ae6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004aaa:	4a24      	ldr	r2, [pc, #144]	@ (8004b3c <chk_lock+0xb4>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	4413      	add	r3, r2
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d116      	bne.n	8004aea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004abc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b3c <chk_lock+0xb4>)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d10c      	bne.n	8004aea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b3c <chk_lock+0xb4>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3308      	adds	r3, #8
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d102      	bne.n	8004aea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ae4:	e007      	b.n	8004af6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d9d2      	bls.n	8004a9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d109      	bne.n	8004b10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <chk_lock+0x80>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d101      	bne.n	8004b0c <chk_lock+0x84>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e010      	b.n	8004b2e <chk_lock+0xa6>
 8004b0c:	2312      	movs	r3, #18
 8004b0e:	e00e      	b.n	8004b2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d108      	bne.n	8004b28 <chk_lock+0xa0>
 8004b16:	4a09      	ldr	r2, [pc, #36]	@ (8004b3c <chk_lock+0xb4>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	4413      	add	r3, r2
 8004b1e:	330c      	adds	r3, #12
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b26:	d101      	bne.n	8004b2c <chk_lock+0xa4>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	e000      	b.n	8004b2e <chk_lock+0xa6>
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	2000236c 	.word	0x2000236c

08004b40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e002      	b.n	8004b52 <enq_lock+0x12>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d806      	bhi.n	8004b66 <enq_lock+0x26>
 8004b58:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <enq_lock+0x40>)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	4413      	add	r3, r2
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f2      	bne.n	8004b4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	2000236c 	.word	0x2000236c

08004b84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	e01f      	b.n	8004bd4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b94:	4a41      	ldr	r2, [pc, #260]	@ (8004c9c <inc_lock+0x118>)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	4413      	add	r3, r2
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d113      	bne.n	8004bce <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8004c9c <inc_lock+0x118>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	4413      	add	r3, r2
 8004bae:	3304      	adds	r3, #4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d109      	bne.n	8004bce <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004bba:	4a38      	ldr	r2, [pc, #224]	@ (8004c9c <inc_lock+0x118>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d006      	beq.n	8004bdc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d9dc      	bls.n	8004b94 <inc_lock+0x10>
 8004bda:	e000      	b.n	8004bde <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004bdc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d132      	bne.n	8004c4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e002      	b.n	8004bf0 <inc_lock+0x6c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d806      	bhi.n	8004c04 <inc_lock+0x80>
 8004bf6:	4a29      	ldr	r2, [pc, #164]	@ (8004c9c <inc_lock+0x118>)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	4413      	add	r3, r2
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f2      	bne.n	8004bea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d101      	bne.n	8004c0e <inc_lock+0x8a>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e040      	b.n	8004c90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4922      	ldr	r1, [pc, #136]	@ (8004c9c <inc_lock+0x118>)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	440b      	add	r3, r1
 8004c1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	491e      	ldr	r1, [pc, #120]	@ (8004c9c <inc_lock+0x118>)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	440b      	add	r3, r1
 8004c28:	3304      	adds	r3, #4
 8004c2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	491a      	ldr	r1, [pc, #104]	@ (8004c9c <inc_lock+0x118>)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	440b      	add	r3, r1
 8004c38:	3308      	adds	r3, #8
 8004c3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c3c:	4a17      	ldr	r2, [pc, #92]	@ (8004c9c <inc_lock+0x118>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	4413      	add	r3, r2
 8004c44:	330c      	adds	r3, #12
 8004c46:	2200      	movs	r2, #0
 8004c48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d009      	beq.n	8004c64 <inc_lock+0xe0>
 8004c50:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <inc_lock+0x118>)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	4413      	add	r3, r2
 8004c58:	330c      	adds	r3, #12
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <inc_lock+0xe0>
 8004c60:	2300      	movs	r3, #0
 8004c62:	e015      	b.n	8004c90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <inc_lock+0xf8>
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c9c <inc_lock+0x118>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	4413      	add	r3, r2
 8004c72:	330c      	adds	r3, #12
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	e001      	b.n	8004c80 <inc_lock+0xfc>
 8004c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c80:	4906      	ldr	r1, [pc, #24]	@ (8004c9c <inc_lock+0x118>)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	440b      	add	r3, r1
 8004c88:	330c      	adds	r3, #12
 8004c8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	2000236c 	.word	0x2000236c

08004ca0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d825      	bhi.n	8004d00 <dec_lock+0x60>
		n = Files[i].ctr;
 8004cb4:	4a17      	ldr	r2, [pc, #92]	@ (8004d14 <dec_lock+0x74>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	4413      	add	r3, r2
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004cc2:	89fb      	ldrh	r3, [r7, #14]
 8004cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cc8:	d101      	bne.n	8004cce <dec_lock+0x2e>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004cce:	89fb      	ldrh	r3, [r7, #14]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <dec_lock+0x3a>
 8004cd4:	89fb      	ldrh	r3, [r7, #14]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cda:	4a0e      	ldr	r2, [pc, #56]	@ (8004d14 <dec_lock+0x74>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	4413      	add	r3, r2
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	89fa      	ldrh	r2, [r7, #14]
 8004ce6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <dec_lock+0x5a>
 8004cee:	4a09      	ldr	r2, [pc, #36]	@ (8004d14 <dec_lock+0x74>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	737b      	strb	r3, [r7, #13]
 8004cfe:	e001      	b.n	8004d04 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d00:	2302      	movs	r3, #2
 8004d02:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004d04:	7b7b      	ldrb	r3, [r7, #13]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000236c 	.word	0x2000236c

08004d18 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e010      	b.n	8004d48 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d26:	4a0d      	ldr	r2, [pc, #52]	@ (8004d5c <clear_lock+0x44>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	4413      	add	r3, r2
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d105      	bne.n	8004d42 <clear_lock+0x2a>
 8004d36:	4a09      	ldr	r2, [pc, #36]	@ (8004d5c <clear_lock+0x44>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d9eb      	bls.n	8004d26 <clear_lock+0xe>
	}
}
 8004d4e:	bf00      	nop
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	2000236c 	.word	0x2000236c

08004d60 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	78db      	ldrb	r3, [r3, #3]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d034      	beq.n	8004dde <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d78:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7858      	ldrb	r0, [r3, #1]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d84:	2301      	movs	r3, #1
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	f7ff fd3e 	bl	8004808 <disk_write>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
 8004d96:	e022      	b.n	8004dde <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	1ad2      	subs	r2, r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d217      	bcs.n	8004dde <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	789b      	ldrb	r3, [r3, #2]
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	e010      	b.n	8004dd8 <sync_window+0x78>
					wsect += fs->fsize;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	7858      	ldrb	r0, [r3, #1]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004dca:	2301      	movs	r3, #1
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	f7ff fd1b 	bl	8004808 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d8eb      	bhi.n	8004db6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d01b      	beq.n	8004e38 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ffad 	bl	8004d60 <sync_window>
 8004e06:	4603      	mov	r3, r0
 8004e08:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d113      	bne.n	8004e38 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	7858      	ldrb	r0, [r3, #1]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	f7ff fcd3 	bl	80047c8 <disk_read>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff87 	bl	8004d60 <sync_window>
 8004e52:	4603      	mov	r3, r0
 8004e54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d159      	bne.n	8004f10 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d149      	bne.n	8004ef8 <sync_fs+0xb4>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	791b      	ldrb	r3, [r3, #4]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d145      	bne.n	8004ef8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	899b      	ldrh	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	2100      	movs	r1, #0
 8004e7a:	f7ff fda7 	bl	80049cc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3338      	adds	r3, #56	@ 0x38
 8004e82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004e86:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7ff fd36 	bl	80048fc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3338      	adds	r3, #56	@ 0x38
 8004e94:	4921      	ldr	r1, [pc, #132]	@ (8004f1c <sync_fs+0xd8>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fd4b 	bl	8004932 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3338      	adds	r3, #56	@ 0x38
 8004ea0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004ea4:	491e      	ldr	r1, [pc, #120]	@ (8004f20 <sync_fs+0xdc>)
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fd43 	bl	8004932 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3338      	adds	r3, #56	@ 0x38
 8004eb0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7ff fd39 	bl	8004932 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3338      	adds	r3, #56	@ 0x38
 8004ec4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7ff fd2f 	bl	8004932 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7858      	ldrb	r0, [r3, #1]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eec:	2301      	movs	r3, #1
 8004eee:	f7ff fc8b 	bl	8004808 <disk_write>
			fs->fsi_flag = 0;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fca1 	bl	8004848 <disk_ioctl>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <sync_fs+0xcc>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	41615252 	.word	0x41615252
 8004f20:	61417272 	.word	0x61417272

08004f24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	3b02      	subs	r3, #2
 8004f32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	3b02      	subs	r3, #2
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d301      	bcc.n	8004f44 <clust2sect+0x20>
 8004f40:	2300      	movs	r3, #0
 8004f42:	e008      	b.n	8004f56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	895b      	ldrh	r3, [r3, #10]
 8004f48:	461a      	mov	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	fb03 f202 	mul.w	r2, r3, r2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f54:	4413      	add	r3, r2
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b086      	sub	sp, #24
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d904      	bls.n	8004f82 <get_fat+0x20>
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d302      	bcc.n	8004f88 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f82:	2301      	movs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	e0ba      	b.n	80050fe <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f88:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	f000 8082 	beq.w	800509c <get_fat+0x13a>
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	f300 80a6 	bgt.w	80050ea <get_fat+0x188>
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d002      	beq.n	8004fa8 <get_fat+0x46>
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d055      	beq.n	8005052 <get_fat+0xf0>
 8004fa6:	e0a0      	b.n	80050ea <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	899b      	ldrh	r3, [r3, #12]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6938      	ldr	r0, [r7, #16]
 8004fcc:	f7ff ff0c 	bl	8004de8 <move_window>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 808c 	bne.w	80050f0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	60fa      	str	r2, [r7, #12]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	8992      	ldrh	r2, [r2, #12]
 8004fe2:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fe6:	fb01 f202 	mul.w	r2, r1, r2
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ff4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	899b      	ldrh	r3, [r3, #12]
 8004ffe:	4619      	mov	r1, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	fbb3 f3f1 	udiv	r3, r3, r1
 8005006:	4413      	add	r3, r2
 8005008:	4619      	mov	r1, r3
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f7ff feec 	bl	8004de8 <move_window>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d16e      	bne.n	80050f4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	899b      	ldrh	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005022:	fb01 f202 	mul.w	r2, r1, r2
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	4313      	orrs	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <get_fat+0xe6>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	e002      	b.n	800504e <get_fat+0xec>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800504e:	617b      	str	r3, [r7, #20]
			break;
 8005050:	e055      	b.n	80050fe <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	899b      	ldrh	r3, [r3, #12]
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	b29b      	uxth	r3, r3
 800505e:	4619      	mov	r1, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	fbb3 f3f1 	udiv	r3, r3, r1
 8005066:	4413      	add	r3, r2
 8005068:	4619      	mov	r1, r3
 800506a:	6938      	ldr	r0, [r7, #16]
 800506c:	f7ff febc 	bl	8004de8 <move_window>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d140      	bne.n	80050f8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	8992      	ldrh	r2, [r2, #12]
 8005084:	fbb3 f0f2 	udiv	r0, r3, r2
 8005088:	fb00 f202 	mul.w	r2, r0, r2
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	440b      	add	r3, r1
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fbf7 	bl	8004884 <ld_word>
 8005096:	4603      	mov	r3, r0
 8005098:	617b      	str	r3, [r7, #20]
			break;
 800509a:	e030      	b.n	80050fe <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	899b      	ldrh	r3, [r3, #12]
 80050a4:	089b      	lsrs	r3, r3, #2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	4619      	mov	r1, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b0:	4413      	add	r3, r2
 80050b2:	4619      	mov	r1, r3
 80050b4:	6938      	ldr	r0, [r7, #16]
 80050b6:	f7ff fe97 	bl	8004de8 <move_window>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11d      	bne.n	80050fc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	8992      	ldrh	r2, [r2, #12]
 80050ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80050d2:	fb00 f202 	mul.w	r2, r0, r2
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	440b      	add	r3, r1
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fbeb 	bl	80048b6 <ld_dword>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80050e6:	617b      	str	r3, [r7, #20]
			break;
 80050e8:	e009      	b.n	80050fe <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80050ea:	2301      	movs	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e006      	b.n	80050fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050f0:	bf00      	nop
 80050f2:	e004      	b.n	80050fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050f4:	bf00      	nop
 80050f6:	e002      	b.n	80050fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050f8:	bf00      	nop
 80050fa:	e000      	b.n	80050fe <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050fc:	bf00      	nop
		}
	}

	return val;
 80050fe:	697b      	ldr	r3, [r7, #20]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b089      	sub	sp, #36	@ 0x24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005114:	2302      	movs	r3, #2
 8005116:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b01      	cmp	r3, #1
 800511c:	f240 8109 	bls.w	8005332 <put_fat+0x22a>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	f080 8103 	bcs.w	8005332 <put_fat+0x22a>
		switch (fs->fs_type) {
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b03      	cmp	r3, #3
 8005132:	f000 80b6 	beq.w	80052a2 <put_fat+0x19a>
 8005136:	2b03      	cmp	r3, #3
 8005138:	f300 80fb 	bgt.w	8005332 <put_fat+0x22a>
 800513c:	2b01      	cmp	r3, #1
 800513e:	d003      	beq.n	8005148 <put_fat+0x40>
 8005140:	2b02      	cmp	r3, #2
 8005142:	f000 8083 	beq.w	800524c <put_fat+0x144>
 8005146:	e0f4      	b.n	8005332 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4413      	add	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	899b      	ldrh	r3, [r3, #12]
 800515e:	4619      	mov	r1, r3
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	fbb3 f3f1 	udiv	r3, r3, r1
 8005166:	4413      	add	r3, r2
 8005168:	4619      	mov	r1, r3
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fe3c 	bl	8004de8 <move_window>
 8005170:	4603      	mov	r3, r0
 8005172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 80d4 	bne.w	8005324 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	61ba      	str	r2, [r7, #24]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	8992      	ldrh	r2, [r2, #12]
 800518c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005190:	fb00 f202 	mul.w	r2, r0, r2
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	440b      	add	r3, r1
 8005198:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00d      	beq.n	80051c0 <put_fat+0xb8>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	b25b      	sxtb	r3, r3
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	b25a      	sxtb	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	b25b      	sxtb	r3, r3
 80051b8:	4313      	orrs	r3, r2
 80051ba:	b25b      	sxtb	r3, r3
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e001      	b.n	80051c4 <put_fat+0xbc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	899b      	ldrh	r3, [r3, #12]
 80051d6:	4619      	mov	r1, r3
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	fbb3 f3f1 	udiv	r3, r3, r1
 80051de:	4413      	add	r3, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff fe00 	bl	8004de8 <move_window>
 80051e8:	4603      	mov	r3, r0
 80051ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051ec:	7ffb      	ldrb	r3, [r7, #31]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f040 809a 	bne.w	8005328 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	899b      	ldrh	r3, [r3, #12]
 80051fe:	461a      	mov	r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	fbb3 f0f2 	udiv	r0, r3, r2
 8005206:	fb00 f202 	mul.w	r2, r0, r2
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	440b      	add	r3, r1
 800520e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <put_fat+0x11a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e00e      	b.n	8005240 <put_fat+0x138>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b25b      	sxtb	r3, r3
 8005228:	f023 030f 	bic.w	r3, r3, #15
 800522c:	b25a      	sxtb	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	0a1b      	lsrs	r3, r3, #8
 8005232:	b25b      	sxtb	r3, r3
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	b25b      	sxtb	r3, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	b25b      	sxtb	r3, r3
 800523e:	b2db      	uxtb	r3, r3
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	70da      	strb	r2, [r3, #3]
			break;
 800524a:	e072      	b.n	8005332 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	899b      	ldrh	r3, [r3, #12]
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	b29b      	uxth	r3, r3
 8005258:	4619      	mov	r1, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005260:	4413      	add	r3, r2
 8005262:	4619      	mov	r1, r3
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fdbf 	bl	8004de8 <move_window>
 800526a:	4603      	mov	r3, r0
 800526c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d15b      	bne.n	800532c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	8992      	ldrh	r2, [r2, #12]
 8005282:	fbb3 f0f2 	udiv	r0, r3, r2
 8005286:	fb00 f202 	mul.w	r2, r0, r2
 800528a:	1a9b      	subs	r3, r3, r2
 800528c:	440b      	add	r3, r1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	b292      	uxth	r2, r2
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fb31 	bl	80048fc <st_word>
			fs->wflag = 1;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	70da      	strb	r2, [r3, #3]
			break;
 80052a0:	e047      	b.n	8005332 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	899b      	ldrh	r3, [r3, #12]
 80052aa:	089b      	lsrs	r3, r3, #2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4619      	mov	r1, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052b6:	4413      	add	r3, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff fd94 	bl	8004de8 <move_window>
 80052c0:	4603      	mov	r3, r0
 80052c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052c4:	7ffb      	ldrb	r3, [r7, #31]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d132      	bne.n	8005330 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	8992      	ldrh	r2, [r2, #12]
 80052de:	fbb3 f0f2 	udiv	r0, r3, r2
 80052e2:	fb00 f202 	mul.w	r2, r0, r2
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	440b      	add	r3, r1
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fae3 	bl	80048b6 <ld_dword>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80052f6:	4323      	orrs	r3, r4
 80052f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	8992      	ldrh	r2, [r2, #12]
 8005308:	fbb3 f0f2 	udiv	r0, r3, r2
 800530c:	fb00 f202 	mul.w	r2, r0, r2
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	440b      	add	r3, r1
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fb0b 	bl	8004932 <st_dword>
			fs->wflag = 1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	70da      	strb	r2, [r3, #3]
			break;
 8005322:	e006      	b.n	8005332 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005324:	bf00      	nop
 8005326:	e004      	b.n	8005332 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005328:	bf00      	nop
 800532a:	e002      	b.n	8005332 <put_fat+0x22a>
			if (res != FR_OK) break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <put_fat+0x22a>
			if (res != FR_OK) break;
 8005330:	bf00      	nop
		}
	}
	return res;
 8005332:	7ffb      	ldrb	r3, [r7, #31]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3724      	adds	r7, #36	@ 0x24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd90      	pop	{r4, r7, pc}

0800533c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d904      	bls.n	8005362 <remove_chain+0x26>
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d301      	bcc.n	8005366 <remove_chain+0x2a>
 8005362:	2302      	movs	r3, #2
 8005364:	e04b      	b.n	80053fe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00c      	beq.n	8005386 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	69b8      	ldr	r0, [r7, #24]
 8005374:	f7ff fec8 	bl	8005108 <put_fat>
 8005378:	4603      	mov	r3, r0
 800537a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800537c:	7ffb      	ldrb	r3, [r7, #31]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <remove_chain+0x4a>
 8005382:	7ffb      	ldrb	r3, [r7, #31]
 8005384:	e03b      	b.n	80053fe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fdea 	bl	8004f62 <get_fat>
 800538e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d031      	beq.n	80053fa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <remove_chain+0x64>
 800539c:	2302      	movs	r3, #2
 800539e:	e02e      	b.n	80053fe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d101      	bne.n	80053ac <remove_chain+0x70>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e028      	b.n	80053fe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80053ac:	2200      	movs	r2, #0
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	69b8      	ldr	r0, [r7, #24]
 80053b2:	f7ff fea9 	bl	8005108 <put_fat>
 80053b6:	4603      	mov	r3, r0
 80053b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80053ba:	7ffb      	ldrb	r3, [r7, #31]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <remove_chain+0x88>
 80053c0:	7ffb      	ldrb	r3, [r7, #31]
 80053c2:	e01c      	b.n	80053fe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	3b02      	subs	r3, #2
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d20b      	bcs.n	80053ea <remove_chain+0xae>
			fs->free_clst++;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	791b      	ldrb	r3, [r3, #4]
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d3c6      	bcc.n	8005386 <remove_chain+0x4a>
 80053f8:	e000      	b.n	80053fc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80053fa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b088      	sub	sp, #32
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10d      	bne.n	8005438 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <create_chain+0x2c>
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	429a      	cmp	r2, r3
 8005430:	d31b      	bcc.n	800546a <create_chain+0x64>
 8005432:	2301      	movs	r3, #1
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	e018      	b.n	800546a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fd91 	bl	8004f62 <get_fat>
 8005440:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d801      	bhi.n	800544c <create_chain+0x46>
 8005448:	2301      	movs	r3, #1
 800544a:	e070      	b.n	800552e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d101      	bne.n	8005458 <create_chain+0x52>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	e06a      	b.n	800552e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	429a      	cmp	r2, r3
 8005460:	d201      	bcs.n	8005466 <create_chain+0x60>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	e063      	b.n	800552e <create_chain+0x128>
		scl = clst;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	429a      	cmp	r2, r3
 800547c:	d307      	bcc.n	800548e <create_chain+0x88>
				ncl = 2;
 800547e:	2302      	movs	r3, #2
 8005480:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	429a      	cmp	r2, r3
 8005488:	d901      	bls.n	800548e <create_chain+0x88>
 800548a:	2300      	movs	r3, #0
 800548c:	e04f      	b.n	800552e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800548e:	69f9      	ldr	r1, [r7, #28]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fd66 	bl	8004f62 <get_fat>
 8005496:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d003      	beq.n	80054ac <create_chain+0xa6>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d101      	bne.n	80054b0 <create_chain+0xaa>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	e03e      	b.n	800552e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1da      	bne.n	800546e <create_chain+0x68>
 80054b8:	2300      	movs	r3, #0
 80054ba:	e038      	b.n	800552e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80054bc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80054be:	f04f 32ff 	mov.w	r2, #4294967295
 80054c2:	69f9      	ldr	r1, [r7, #28]
 80054c4:	6938      	ldr	r0, [r7, #16]
 80054c6:	f7ff fe1f 	bl	8005108 <put_fat>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <create_chain+0xe2>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80054da:	69fa      	ldr	r2, [r7, #28]
 80054dc:	6839      	ldr	r1, [r7, #0]
 80054de:	6938      	ldr	r0, [r7, #16]
 80054e0:	f7ff fe12 	bl	8005108 <put_fat>
 80054e4:	4603      	mov	r3, r0
 80054e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d116      	bne.n	800551c <create_chain+0x116>
		fs->last_clst = ncl;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	3b02      	subs	r3, #2
 80054fe:	429a      	cmp	r2, r3
 8005500:	d804      	bhi.n	800550c <create_chain+0x106>
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	791b      	ldrb	r3, [r3, #4]
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	b2da      	uxtb	r2, r3
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	711a      	strb	r2, [r3, #4]
 800551a:	e007      	b.n	800552c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d102      	bne.n	8005528 <create_chain+0x122>
 8005522:	f04f 33ff 	mov.w	r3, #4294967295
 8005526:	e000      	b.n	800552a <create_chain+0x124>
 8005528:	2301      	movs	r3, #1
 800552a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800552c:	69fb      	ldr	r3, [r7, #28]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005536:	b480      	push	{r7}
 8005538:	b087      	sub	sp, #28
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	3304      	adds	r3, #4
 800554c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	899b      	ldrh	r3, [r3, #12]
 8005552:	461a      	mov	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	fbb3 f3f2 	udiv	r3, r3, r2
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	8952      	ldrh	r2, [r2, #10]
 800555e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005562:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	613a      	str	r2, [r7, #16]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <clmt_clust+0x42>
 8005574:	2300      	movs	r3, #0
 8005576:	e010      	b.n	800559a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	429a      	cmp	r2, r3
 800557e:	d307      	bcc.n	8005590 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	3304      	adds	r3, #4
 800558c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800558e:	e7e9      	b.n	8005564 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005590:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
}
 800559a:	4618      	mov	r0, r3
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b086      	sub	sp, #24
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055bc:	d204      	bcs.n	80055c8 <dir_sdi+0x22>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <dir_sdi+0x26>
		return FR_INT_ERR;
 80055c8:	2302      	movs	r3, #2
 80055ca:	e071      	b.n	80056b0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	683a      	ldr	r2, [r7, #0]
 80055d0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <dir_sdi+0x46>
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d902      	bls.n	80055ec <dir_sdi+0x46>
		clst = fs->dirbase;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10c      	bne.n	800560c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	8912      	ldrh	r2, [r2, #8]
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d301      	bcc.n	8005602 <dir_sdi+0x5c>
 80055fe:	2302      	movs	r3, #2
 8005600:	e056      	b.n	80056b0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	61da      	str	r2, [r3, #28]
 800560a:	e02d      	b.n	8005668 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	895b      	ldrh	r3, [r3, #10]
 8005610:	461a      	mov	r2, r3
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	899b      	ldrh	r3, [r3, #12]
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800561c:	e019      	b.n	8005652 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff fc9d 	bl	8004f62 <get_fat>
 8005628:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d101      	bne.n	8005636 <dir_sdi+0x90>
 8005632:	2301      	movs	r3, #1
 8005634:	e03c      	b.n	80056b0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d904      	bls.n	8005646 <dir_sdi+0xa0>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	429a      	cmp	r2, r3
 8005644:	d301      	bcc.n	800564a <dir_sdi+0xa4>
 8005646:	2302      	movs	r3, #2
 8005648:	e032      	b.n	80056b0 <dir_sdi+0x10a>
			ofs -= csz;
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	429a      	cmp	r2, r3
 8005658:	d2e1      	bcs.n	800561e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800565a:	6979      	ldr	r1, [r7, #20]
 800565c:	6938      	ldr	r0, [r7, #16]
 800565e:	f7ff fc61 	bl	8004f24 <clust2sect>
 8005662:	4602      	mov	r2, r0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <dir_sdi+0xd4>
 8005676:	2302      	movs	r3, #2
 8005678:	e01a      	b.n	80056b0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	899b      	ldrh	r3, [r3, #12]
 8005682:	4619      	mov	r1, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	fbb3 f3f1 	udiv	r3, r3, r1
 800568a:	441a      	add	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	899b      	ldrh	r3, [r3, #12]
 800569a:	461a      	mov	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	fbb3 f0f2 	udiv	r0, r3, r2
 80056a2:	fb00 f202 	mul.w	r2, r0, r2
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	18ca      	adds	r2, r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	3320      	adds	r3, #32
 80056ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <dir_next+0x28>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056de:	d301      	bcc.n	80056e4 <dir_next+0x2c>
 80056e0:	2304      	movs	r3, #4
 80056e2:	e0bb      	b.n	800585c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	899b      	ldrh	r3, [r3, #12]
 80056e8:	461a      	mov	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80056f0:	fb01 f202 	mul.w	r2, r1, r2
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 809d 	bne.w	8005836 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	8912      	ldrh	r2, [r2, #8]
 8005716:	4293      	cmp	r3, r2
 8005718:	f0c0 808d 	bcc.w	8005836 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	61da      	str	r2, [r3, #28]
 8005722:	2304      	movs	r3, #4
 8005724:	e09a      	b.n	800585c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	899b      	ldrh	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	8952      	ldrh	r2, [r2, #10]
 8005736:	3a01      	subs	r2, #1
 8005738:	4013      	ands	r3, r2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d17b      	bne.n	8005836 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7ff fc0b 	bl	8004f62 <get_fat>
 800574c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d801      	bhi.n	8005758 <dir_next+0xa0>
 8005754:	2302      	movs	r3, #2
 8005756:	e081      	b.n	800585c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d101      	bne.n	8005764 <dir_next+0xac>
 8005760:	2301      	movs	r3, #1
 8005762:	e07b      	b.n	800585c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	429a      	cmp	r2, r3
 800576c:	d359      	bcc.n	8005822 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	61da      	str	r2, [r3, #28]
 800577a:	2304      	movs	r3, #4
 800577c:	e06e      	b.n	800585c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7ff fe3d 	bl	8005406 <create_chain>
 800578c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <dir_next+0xe0>
 8005794:	2307      	movs	r3, #7
 8005796:	e061      	b.n	800585c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <dir_next+0xea>
 800579e:	2302      	movs	r3, #2
 80057a0:	e05c      	b.n	800585c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d101      	bne.n	80057ae <dir_next+0xf6>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e056      	b.n	800585c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff fad6 	bl	8004d60 <sync_window>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <dir_next+0x106>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e04e      	b.n	800585c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	899b      	ldrh	r3, [r3, #12]
 80057c8:	461a      	mov	r2, r3
 80057ca:	2100      	movs	r1, #0
 80057cc:	f7ff f8fe 	bl	80049cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff fba4 	bl	8004f24 <clust2sect>
 80057dc:	4602      	mov	r2, r0
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80057e2:	e012      	b.n	800580a <dir_next+0x152>
						fs->wflag = 1;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fab8 	bl	8004d60 <sync_window>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <dir_next+0x142>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e030      	b.n	800585c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3301      	adds	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	895b      	ldrh	r3, [r3, #10]
 800580e:	461a      	mov	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4293      	cmp	r3, r2
 8005814:	d3e6      	bcc.n	80057e4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad2      	subs	r2, r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005828:	6979      	ldr	r1, [r7, #20]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fb7a 	bl	8004f24 <clust2sect>
 8005830:	4602      	mov	r2, r0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	899b      	ldrh	r3, [r3, #12]
 8005846:	461a      	mov	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	fbb3 f0f2 	udiv	r0, r3, r2
 800584e:	fb00 f202 	mul.w	r2, r0, r2
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	18ca      	adds	r2, r1, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005874:	2100      	movs	r1, #0
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff fe95 	bl	80055a6 <dir_sdi>
 800587c:	4603      	mov	r3, r0
 800587e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d12b      	bne.n	80058de <dir_alloc+0x7a>
		n = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	4619      	mov	r1, r3
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f7ff faa9 	bl	8004de8 <move_window>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11d      	bne.n	80058dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2be5      	cmp	r3, #229	@ 0xe5
 80058a8:	d004      	beq.n	80058b4 <dir_alloc+0x50>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	3301      	adds	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d102      	bne.n	80058c8 <dir_alloc+0x64>
 80058c2:	e00c      	b.n	80058de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80058c8:	2101      	movs	r1, #1
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff fef4 	bl	80056b8 <dir_next>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0d7      	beq.n	800588a <dir_alloc+0x26>
 80058da:	e000      	b.n	80058de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80058dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d101      	bne.n	80058e8 <dir_alloc+0x84>
 80058e4:	2307      	movs	r3, #7
 80058e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	331a      	adds	r3, #26
 8005900:	4618      	mov	r0, r3
 8005902:	f7fe ffbf 	bl	8004884 <ld_word>
 8005906:	4603      	mov	r3, r0
 8005908:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d109      	bne.n	8005926 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3314      	adds	r3, #20
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe ffb4 	bl	8004884 <ld_word>
 800591c:	4603      	mov	r3, r0
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005926:	68fb      	ldr	r3, [r7, #12]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	331a      	adds	r3, #26
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	b292      	uxth	r2, r2
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe ffd8 	bl	80048fc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d109      	bne.n	8005968 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f103 0214 	add.w	r2, r3, #20
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	0c1b      	lsrs	r3, r3, #16
 800595e:	b29b      	uxth	r3, r3
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7fe ffca 	bl	80048fc <st_word>
	}
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	331a      	adds	r3, #26
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe ff80 	bl	8004884 <ld_word>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <cmp_lfn+0x1e>
 800598a:	2300      	movs	r3, #0
 800598c:	e059      	b.n	8005a42 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005996:	1e5a      	subs	r2, r3, #1
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80059a4:	2301      	movs	r3, #1
 80059a6:	81fb      	strh	r3, [r7, #14]
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	e033      	b.n	8005a16 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80059ae:	4a27      	ldr	r2, [pc, #156]	@ (8005a4c <cmp_lfn+0xdc>)
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4413      	add	r3, r2
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe ff61 	bl	8004884 <ld_word>
 80059c2:	4603      	mov	r3, r0
 80059c4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80059c6:	89fb      	ldrh	r3, [r7, #14]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01a      	beq.n	8005a02 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80059d0:	d812      	bhi.n	80059f8 <cmp_lfn+0x88>
 80059d2:	89bb      	ldrh	r3, [r7, #12]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f002 f839 	bl	8007a4c <ff_wtoupper>
 80059da:	4603      	mov	r3, r0
 80059dc:	461c      	mov	r4, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	617a      	str	r2, [r7, #20]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4413      	add	r3, r2
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 f82d 	bl	8007a4c <ff_wtoupper>
 80059f2:	4603      	mov	r3, r0
 80059f4:	429c      	cmp	r4, r3
 80059f6:	d001      	beq.n	80059fc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80059f8:	2300      	movs	r3, #0
 80059fa:	e022      	b.n	8005a42 <cmp_lfn+0xd2>
			}
			wc = uc;
 80059fc:	89bb      	ldrh	r3, [r7, #12]
 80059fe:	81fb      	strh	r3, [r7, #14]
 8005a00:	e006      	b.n	8005a10 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005a02:	89bb      	ldrh	r3, [r7, #12]
 8005a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d001      	beq.n	8005a10 <cmp_lfn+0xa0>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e018      	b.n	8005a42 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	3301      	adds	r3, #1
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b0c      	cmp	r3, #12
 8005a1a:	d9c8      	bls.n	80059ae <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <cmp_lfn+0xd0>
 8005a28:	89fb      	ldrh	r3, [r7, #14]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <cmp_lfn+0xd0>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <cmp_lfn+0xd0>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	e000      	b.n	8005a42 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005a40:	2301      	movs	r3, #1
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd90      	pop	{r4, r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08008830 	.word	0x08008830

08005a50 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	331a      	adds	r3, #26
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe ff10 	bl	8004884 <ld_word>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <pick_lfn+0x1e>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e04d      	b.n	8005b0a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005a84:	2301      	movs	r3, #1
 8005a86:	81fb      	strh	r3, [r7, #14]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	e028      	b.n	8005ae0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005a8e:	4a21      	ldr	r2, [pc, #132]	@ (8005b14 <pick_lfn+0xc4>)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fef1 	bl	8004884 <ld_word>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005aa6:	89fb      	ldrh	r3, [r7, #14]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2bfe      	cmp	r3, #254	@ 0xfe
 8005ab0:	d901      	bls.n	8005ab6 <pick_lfn+0x66>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e029      	b.n	8005b0a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005ab6:	89bb      	ldrh	r3, [r7, #12]
 8005ab8:	81fb      	strh	r3, [r7, #14]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	617a      	str	r2, [r7, #20]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	89fa      	ldrh	r2, [r7, #14]
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	e006      	b.n	8005ada <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005acc:	89bb      	ldrh	r3, [r7, #12]
 8005ace:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d001      	beq.n	8005ada <pick_lfn+0x8a>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e017      	b.n	8005b0a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	d9d3      	bls.n	8005a8e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2bfe      	cmp	r3, #254	@ 0xfe
 8005af6:	d901      	bls.n	8005afc <pick_lfn+0xac>
 8005af8:	2300      	movs	r3, #0
 8005afa:	e006      	b.n	8005b0a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	2200      	movs	r2, #0
 8005b06:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005b08:	2301      	movs	r3, #1
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	08008830 	.word	0x08008830

08005b18 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	460b      	mov	r3, r1
 8005b28:	71fb      	strb	r3, [r7, #7]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	330d      	adds	r3, #13
 8005b32:	79ba      	ldrb	r2, [r7, #6]
 8005b34:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	330b      	adds	r3, #11
 8005b3a:	220f      	movs	r2, #15
 8005b3c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	330c      	adds	r3, #12
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	331a      	adds	r3, #26
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe fed5 	bl	80048fc <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	4613      	mov	r3, r2
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	82fb      	strh	r3, [r7, #22]
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005b6a:	8afb      	ldrh	r3, [r7, #22]
 8005b6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <put_lfn+0x6c>
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	61fa      	str	r2, [r7, #28]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005b84:	4a17      	ldr	r2, [pc, #92]	@ (8005be4 <put_lfn+0xcc>)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4413      	add	r3, r2
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4413      	add	r3, r2
 8005b92:	8afa      	ldrh	r2, [r7, #22]
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe feb0 	bl	80048fc <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005b9c:	8afb      	ldrh	r3, [r7, #22]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <put_lfn+0x90>
 8005ba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ba6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b0c      	cmp	r3, #12
 8005bb2:	d9da      	bls.n	8005b6a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005bb4:	8afb      	ldrh	r3, [r7, #22]
 8005bb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d006      	beq.n	8005bcc <put_lfn+0xb4>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <put_lfn+0xbc>
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bd2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	79fa      	ldrb	r2, [r7, #7]
 8005bd8:	701a      	strb	r2, [r3, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	08008830 	.word	0x08008830

08005be8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08c      	sub	sp, #48	@ 0x30
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005bf6:	220b      	movs	r2, #11
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7fe fec5 	bl	800498a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d92b      	bls.n	8005c5e <gen_numname+0x76>
		sr = seq;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005c0a:	e022      	b.n	8005c52 <gen_numname+0x6a>
			wc = *lfn++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005c16:	2300      	movs	r3, #0
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c1a:	e017      	b.n	8005c4c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	005a      	lsls	r2, r3, #1
 8005c20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	4413      	add	r3, r2
 8005c28:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005c2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d005      	beq.n	8005c46 <gen_numname+0x5e>
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005c40:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005c44:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c48:	3301      	adds	r3, #1
 8005c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d9e4      	bls.n	8005c1c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1d8      	bne.n	8005c0c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005c5e:	2307      	movs	r3, #7
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	f003 030f 	and.w	r3, r3, #15
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	3330      	adds	r3, #48	@ 0x30
 8005c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c76:	2b39      	cmp	r3, #57	@ 0x39
 8005c78:	d904      	bls.n	8005c84 <gen_numname+0x9c>
 8005c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c7e:	3307      	adds	r3, #7
 8005c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c86:	1e5a      	subs	r2, r3, #1
 8005c88:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c8a:	3330      	adds	r3, #48	@ 0x30
 8005c8c:	443b      	add	r3, r7
 8005c8e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005c92:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	091b      	lsrs	r3, r3, #4
 8005c9a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1df      	bne.n	8005c62 <gen_numname+0x7a>
	ns[i] = '~';
 8005ca2:	f107 0214 	add.w	r2, r7, #20
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	4413      	add	r3, r2
 8005caa:	227e      	movs	r2, #126	@ 0x7e
 8005cac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005cae:	2300      	movs	r3, #0
 8005cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb2:	e002      	b.n	8005cba <gen_numname+0xd2>
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d205      	bcs.n	8005cce <gen_numname+0xe6>
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	4413      	add	r3, r2
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d1f2      	bne.n	8005cb4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd0:	2b07      	cmp	r3, #7
 8005cd2:	d807      	bhi.n	8005ce4 <gen_numname+0xfc>
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005cda:	3330      	adds	r3, #48	@ 0x30
 8005cdc:	443b      	add	r3, r7
 8005cde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005ce2:	e000      	b.n	8005ce6 <gen_numname+0xfe>
 8005ce4:	2120      	movs	r1, #32
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	460a      	mov	r2, r1
 8005cf2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	2b07      	cmp	r3, #7
 8005cf8:	d9e9      	bls.n	8005cce <gen_numname+0xe6>
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	3730      	adds	r7, #48	@ 0x30
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005d10:	230b      	movs	r3, #11
 8005d12:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	0852      	lsrs	r2, r2, #1
 8005d1a:	01db      	lsls	r3, r3, #7
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1c59      	adds	r1, r3, #1
 8005d24:	6079      	str	r1, [r7, #4]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	4413      	add	r3, r2
 8005d2a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1ed      	bne.n	8005d14 <sum_sfn+0x10>
	return sum;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005d50:	2304      	movs	r3, #4
 8005d52:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8005d5a:	23ff      	movs	r3, #255	@ 0xff
 8005d5c:	757b      	strb	r3, [r7, #21]
 8005d5e:	23ff      	movs	r3, #255	@ 0xff
 8005d60:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005d62:	e081      	b.n	8005e68 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6938      	ldr	r0, [r7, #16]
 8005d6c:	f7ff f83c 	bl	8004de8 <move_window>
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d17c      	bne.n	8005e74 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005d82:	7dbb      	ldrb	r3, [r7, #22]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005d88:	2304      	movs	r3, #4
 8005d8a:	75fb      	strb	r3, [r7, #23]
 8005d8c:	e077      	b.n	8005e7e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	330b      	adds	r3, #11
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	7bfa      	ldrb	r2, [r7, #15]
 8005da0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005da2:	7dbb      	ldrb	r3, [r7, #22]
 8005da4:	2be5      	cmp	r3, #229	@ 0xe5
 8005da6:	d00e      	beq.n	8005dc6 <dir_read+0x80>
 8005da8:	7dbb      	ldrb	r3, [r7, #22]
 8005daa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dac:	d00b      	beq.n	8005dc6 <dir_read+0x80>
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	f023 0320 	bic.w	r3, r3, #32
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	bf0c      	ite	eq
 8005db8:	2301      	moveq	r3, #1
 8005dba:	2300      	movne	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d002      	beq.n	8005dcc <dir_read+0x86>
				ord = 0xFF;
 8005dc6:	23ff      	movs	r3, #255	@ 0xff
 8005dc8:	757b      	strb	r3, [r7, #21]
 8005dca:	e044      	b.n	8005e56 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b0f      	cmp	r3, #15
 8005dd0:	d12f      	bne.n	8005e32 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005dd2:	7dbb      	ldrb	r3, [r7, #22]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00d      	beq.n	8005df8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	7b5b      	ldrb	r3, [r3, #13]
 8005de2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8005de4:	7dbb      	ldrb	r3, [r7, #22]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	75bb      	strb	r3, [r7, #22]
 8005dec:	7dbb      	ldrb	r3, [r7, #22]
 8005dee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695a      	ldr	r2, [r3, #20]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005df8:	7dba      	ldrb	r2, [r7, #22]
 8005dfa:	7d7b      	ldrb	r3, [r7, #21]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d115      	bne.n	8005e2c <dir_read+0xe6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	330d      	adds	r3, #13
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	7d3a      	ldrb	r2, [r7, #20]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d10e      	bne.n	8005e2c <dir_read+0xe6>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f7ff fe19 	bl	8005a50 <pick_lfn>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <dir_read+0xe6>
 8005e24:	7d7b      	ldrb	r3, [r7, #21]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e000      	b.n	8005e2e <dir_read+0xe8>
 8005e2c:	23ff      	movs	r3, #255	@ 0xff
 8005e2e:	757b      	strb	r3, [r7, #21]
 8005e30:	e011      	b.n	8005e56 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005e32:	7d7b      	ldrb	r3, [r7, #21]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <dir_read+0x106>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff ff61 	bl	8005d04 <sum_sfn>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	7d3b      	ldrb	r3, [r7, #20]
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d015      	beq.n	8005e78 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e52:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8005e54:	e010      	b.n	8005e78 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8005e56:	2100      	movs	r1, #0
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fc2d 	bl	80056b8 <dir_next>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d109      	bne.n	8005e7c <dir_read+0x136>
	while (dp->sect) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f47f af79 	bne.w	8005d64 <dir_read+0x1e>
 8005e72:	e004      	b.n	8005e7e <dir_read+0x138>
		if (res != FR_OK) break;
 8005e74:	bf00      	nop
 8005e76:	e002      	b.n	8005e7e <dir_read+0x138>
					break;
 8005e78:	bf00      	nop
 8005e7a:	e000      	b.n	8005e7e <dir_read+0x138>
		if (res != FR_OK) break;
 8005e7c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <dir_read+0x144>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	61da      	str	r2, [r3, #28]
	return res;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff fb7e 	bl	80055a6 <dir_sdi>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <dir_find+0x24>
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	e0a9      	b.n	800600c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005eb8:	23ff      	movs	r3, #255	@ 0xff
 8005eba:	753b      	strb	r3, [r7, #20]
 8005ebc:	7d3b      	ldrb	r3, [r7, #20]
 8005ebe:	757b      	strb	r3, [r7, #21]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6938      	ldr	r0, [r7, #16]
 8005ed0:	f7fe ff8a 	bl	8004de8 <move_window>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 8090 	bne.w	8006000 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005ee8:	7dbb      	ldrb	r3, [r7, #22]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <dir_find+0x60>
 8005eee:	2304      	movs	r3, #4
 8005ef0:	75fb      	strb	r3, [r7, #23]
 8005ef2:	e08a      	b.n	800600a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	330b      	adds	r3, #11
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	7bfa      	ldrb	r2, [r7, #15]
 8005f06:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005f08:	7dbb      	ldrb	r3, [r7, #22]
 8005f0a:	2be5      	cmp	r3, #229	@ 0xe5
 8005f0c:	d007      	beq.n	8005f1e <dir_find+0x8a>
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <dir_find+0x98>
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b0f      	cmp	r3, #15
 8005f1c:	d006      	beq.n	8005f2c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f1e:	23ff      	movs	r3, #255	@ 0xff
 8005f20:	757b      	strb	r3, [r7, #21]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f2a:	e05e      	b.n	8005fea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b0f      	cmp	r3, #15
 8005f30:	d136      	bne.n	8005fa0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d154      	bne.n	8005fea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005f40:	7dbb      	ldrb	r3, [r7, #22]
 8005f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00d      	beq.n	8005f66 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	7b5b      	ldrb	r3, [r3, #13]
 8005f50:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005f52:	7dbb      	ldrb	r3, [r7, #22]
 8005f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f58:	75bb      	strb	r3, [r7, #22]
 8005f5a:	7dbb      	ldrb	r3, [r7, #22]
 8005f5c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695a      	ldr	r2, [r3, #20]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005f66:	7dba      	ldrb	r2, [r7, #22]
 8005f68:	7d7b      	ldrb	r3, [r7, #21]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d115      	bne.n	8005f9a <dir_find+0x106>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	330d      	adds	r3, #13
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	7d3a      	ldrb	r2, [r7, #20]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d10e      	bne.n	8005f9a <dir_find+0x106>
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f7ff fcf2 	bl	8005970 <cmp_lfn>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <dir_find+0x106>
 8005f92:	7d7b      	ldrb	r3, [r7, #21]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e000      	b.n	8005f9c <dir_find+0x108>
 8005f9a:	23ff      	movs	r3, #255	@ 0xff
 8005f9c:	757b      	strb	r3, [r7, #21]
 8005f9e:	e024      	b.n	8005fea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005fa0:	7d7b      	ldrb	r3, [r7, #21]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <dir_find+0x126>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7ff feaa 	bl	8005d04 <sum_sfn>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	7d3b      	ldrb	r3, [r7, #20]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d024      	beq.n	8006004 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <dir_find+0x14a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a18      	ldr	r0, [r3, #32]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3324      	adds	r3, #36	@ 0x24
 8005fd0:	220b      	movs	r2, #11
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f7fe fd15 	bl	8004a02 <mem_cmp>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d014      	beq.n	8006008 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005fde:	23ff      	movs	r3, #255	@ 0xff
 8005fe0:	757b      	strb	r3, [r7, #21]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe8:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005fea:	2100      	movs	r1, #0
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fb63 	bl	80056b8 <dir_next>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f43f af65 	beq.w	8005ec8 <dir_find+0x34>
 8005ffe:	e004      	b.n	800600a <dir_find+0x176>
		if (res != FR_OK) break;
 8006000:	bf00      	nop
 8006002:	e002      	b.n	800600a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006004:	bf00      	nop
 8006006:	e000      	b.n	800600a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006008:	bf00      	nop

	return res;
 800600a:	7dfb      	ldrb	r3, [r7, #23]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	@ 0x30
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006028:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <dir_register+0x20>
 8006030:	2306      	movs	r3, #6
 8006032:	e0e0      	b.n	80061f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006034:	2300      	movs	r3, #0
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
 8006038:	e002      	b.n	8006040 <dir_register+0x2c>
 800603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603c:	3301      	adds	r3, #1
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f4      	bne.n	800603a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006056:	f107 030c 	add.w	r3, r7, #12
 800605a:	220c      	movs	r2, #12
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe fc94 	bl	800498a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006062:	7dfb      	ldrb	r3, [r7, #23]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d032      	beq.n	80060d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2240      	movs	r2, #64	@ 0x40
 8006070:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8006074:	2301      	movs	r3, #1
 8006076:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006078:	e016      	b.n	80060a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	f107 010c 	add.w	r1, r7, #12
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	f7ff fdad 	bl	8005be8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ff00 	bl	8005e94 <dir_find>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800609a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	3301      	adds	r3, #1
 80060a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060aa:	2b63      	cmp	r3, #99	@ 0x63
 80060ac:	d9e5      	bls.n	800607a <dir_register+0x66>
 80060ae:	e000      	b.n	80060b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80060b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	2b64      	cmp	r3, #100	@ 0x64
 80060b6:	d101      	bne.n	80060bc <dir_register+0xa8>
 80060b8:	2307      	movs	r3, #7
 80060ba:	e09c      	b.n	80061f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80060bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d002      	beq.n	80060ca <dir_register+0xb6>
 80060c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060c8:	e095      	b.n	80061f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80060ca:	7dfa      	ldrb	r2, [r7, #23]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <dir_register+0xd8>
 80060dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060de:	330c      	adds	r3, #12
 80060e0:	4a47      	ldr	r2, [pc, #284]	@ (8006200 <dir_register+0x1ec>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	089b      	lsrs	r3, r3, #2
 80060e8:	3301      	adds	r3, #1
 80060ea:	e000      	b.n	80060ee <dir_register+0xda>
 80060ec:	2301      	movs	r3, #1
 80060ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fbb6 	bl	8005864 <dir_alloc>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80060fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d148      	bne.n	8006198 <dir_register+0x184>
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	3b01      	subs	r3, #1
 800610a:	623b      	str	r3, [r7, #32]
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d042      	beq.n	8006198 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695a      	ldr	r2, [r3, #20]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	015b      	lsls	r3, r3, #5
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fa41 	bl	80055a6 <dir_sdi>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800612a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800612e:	2b00      	cmp	r3, #0
 8006130:	d132      	bne.n	8006198 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3324      	adds	r3, #36	@ 0x24
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fde4 	bl	8005d04 <sum_sfn>
 800613c:	4603      	mov	r3, r0
 800613e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	4619      	mov	r1, r3
 8006146:	69f8      	ldr	r0, [r7, #28]
 8006148:	f7fe fe4e 	bl	8004de8 <move_window>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8006152:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006156:	2b00      	cmp	r3, #0
 8006158:	d11d      	bne.n	8006196 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	6918      	ldr	r0, [r3, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a19      	ldr	r1, [r3, #32]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	b2da      	uxtb	r2, r3
 8006166:	7efb      	ldrb	r3, [r7, #27]
 8006168:	f7ff fcd6 	bl	8005b18 <put_lfn>
				fs->wflag = 1;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	2201      	movs	r2, #1
 8006170:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006172:	2100      	movs	r1, #0
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff fa9f 	bl	80056b8 <dir_next>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006180:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006184:	2b00      	cmp	r3, #0
 8006186:	d107      	bne.n	8006198 <dir_register+0x184>
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	3b01      	subs	r3, #1
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1d5      	bne.n	8006140 <dir_register+0x12c>
 8006194:	e000      	b.n	8006198 <dir_register+0x184>
				if (res != FR_OK) break;
 8006196:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006198:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800619c:	2b00      	cmp	r3, #0
 800619e:	d128      	bne.n	80061f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	4619      	mov	r1, r3
 80061a6:	69f8      	ldr	r0, [r7, #28]
 80061a8:	f7fe fe1e 	bl	8004de8 <move_window>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80061b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11b      	bne.n	80061f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	2220      	movs	r2, #32
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fc02 	bl	80049cc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a18      	ldr	r0, [r3, #32]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3324      	adds	r3, #36	@ 0x24
 80061d0:	220b      	movs	r2, #11
 80061d2:	4619      	mov	r1, r3
 80061d4:	f7fe fbd9 	bl	800498a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	330c      	adds	r3, #12
 80061e4:	f002 0218 	and.w	r2, r2, #24
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	2201      	movs	r2, #1
 80061f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80061f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3730      	adds	r7, #48	@ 0x30
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	4ec4ec4f 	.word	0x4ec4ec4f

08006204 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2200      	movs	r2, #0
 8006218:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80ca 	beq.w	80063b8 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d032      	beq.n	8006294 <get_fileinfo+0x90>
			i = j = 0;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006236:	e01b      	b.n	8006270 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006238:	89fb      	ldrh	r3, [r7, #14]
 800623a:	2100      	movs	r1, #0
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fbc9 	bl	80079d4 <ff_convert>
 8006242:	4603      	mov	r3, r0
 8006244:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006246:	89fb      	ldrh	r3, [r7, #14]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <get_fileinfo+0x4e>
 800624c:	2300      	movs	r3, #0
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	e01a      	b.n	8006288 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2bfe      	cmp	r3, #254	@ 0xfe
 8006256:	d902      	bls.n	800625e <get_fileinfo+0x5a>
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	e014      	b.n	8006288 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	61fa      	str	r2, [r7, #28]
 8006264:	89fa      	ldrh	r2, [r7, #14]
 8006266:	b2d1      	uxtb	r1, r2
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	4413      	add	r3, r2
 800626c:	460a      	mov	r2, r1
 800626e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	61b9      	str	r1, [r7, #24]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	81fb      	strh	r3, [r7, #14]
 8006282:	89fb      	ldrh	r3, [r7, #14]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1d7      	bne.n	8006238 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	3316      	adds	r3, #22
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	61bb      	str	r3, [r7, #24]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	3316      	adds	r3, #22
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80062a8:	e04d      	b.n	8006346 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	1c59      	adds	r1, r3, #1
 80062b2:	61f9      	str	r1, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d041      	beq.n	8006344 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d101      	bne.n	80062ca <get_fileinfo+0xc6>
 80062c6:	23e5      	movs	r3, #229	@ 0xe5
 80062c8:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	d10f      	bne.n	80062f0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 80062d0:	89bb      	ldrh	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <get_fileinfo+0xde>
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	4413      	add	r3, r2
 80062dc:	3316      	adds	r3, #22
 80062de:	222e      	movs	r2, #46	@ 0x2e
 80062e0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	61ba      	str	r2, [r7, #24]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	4413      	add	r3, r2
 80062ec:	222e      	movs	r2, #46	@ 0x2e
 80062ee:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	4413      	add	r3, r2
 80062f6:	3309      	adds	r3, #9
 80062f8:	7dfa      	ldrb	r2, [r7, #23]
 80062fa:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80062fc:	89bb      	ldrh	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d11c      	bne.n	800633c <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b40      	cmp	r3, #64	@ 0x40
 8006306:	d913      	bls.n	8006330 <get_fileinfo+0x12c>
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b5a      	cmp	r3, #90	@ 0x5a
 800630c:	d810      	bhi.n	8006330 <get_fileinfo+0x12c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	330c      	adds	r3, #12
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b08      	cmp	r3, #8
 800631c:	d901      	bls.n	8006322 <get_fileinfo+0x11e>
 800631e:	2310      	movs	r3, #16
 8006320:	e000      	b.n	8006324 <get_fileinfo+0x120>
 8006322:	2308      	movs	r3, #8
 8006324:	4013      	ands	r3, r2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	3320      	adds	r3, #32
 800632e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	4413      	add	r3, r2
 8006336:	3316      	adds	r3, #22
 8006338:	7dfa      	ldrb	r2, [r7, #23]
 800633a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	3301      	adds	r3, #1
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	e000      	b.n	8006346 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8006344:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	2b0a      	cmp	r3, #10
 800634a:	d9ae      	bls.n	80062aa <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800634c:	89bb      	ldrh	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10d      	bne.n	800636e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	4413      	add	r3, r2
 8006358:	3316      	adds	r3, #22
 800635a:	2200      	movs	r2, #0
 800635c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	330c      	adds	r3, #12
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <get_fileinfo+0x16a>
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	4413      	add	r3, r2
 8006374:	3309      	adds	r3, #9
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	7ada      	ldrb	r2, [r3, #11]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	331c      	adds	r3, #28
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fa93 	bl	80048b6 <ld_dword>
 8006390:	4602      	mov	r2, r0
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	3316      	adds	r3, #22
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe fa8a 	bl	80048b6 <ld_dword>
 80063a2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	80da      	strh	r2, [r3, #6]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	0c1b      	lsrs	r3, r3, #16
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	809a      	strh	r2, [r3, #4]
 80063b6:	e000      	b.n	80063ba <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80063b8:	bf00      	nop
}
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	@ 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	61ba      	str	r2, [r7, #24]
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80063ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f0:	2b1f      	cmp	r3, #31
 80063f2:	d940      	bls.n	8006476 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80063f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f6:	2b2f      	cmp	r3, #47	@ 0x2f
 80063f8:	d006      	beq.n	8006408 <create_name+0x48>
 80063fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80063fe:	d110      	bne.n	8006422 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006400:	e002      	b.n	8006408 <create_name+0x48>
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3301      	adds	r3, #1
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	4413      	add	r3, r2
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b2f      	cmp	r3, #47	@ 0x2f
 8006412:	d0f6      	beq.n	8006402 <create_name+0x42>
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	4413      	add	r3, r2
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b5c      	cmp	r3, #92	@ 0x5c
 800641e:	d0f0      	beq.n	8006402 <create_name+0x42>
			break;
 8006420:	e02a      	b.n	8006478 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2bfe      	cmp	r3, #254	@ 0xfe
 8006426:	d901      	bls.n	800642c <create_name+0x6c>
 8006428:	2306      	movs	r3, #6
 800642a:	e17d      	b.n	8006728 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800642c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800642e:	b2db      	uxtb	r3, r3
 8006430:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006432:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f001 facc 	bl	80079d4 <ff_convert>
 800643c:	4603      	mov	r3, r0
 800643e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006440:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <create_name+0x8a>
 8006446:	2306      	movs	r3, #6
 8006448:	e16e      	b.n	8006728 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800644a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800644c:	2b7f      	cmp	r3, #127	@ 0x7f
 800644e:	d809      	bhi.n	8006464 <create_name+0xa4>
 8006450:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006452:	4619      	mov	r1, r3
 8006454:	488d      	ldr	r0, [pc, #564]	@ (800668c <create_name+0x2cc>)
 8006456:	f7fe fafb 	bl	8004a50 <chk_chr>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <create_name+0xa4>
 8006460:	2306      	movs	r3, #6
 8006462:	e161      	b.n	8006728 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	617a      	str	r2, [r7, #20]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006472:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006474:	e7b4      	b.n	80063e0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006476:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	441a      	add	r2, r3
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006482:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006484:	2b1f      	cmp	r3, #31
 8006486:	d801      	bhi.n	800648c <create_name+0xcc>
 8006488:	2304      	movs	r3, #4
 800648a:	e000      	b.n	800648e <create_name+0xce>
 800648c:	2300      	movs	r3, #0
 800648e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006492:	e011      	b.n	80064b8 <create_name+0xf8>
		w = lfn[di - 1];
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800649a:	3b01      	subs	r3, #1
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80064a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d002      	beq.n	80064b2 <create_name+0xf2>
 80064ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80064b0:	d106      	bne.n	80064c0 <create_name+0x100>
		di--;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1ea      	bne.n	8006494 <create_name+0xd4>
 80064be:	e000      	b.n	80064c2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80064c0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	2200      	movs	r2, #0
 80064cc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <create_name+0x118>
 80064d4:	2306      	movs	r3, #6
 80064d6:	e127      	b.n	8006728 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3324      	adds	r3, #36	@ 0x24
 80064dc:	220b      	movs	r2, #11
 80064de:	2120      	movs	r1, #32
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fe fa73 	bl	80049cc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e002      	b.n	80064f2 <create_name+0x132>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	3301      	adds	r3, #1
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d0f5      	beq.n	80064ec <create_name+0x12c>
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	881b      	ldrh	r3, [r3, #0]
 800650a:	2b2e      	cmp	r3, #46	@ 0x2e
 800650c:	d0ee      	beq.n	80064ec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d009      	beq.n	8006528 <create_name+0x168>
 8006514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006518:	f043 0303 	orr.w	r3, r3, #3
 800651c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006520:	e002      	b.n	8006528 <create_name+0x168>
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	3b01      	subs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <create_name+0x182>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006534:	3b01      	subs	r3, #1
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006540:	d1ef      	bne.n	8006522 <create_name+0x162>

	i = b = 0; ni = 8;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006548:	2300      	movs	r3, #0
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	2308      	movs	r3, #8
 800654e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	61ba      	str	r2, [r7, #24]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8090 	beq.w	8006688 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800656a:	2b20      	cmp	r3, #32
 800656c:	d006      	beq.n	800657c <create_name+0x1bc>
 800656e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006570:	2b2e      	cmp	r3, #46	@ 0x2e
 8006572:	d10a      	bne.n	800658a <create_name+0x1ca>
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	429a      	cmp	r2, r3
 800657a:	d006      	beq.n	800658a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800657c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006580:	f043 0303 	orr.w	r3, r3, #3
 8006584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006588:	e07d      	b.n	8006686 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800658a:	6a3a      	ldr	r2, [r7, #32]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	429a      	cmp	r2, r3
 8006590:	d203      	bcs.n	800659a <create_name+0x1da>
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	429a      	cmp	r2, r3
 8006598:	d123      	bne.n	80065e2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	2b0b      	cmp	r3, #11
 800659e:	d106      	bne.n	80065ae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80065a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a4:	f043 0303 	orr.w	r3, r3, #3
 80065a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065ac:	e075      	b.n	800669a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d005      	beq.n	80065c2 <create_name+0x202>
 80065b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ba:	f043 0303 	orr.w	r3, r3, #3
 80065be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d866      	bhi.n	8006698 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	2308      	movs	r3, #8
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	230b      	movs	r3, #11
 80065d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80065d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80065e0:	e051      	b.n	8006686 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80065e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80065e6:	d914      	bls.n	8006612 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80065e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065ea:	2100      	movs	r1, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 f9f1 	bl	80079d4 <ff_convert>
 80065f2:	4603      	mov	r3, r0
 80065f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80065f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <create_name+0x246>
 80065fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065fe:	3b80      	subs	r3, #128	@ 0x80
 8006600:	4a23      	ldr	r2, [pc, #140]	@ (8006690 <create_name+0x2d0>)
 8006602:	5cd3      	ldrb	r3, [r2, r3]
 8006604:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <create_name+0x268>
 8006618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800661a:	4619      	mov	r1, r3
 800661c:	481d      	ldr	r0, [pc, #116]	@ (8006694 <create_name+0x2d4>)
 800661e:	f7fe fa17 	bl	8004a50 <chk_chr>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006628:	235f      	movs	r3, #95	@ 0x5f
 800662a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800662c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006630:	f043 0303 	orr.w	r3, r3, #3
 8006634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006638:	e01b      	b.n	8006672 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800663a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800663c:	2b40      	cmp	r3, #64	@ 0x40
 800663e:	d909      	bls.n	8006654 <create_name+0x294>
 8006640:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006642:	2b5a      	cmp	r3, #90	@ 0x5a
 8006644:	d806      	bhi.n	8006654 <create_name+0x294>
					b |= 2;
 8006646:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800664a:	f043 0302 	orr.w	r3, r3, #2
 800664e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006652:	e00e      	b.n	8006672 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006654:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006656:	2b60      	cmp	r3, #96	@ 0x60
 8006658:	d90b      	bls.n	8006672 <create_name+0x2b2>
 800665a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800665c:	2b7a      	cmp	r3, #122	@ 0x7a
 800665e:	d808      	bhi.n	8006672 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800666c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800666e:	3b20      	subs	r3, #32
 8006670:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	623a      	str	r2, [r7, #32]
 8006678:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800667a:	b2d1      	uxtb	r1, r2
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4413      	add	r3, r2
 8006680:	460a      	mov	r2, r1
 8006682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006686:	e763      	b.n	8006550 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006688:	bf00      	nop
 800668a:	e006      	b.n	800669a <create_name+0x2da>
 800668c:	08008750 	.word	0x08008750
 8006690:	080087b0 	.word	0x080087b0
 8006694:	0800875c 	.word	0x0800875c
			if (si > di) break;			/* No extension */
 8006698:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066a0:	2be5      	cmp	r3, #229	@ 0xe5
 80066a2:	d103      	bne.n	80066ac <create_name+0x2ec>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2205      	movs	r2, #5
 80066a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d104      	bne.n	80066bc <create_name+0x2fc>
 80066b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80066bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066c0:	f003 030c 	and.w	r3, r3, #12
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	d005      	beq.n	80066d4 <create_name+0x314>
 80066c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d105      	bne.n	80066e0 <create_name+0x320>
 80066d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066d8:	f043 0302 	orr.w	r3, r3, #2
 80066dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80066e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d117      	bne.n	800671c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80066ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d105      	bne.n	8006704 <create_name+0x344>
 80066f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066fc:	f043 0310 	orr.w	r3, r3, #16
 8006700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006704:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006708:	f003 030c 	and.w	r3, r3, #12
 800670c:	2b04      	cmp	r3, #4
 800670e:	d105      	bne.n	800671c <create_name+0x35c>
 8006710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006714:	f043 0308 	orr.w	r3, r3, #8
 8006718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006722:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006726:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006728:	4618      	mov	r0, r3
 800672a:	3728      	adds	r7, #40	@ 0x28
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006744:	e002      	b.n	800674c <follow_path+0x1c>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b2f      	cmp	r3, #47	@ 0x2f
 8006752:	d0f8      	beq.n	8006746 <follow_path+0x16>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b5c      	cmp	r3, #92	@ 0x5c
 800675a:	d0f4      	beq.n	8006746 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b1f      	cmp	r3, #31
 8006768:	d80a      	bhi.n	8006780 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2280      	movs	r2, #128	@ 0x80
 800676e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006772:	2100      	movs	r1, #0
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7fe ff16 	bl	80055a6 <dir_sdi>
 800677a:	4603      	mov	r3, r0
 800677c:	75fb      	strb	r3, [r7, #23]
 800677e:	e048      	b.n	8006812 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006780:	463b      	mov	r3, r7
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff fe1b 	bl	80063c0 <create_name>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d139      	bne.n	8006808 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff fb7d 	bl	8005e94 <dir_find>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80067a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d12c      	bne.n	800680c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d127      	bne.n	800680c <follow_path+0xdc>
 80067bc:	2305      	movs	r3, #5
 80067be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80067c0:	e024      	b.n	800680c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d121      	bne.n	8006810 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	799b      	ldrb	r3, [r3, #6]
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80067d8:	2305      	movs	r3, #5
 80067da:	75fb      	strb	r3, [r7, #23]
 80067dc:	e019      	b.n	8006812 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	8992      	ldrh	r2, [r2, #12]
 80067ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80067f0:	fb00 f202 	mul.w	r2, r0, r2
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	440b      	add	r3, r1
 80067f8:	4619      	mov	r1, r3
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff f879 	bl	80058f2 <ld_clust>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006806:	e7bb      	b.n	8006780 <follow_path+0x50>
			if (res != FR_OK) break;
 8006808:	bf00      	nop
 800680a:	e002      	b.n	8006812 <follow_path+0xe2>
				break;
 800680c:	bf00      	nop
 800680e:	e000      	b.n	8006812 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006810:	bf00      	nop
			}
		}
	}

	return res;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d031      	beq.n	8006896 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e002      	b.n	8006840 <get_ldnumber+0x24>
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	3301      	adds	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b1f      	cmp	r3, #31
 8006846:	d903      	bls.n	8006850 <get_ldnumber+0x34>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b3a      	cmp	r3, #58	@ 0x3a
 800684e:	d1f4      	bne.n	800683a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b3a      	cmp	r3, #58	@ 0x3a
 8006856:	d11c      	bne.n	8006892 <get_ldnumber+0x76>
			tp = *path;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	60fa      	str	r2, [r7, #12]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	3b30      	subs	r3, #48	@ 0x30
 8006868:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b09      	cmp	r3, #9
 800686e:	d80e      	bhi.n	800688e <get_ldnumber+0x72>
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	429a      	cmp	r2, r3
 8006876:	d10a      	bne.n	800688e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d107      	bne.n	800688e <get_ldnumber+0x72>
					vol = (int)i;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	3301      	adds	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	e002      	b.n	8006898 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006896:	693b      	ldr	r3, [r7, #16]
}
 8006898:	4618      	mov	r0, r3
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	70da      	strb	r2, [r3, #3]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fe fa92 	bl	8004de8 <move_window>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <check_fs+0x2a>
 80068ca:	2304      	movs	r3, #4
 80068cc:	e038      	b.n	8006940 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3338      	adds	r3, #56	@ 0x38
 80068d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd ffd4 	bl	8004884 <ld_word>
 80068dc:	4603      	mov	r3, r0
 80068de:	461a      	mov	r2, r3
 80068e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d001      	beq.n	80068ec <check_fs+0x48>
 80068e8:	2303      	movs	r3, #3
 80068ea:	e029      	b.n	8006940 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068f2:	2be9      	cmp	r3, #233	@ 0xe9
 80068f4:	d009      	beq.n	800690a <check_fs+0x66>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068fc:	2beb      	cmp	r3, #235	@ 0xeb
 80068fe:	d11e      	bne.n	800693e <check_fs+0x9a>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006906:	2b90      	cmp	r3, #144	@ 0x90
 8006908:	d119      	bne.n	800693e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3338      	adds	r3, #56	@ 0x38
 800690e:	3336      	adds	r3, #54	@ 0x36
 8006910:	4618      	mov	r0, r3
 8006912:	f7fd ffd0 	bl	80048b6 <ld_dword>
 8006916:	4603      	mov	r3, r0
 8006918:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800691c:	4a0a      	ldr	r2, [pc, #40]	@ (8006948 <check_fs+0xa4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d101      	bne.n	8006926 <check_fs+0x82>
 8006922:	2300      	movs	r3, #0
 8006924:	e00c      	b.n	8006940 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3338      	adds	r3, #56	@ 0x38
 800692a:	3352      	adds	r3, #82	@ 0x52
 800692c:	4618      	mov	r0, r3
 800692e:	f7fd ffc2 	bl	80048b6 <ld_dword>
 8006932:	4603      	mov	r3, r0
 8006934:	4a05      	ldr	r2, [pc, #20]	@ (800694c <check_fs+0xa8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <check_fs+0x9a>
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800693e:	2302      	movs	r3, #2
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	00544146 	.word	0x00544146
 800694c:	33544146 	.word	0x33544146

08006950 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b096      	sub	sp, #88	@ 0x58
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff ff59 	bl	800681c <get_ldnumber>
 800696a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800696c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696e:	2b00      	cmp	r3, #0
 8006970:	da01      	bge.n	8006976 <find_volume+0x26>
 8006972:	230b      	movs	r3, #11
 8006974:	e265      	b.n	8006e42 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006976:	4a9f      	ldr	r2, [pc, #636]	@ (8006bf4 <find_volume+0x2a4>)
 8006978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800697a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <find_volume+0x3a>
 8006986:	230c      	movs	r3, #12
 8006988:	e25b      	b.n	8006e42 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800698e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01a      	beq.n	80069d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80069a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fd fecd 	bl	8004744 <disk_status>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80069b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10c      	bne.n	80069d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <find_volume+0x82>
 80069c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80069ce:	230a      	movs	r3, #10
 80069d0:	e237      	b.n	8006e42 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80069d2:	2300      	movs	r3, #0
 80069d4:	e235      	b.n	8006e42 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80069dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd fec5 	bl	8004778 <disk_initialize>
 80069ee:	4603      	mov	r3, r0
 80069f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80069f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a00:	2303      	movs	r3, #3
 8006a02:	e21e      	b.n	8006e42 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d007      	beq.n	8006a1a <find_volume+0xca>
 8006a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a16:	230a      	movs	r3, #10
 8006a18:	e213      	b.n	8006e42 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	7858      	ldrb	r0, [r3, #1]
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	330c      	adds	r3, #12
 8006a22:	461a      	mov	r2, r3
 8006a24:	2102      	movs	r1, #2
 8006a26:	f7fd ff0f 	bl	8004848 <disk_ioctl>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <find_volume+0xe4>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e206      	b.n	8006e42 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	899b      	ldrh	r3, [r3, #12]
 8006a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a3c:	d80d      	bhi.n	8006a5a <find_volume+0x10a>
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a40:	899b      	ldrh	r3, [r3, #12]
 8006a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a46:	d308      	bcc.n	8006a5a <find_volume+0x10a>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	899b      	ldrh	r3, [r3, #12]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	899b      	ldrh	r3, [r3, #12]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <find_volume+0x10e>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e1f1      	b.n	8006e42 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a66:	f7ff ff1d 	bl	80068a4 <check_fs>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006a70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d149      	bne.n	8006b0c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a78:	2300      	movs	r3, #0
 8006a7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7c:	e01e      	b.n	8006abc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006a8c:	4413      	add	r3, r2
 8006a8e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	3304      	adds	r3, #4
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d006      	beq.n	8006aa8 <find_volume+0x158>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fd ff09 	bl	80048b6 <ld_dword>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	e000      	b.n	8006aaa <find_volume+0x15a>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	3358      	adds	r3, #88	@ 0x58
 8006ab0:	443b      	add	r3, r7
 8006ab2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab8:	3301      	adds	r3, #1
 8006aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8006abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d9dd      	bls.n	8006a7e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <find_volume+0x182>
 8006acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	3358      	adds	r3, #88	@ 0x58
 8006ad8:	443b      	add	r3, r7
 8006ada:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ade:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <find_volume+0x1a2>
 8006ae6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ae8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006aea:	f7ff fedb 	bl	80068a4 <check_fs>
 8006aee:	4603      	mov	r3, r0
 8006af0:	e000      	b.n	8006af4 <find_volume+0x1a4>
 8006af2:	2303      	movs	r3, #3
 8006af4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006af8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d905      	bls.n	8006b0c <find_volume+0x1bc>
 8006b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b02:	3301      	adds	r3, #1
 8006b04:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d9e2      	bls.n	8006ad2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d101      	bne.n	8006b18 <find_volume+0x1c8>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e194      	b.n	8006e42 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006b18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d901      	bls.n	8006b24 <find_volume+0x1d4>
 8006b20:	230d      	movs	r3, #13
 8006b22:	e18e      	b.n	8006e42 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	3338      	adds	r3, #56	@ 0x38
 8006b28:	330b      	adds	r3, #11
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fd feaa 	bl	8004884 <ld_word>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	899b      	ldrh	r3, [r3, #12]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d001      	beq.n	8006b40 <find_volume+0x1f0>
 8006b3c:	230d      	movs	r3, #13
 8006b3e:	e180      	b.n	8006e42 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	3338      	adds	r3, #56	@ 0x38
 8006b44:	3316      	adds	r3, #22
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fd fe9c 	bl	8004884 <ld_word>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <find_volume+0x214>
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	3338      	adds	r3, #56	@ 0x38
 8006b5a:	3324      	adds	r3, #36	@ 0x24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fd feaa 	bl	80048b6 <ld_dword>
 8006b62:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b68:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	789b      	ldrb	r3, [r3, #2]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d005      	beq.n	8006b88 <find_volume+0x238>
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7e:	789b      	ldrb	r3, [r3, #2]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d001      	beq.n	8006b88 <find_volume+0x238>
 8006b84:	230d      	movs	r3, #13
 8006b86:	e15c      	b.n	8006e42 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	789b      	ldrb	r3, [r3, #2]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	895b      	ldrh	r3, [r3, #10]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <find_volume+0x26c>
 8006baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bac:	895b      	ldrh	r3, [r3, #10]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	895b      	ldrh	r3, [r3, #10]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <find_volume+0x270>
 8006bbc:	230d      	movs	r3, #13
 8006bbe:	e140      	b.n	8006e42 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	3338      	adds	r3, #56	@ 0x38
 8006bc4:	3311      	adds	r3, #17
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fd fe5c 	bl	8004884 <ld_word>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd6:	891b      	ldrh	r3, [r3, #8]
 8006bd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bda:	8992      	ldrh	r2, [r2, #12]
 8006bdc:	0952      	lsrs	r2, r2, #5
 8006bde:	b292      	uxth	r2, r2
 8006be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006be4:	fb01 f202 	mul.w	r2, r1, r2
 8006be8:	1a9b      	subs	r3, r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <find_volume+0x2a8>
 8006bf0:	230d      	movs	r3, #13
 8006bf2:	e126      	b.n	8006e42 <find_volume+0x4f2>
 8006bf4:	20002364 	.word	0x20002364

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfa:	3338      	adds	r3, #56	@ 0x38
 8006bfc:	3313      	adds	r3, #19
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fd fe40 	bl	8004884 <ld_word>
 8006c04:	4603      	mov	r3, r0
 8006c06:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <find_volume+0x2cc>
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c10:	3338      	adds	r3, #56	@ 0x38
 8006c12:	3320      	adds	r3, #32
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fd fe4e 	bl	80048b6 <ld_dword>
 8006c1a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	3338      	adds	r3, #56	@ 0x38
 8006c20:	330e      	adds	r3, #14
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fd fe2e 	bl	8004884 <ld_word>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006c2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <find_volume+0x2e6>
 8006c32:	230d      	movs	r3, #13
 8006c34:	e105      	b.n	8006e42 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006c36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c3a:	4413      	add	r3, r2
 8006c3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c3e:	8911      	ldrh	r1, [r2, #8]
 8006c40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c42:	8992      	ldrh	r2, [r2, #12]
 8006c44:	0952      	lsrs	r2, r2, #5
 8006c46:	b292      	uxth	r2, r2
 8006c48:	fbb1 f2f2 	udiv	r2, r1, r2
 8006c4c:	b292      	uxth	r2, r2
 8006c4e:	4413      	add	r3, r2
 8006c50:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d201      	bcs.n	8006c5e <find_volume+0x30e>
 8006c5a:	230d      	movs	r3, #13
 8006c5c:	e0f1      	b.n	8006e42 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c66:	8952      	ldrh	r2, [r2, #10]
 8006c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c6c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <find_volume+0x328>
 8006c74:	230d      	movs	r3, #13
 8006c76:	e0e4      	b.n	8006e42 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d802      	bhi.n	8006c8e <find_volume+0x33e>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d802      	bhi.n	8006c9e <find_volume+0x34e>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	1c9a      	adds	r2, r3, #2
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006caa:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006cac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cb0:	441a      	add	r2, r3
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006cb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cba:	441a      	add	r2, r3
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d11e      	bne.n	8006d06 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cca:	3338      	adds	r3, #56	@ 0x38
 8006ccc:	332a      	adds	r3, #42	@ 0x2a
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fd fdd8 	bl	8004884 <ld_word>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <find_volume+0x38e>
 8006cda:	230d      	movs	r3, #13
 8006cdc:	e0b1      	b.n	8006e42 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce0:	891b      	ldrh	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <find_volume+0x39a>
 8006ce6:	230d      	movs	r3, #13
 8006ce8:	e0ab      	b.n	8006e42 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	3338      	adds	r3, #56	@ 0x38
 8006cee:	332c      	adds	r3, #44	@ 0x2c
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fd fde0 	bl	80048b6 <ld_dword>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d04:	e01f      	b.n	8006d46 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	891b      	ldrh	r3, [r3, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <find_volume+0x3c2>
 8006d0e:	230d      	movs	r3, #13
 8006d10:	e097      	b.n	8006e42 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d18:	441a      	add	r2, r3
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006d1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d103      	bne.n	8006d2e <find_volume+0x3de>
 8006d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	e00a      	b.n	8006d44 <find_volume+0x3f4>
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	69da      	ldr	r2, [r3, #28]
 8006d32:	4613      	mov	r3, r2
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	4413      	add	r3, r2
 8006d38:	085a      	lsrs	r2, r3, #1
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006d44:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d48:	6a1a      	ldr	r2, [r3, #32]
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	899b      	ldrh	r3, [r3, #12]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d52:	440b      	add	r3, r1
 8006d54:	3b01      	subs	r3, #1
 8006d56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d58:	8989      	ldrh	r1, [r1, #12]
 8006d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d201      	bcs.n	8006d66 <find_volume+0x416>
 8006d62:	230d      	movs	r3, #13
 8006d64:	e06d      	b.n	8006e42 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d68:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6c:	619a      	str	r2, [r3, #24]
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	2280      	movs	r2, #128	@ 0x80
 8006d7a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d149      	bne.n	8006e18 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d86:	3338      	adds	r3, #56	@ 0x38
 8006d88:	3330      	adds	r3, #48	@ 0x30
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd fd7a 	bl	8004884 <ld_word>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d140      	bne.n	8006e18 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d9e:	f7fe f823 	bl	8004de8 <move_window>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d137      	bne.n	8006e18 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	2200      	movs	r2, #0
 8006dac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db0:	3338      	adds	r3, #56	@ 0x38
 8006db2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fd fd64 	bl	8004884 <ld_word>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d127      	bne.n	8006e18 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	3338      	adds	r3, #56	@ 0x38
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fd fd72 	bl	80048b6 <ld_dword>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e4c <find_volume+0x4fc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d11e      	bne.n	8006e18 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	3338      	adds	r3, #56	@ 0x38
 8006dde:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fd fd67 	bl	80048b6 <ld_dword>
 8006de8:	4603      	mov	r3, r0
 8006dea:	4a19      	ldr	r2, [pc, #100]	@ (8006e50 <find_volume+0x500>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d113      	bne.n	8006e18 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	3338      	adds	r3, #56	@ 0x38
 8006df4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fd fd5c 	bl	80048b6 <ld_dword>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	3338      	adds	r3, #56	@ 0x38
 8006e08:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fd fd52 	bl	80048b6 <ld_dword>
 8006e12:	4602      	mov	r2, r0
 8006e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e16:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006e1e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e20:	4b0c      	ldr	r3, [pc, #48]	@ (8006e54 <find_volume+0x504>)
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <find_volume+0x504>)
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	4b09      	ldr	r3, [pc, #36]	@ (8006e54 <find_volume+0x504>)
 8006e2e:	881a      	ldrh	r2, [r3, #0]
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e36:	4a08      	ldr	r2, [pc, #32]	@ (8006e58 <find_volume+0x508>)
 8006e38:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006e3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e3c:	f7fd ff6c 	bl	8004d18 <clear_lock>
#endif
	return FR_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3758      	adds	r7, #88	@ 0x58
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	41615252 	.word	0x41615252
 8006e50:	61417272 	.word	0x61417272
 8006e54:	20002368 	.word	0x20002368
 8006e58:	2000238c 	.word	0x2000238c

08006e5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006e66:	2309      	movs	r3, #9
 8006e68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01c      	beq.n	8006eaa <validate+0x4e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d018      	beq.n	8006eaa <validate+0x4e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d013      	beq.n	8006eaa <validate+0x4e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	889a      	ldrh	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	88db      	ldrh	r3, [r3, #6]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d10c      	bne.n	8006eaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	785b      	ldrb	r3, [r3, #1]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fd fc54 	bl	8004744 <disk_status>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <validate+0x4e>
			res = FR_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <validate+0x5a>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	e000      	b.n	8006eb8 <validate+0x5c>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	6013      	str	r3, [r2, #0]
	return res;
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006eda:	f107 0310 	add.w	r3, r7, #16
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fc9c 	bl	800681c <get_ldnumber>
 8006ee4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	da01      	bge.n	8006ef0 <f_mount+0x28>
 8006eec:	230b      	movs	r3, #11
 8006eee:	e02b      	b.n	8006f48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ef0:	4a17      	ldr	r2, [pc, #92]	@ (8006f50 <f_mount+0x88>)
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006f00:	69b8      	ldr	r0, [r7, #24]
 8006f02:	f7fd ff09 	bl	8004d18 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	490d      	ldr	r1, [pc, #52]	@ (8006f50 <f_mount+0x88>)
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <f_mount+0x66>
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d001      	beq.n	8006f32 <f_mount+0x6a>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e00a      	b.n	8006f48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006f32:	f107 010c 	add.w	r1, r7, #12
 8006f36:	f107 0308 	add.w	r3, r7, #8
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fd07 	bl	8006950 <find_volume>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20002364 	.word	0x20002364

08006f54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b09a      	sub	sp, #104	@ 0x68
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <f_open+0x18>
 8006f68:	2309      	movs	r3, #9
 8006f6a:	e1b7      	b.n	80072dc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006f74:	79fa      	ldrb	r2, [r7, #7]
 8006f76:	f107 0114 	add.w	r1, r7, #20
 8006f7a:	f107 0308 	add.w	r3, r7, #8
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff fce6 	bl	8006950 <find_volume>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006f8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 819b 	bne.w	80072ca <f_open+0x376>
		dj.obj.fs = fs;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	f107 0318 	add.w	r3, r7, #24
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7ff fbc5 	bl	8006730 <follow_path>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006fac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d118      	bne.n	8006fe6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	da03      	bge.n	8006fc6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006fbe:	2306      	movs	r3, #6
 8006fc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006fc4:	e00f      	b.n	8006fe6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	bf8c      	ite	hi
 8006fcc:	2301      	movhi	r3, #1
 8006fce:	2300      	movls	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f107 0318 	add.w	r3, r7, #24
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd fd54 	bl	8004a88 <chk_lock>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	f003 031c 	and.w	r3, r3, #28
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d07f      	beq.n	80070f0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d017      	beq.n	8007028 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ff8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d10e      	bne.n	800701e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007000:	f7fd fd9e 	bl	8004b40 <enq_lock>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d006      	beq.n	8007018 <f_open+0xc4>
 800700a:	f107 0318 	add.w	r3, r7, #24
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff f800 	bl	8006014 <dir_register>
 8007014:	4603      	mov	r3, r0
 8007016:	e000      	b.n	800701a <f_open+0xc6>
 8007018:	2312      	movs	r3, #18
 800701a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	f043 0308 	orr.w	r3, r3, #8
 8007024:	71fb      	strb	r3, [r7, #7]
 8007026:	e010      	b.n	800704a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007028:	7fbb      	ldrb	r3, [r7, #30]
 800702a:	f003 0311 	and.w	r3, r3, #17
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <f_open+0xe6>
					res = FR_DENIED;
 8007032:	2307      	movs	r3, #7
 8007034:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007038:	e007      	b.n	800704a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <f_open+0xf6>
 8007044:	2308      	movs	r3, #8
 8007046:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800704a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800704e:	2b00      	cmp	r3, #0
 8007050:	d168      	bne.n	8007124 <f_open+0x1d0>
 8007052:	79fb      	ldrb	r3, [r7, #7]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d063      	beq.n	8007124 <f_open+0x1d0>
				dw = GET_FATTIME();
 800705c:	f7fd fb14 	bl	8004688 <get_fattime>
 8007060:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	330e      	adds	r3, #14
 8007066:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007068:	4618      	mov	r0, r3
 800706a:	f7fd fc62 	bl	8004932 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800706e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007070:	3316      	adds	r3, #22
 8007072:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007074:	4618      	mov	r0, r3
 8007076:	f7fd fc5c 	bl	8004932 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	330b      	adds	r3, #11
 800707e:	2220      	movs	r2, #32
 8007080:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fc32 	bl	80058f2 <ld_clust>
 800708e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007094:	2200      	movs	r2, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fc4a 	bl	8005930 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	331c      	adds	r3, #28
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fd fc45 	bl	8004932 <st_dword>
					fs->wflag = 1;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	2201      	movs	r2, #1
 80070ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80070ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d037      	beq.n	8007124 <f_open+0x1d0>
						dw = fs->winsect;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80070ba:	f107 0318 	add.w	r3, r7, #24
 80070be:	2200      	movs	r2, #0
 80070c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe f93a 	bl	800533c <remove_chain>
 80070c8:	4603      	mov	r3, r0
 80070ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80070ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d126      	bne.n	8007124 <f_open+0x1d0>
							res = move_window(fs, dw);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fd fe84 	bl	8004de8 <move_window>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070ea:	3a01      	subs	r2, #1
 80070ec:	615a      	str	r2, [r3, #20]
 80070ee:	e019      	b.n	8007124 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80070f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d115      	bne.n	8007124 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80070f8:	7fbb      	ldrb	r3, [r7, #30]
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <f_open+0x1b6>
					res = FR_NO_FILE;
 8007102:	2304      	movs	r3, #4
 8007104:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007108:	e00c      	b.n	8007124 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <f_open+0x1d0>
 8007114:	7fbb      	ldrb	r3, [r7, #30]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <f_open+0x1d0>
						res = FR_DENIED;
 800711e:	2307      	movs	r3, #7
 8007120:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007124:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007128:	2b00      	cmp	r3, #0
 800712a:	d126      	bne.n	800717a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800713c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007146:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	2b01      	cmp	r3, #1
 8007150:	bf8c      	ite	hi
 8007152:	2301      	movhi	r3, #1
 8007154:	2300      	movls	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	f107 0318 	add.w	r3, r7, #24
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7fd fd0f 	bl	8004b84 <inc_lock>
 8007166:	4602      	mov	r2, r0
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <f_open+0x226>
 8007174:	2302      	movs	r3, #2
 8007176:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800717a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800717e:	2b00      	cmp	r3, #0
 8007180:	f040 80a3 	bne.w	80072ca <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007188:	4611      	mov	r1, r2
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fbb1 	bl	80058f2 <ld_clust>
 8007190:	4602      	mov	r2, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	331c      	adds	r3, #28
 800719a:	4618      	mov	r0, r3
 800719c:	f7fd fb8b 	bl	80048b6 <ld_dword>
 80071a0:	4602      	mov	r2, r0
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	88da      	ldrh	r2, [r3, #6]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	79fa      	ldrb	r2, [r7, #7]
 80071be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3330      	adds	r3, #48	@ 0x30
 80071d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80071da:	2100      	movs	r1, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fd fbf5 	bl	80049cc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80071e2:	79fb      	ldrb	r3, [r7, #7]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d06e      	beq.n	80072ca <f_open+0x376>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d06a      	beq.n	80072ca <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	895b      	ldrh	r3, [r3, #10]
 8007200:	461a      	mov	r2, r3
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	899b      	ldrh	r3, [r3, #12]
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007218:	e016      	b.n	8007248 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800721e:	4618      	mov	r0, r3
 8007220:	f7fd fe9f 	bl	8004f62 <get_fat>
 8007224:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007226:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007228:	2b01      	cmp	r3, #1
 800722a:	d802      	bhi.n	8007232 <f_open+0x2de>
 800722c:	2302      	movs	r3, #2
 800722e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007238:	d102      	bne.n	8007240 <f_open+0x2ec>
 800723a:	2301      	movs	r3, #1
 800723c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007240:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007242:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007248:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800724c:	2b00      	cmp	r3, #0
 800724e:	d103      	bne.n	8007258 <f_open+0x304>
 8007250:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007254:	429a      	cmp	r2, r3
 8007256:	d8e0      	bhi.n	800721a <f_open+0x2c6>
				}
				fp->clust = clst;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800725c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800725e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007262:	2b00      	cmp	r3, #0
 8007264:	d131      	bne.n	80072ca <f_open+0x376>
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	899b      	ldrh	r3, [r3, #12]
 800726a:	461a      	mov	r2, r3
 800726c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800726e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007272:	fb01 f202 	mul.w	r2, r1, r2
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d026      	beq.n	80072ca <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007280:	4618      	mov	r0, r3
 8007282:	f7fd fe4f 	bl	8004f24 <clust2sect>
 8007286:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8007288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d103      	bne.n	8007296 <f_open+0x342>
						res = FR_INT_ERR;
 800728e:	2302      	movs	r3, #2
 8007290:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007294:	e019      	b.n	80072ca <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	899b      	ldrh	r3, [r3, #12]
 800729a:	461a      	mov	r2, r3
 800729c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800729e:	fbb3 f2f2 	udiv	r2, r3, r2
 80072a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	7858      	ldrb	r0, [r3, #1]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a1a      	ldr	r2, [r3, #32]
 80072b8:	2301      	movs	r3, #1
 80072ba:	f7fd fa85 	bl	80047c8 <disk_read>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <f_open+0x376>
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80072ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <f_open+0x384>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80072d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3768      	adds	r7, #104	@ 0x68
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08e      	sub	sp, #56	@ 0x38
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f107 0214 	add.w	r2, r7, #20
 8007302:	4611      	mov	r1, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fda9 	bl	8006e5c <validate>
 800730a:	4603      	mov	r3, r0
 800730c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007310:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007314:	2b00      	cmp	r3, #0
 8007316:	d107      	bne.n	8007328 <f_read+0x44>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	7d5b      	ldrb	r3, [r3, #21]
 800731c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8007320:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <f_read+0x4a>
 8007328:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800732c:	e135      	b.n	800759a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	7d1b      	ldrb	r3, [r3, #20]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <f_read+0x5a>
 800733a:	2307      	movs	r3, #7
 800733c:	e12d      	b.n	800759a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	429a      	cmp	r2, r3
 8007350:	f240 811e 	bls.w	8007590 <f_read+0x2ac>
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007358:	e11a      	b.n	8007590 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	8992      	ldrh	r2, [r2, #12]
 8007362:	fbb3 f1f2 	udiv	r1, r3, r2
 8007366:	fb01 f202 	mul.w	r2, r1, r2
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 80d5 	bne.w	800751c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	8992      	ldrh	r2, [r2, #12]
 800737a:	fbb3 f3f2 	udiv	r3, r3, r2
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	8952      	ldrh	r2, [r2, #10]
 8007382:	3a01      	subs	r2, #1
 8007384:	4013      	ands	r3, r2
 8007386:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d12f      	bne.n	80073ee <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	633b      	str	r3, [r7, #48]	@ 0x30
 800739c:	e013      	b.n	80073c6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	4619      	mov	r1, r3
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7fe f8c2 	bl	8005536 <clmt_clust>
 80073b2:	6338      	str	r0, [r7, #48]	@ 0x30
 80073b4:	e007      	b.n	80073c6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fd fdcf 	bl	8004f62 <get_fat>
 80073c4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d804      	bhi.n	80073d6 <f_read+0xf2>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2202      	movs	r2, #2
 80073d0:	755a      	strb	r2, [r3, #21]
 80073d2:	2302      	movs	r3, #2
 80073d4:	e0e1      	b.n	800759a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d104      	bne.n	80073e8 <f_read+0x104>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	755a      	strb	r2, [r3, #21]
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0d8      	b.n	800759a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	4619      	mov	r1, r3
 80073f6:	4610      	mov	r0, r2
 80073f8:	f7fd fd94 	bl	8004f24 <clust2sect>
 80073fc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <f_read+0x12a>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2202      	movs	r2, #2
 8007408:	755a      	strb	r2, [r3, #21]
 800740a:	2302      	movs	r3, #2
 800740c:	e0c5      	b.n	800759a <f_read+0x2b6>
			sect += csect;
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	4413      	add	r3, r2
 8007414:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	899b      	ldrh	r3, [r3, #12]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007422:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	2b00      	cmp	r3, #0
 8007428:	d041      	beq.n	80074ae <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	4413      	add	r3, r2
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	8952      	ldrh	r2, [r2, #10]
 8007434:	4293      	cmp	r3, r2
 8007436:	d905      	bls.n	8007444 <f_read+0x160>
					cc = fs->csize - csect;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	895b      	ldrh	r3, [r3, #10]
 800743c:	461a      	mov	r2, r3
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	7858      	ldrb	r0, [r3, #1]
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800744e:	f7fd f9bb 	bl	80047c8 <disk_read>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <f_read+0x17e>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	755a      	strb	r2, [r3, #21]
 800745e:	2301      	movs	r3, #1
 8007460:	e09b      	b.n	800759a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	7d1b      	ldrb	r3, [r3, #20]
 8007466:	b25b      	sxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	da18      	bge.n	800749e <f_read+0x1ba>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007476:	429a      	cmp	r2, r3
 8007478:	d911      	bls.n	800749e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a1a      	ldr	r2, [r3, #32]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	8992      	ldrh	r2, [r2, #12]
 8007486:	fb02 f303 	mul.w	r3, r2, r3
 800748a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800748c:	18d0      	adds	r0, r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	899b      	ldrh	r3, [r3, #12]
 8007498:	461a      	mov	r2, r3
 800749a:	f7fd fa76 	bl	800498a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	899b      	ldrh	r3, [r3, #12]
 80074a2:	461a      	mov	r2, r3
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80074ac:	e05c      	b.n	8007568 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d02e      	beq.n	8007516 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	7d1b      	ldrb	r3, [r3, #20]
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da18      	bge.n	80074f4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	7858      	ldrb	r0, [r3, #1]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	2301      	movs	r3, #1
 80074d2:	f7fd f999 	bl	8004808 <disk_write>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <f_read+0x202>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	755a      	strb	r2, [r3, #21]
 80074e2:	2301      	movs	r3, #1
 80074e4:	e059      	b.n	800759a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	7d1b      	ldrb	r3, [r3, #20]
 80074ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	7858      	ldrb	r0, [r3, #1]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074fe:	2301      	movs	r3, #1
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	f7fd f961 	bl	80047c8 <disk_read>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <f_read+0x232>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	755a      	strb	r2, [r3, #21]
 8007512:	2301      	movs	r3, #1
 8007514:	e041      	b.n	800759a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	899b      	ldrh	r3, [r3, #12]
 8007520:	4618      	mov	r0, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	8992      	ldrh	r2, [r2, #12]
 800752a:	fbb3 f1f2 	udiv	r1, r3, r2
 800752e:	fb01 f202 	mul.w	r2, r1, r2
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	1ac3      	subs	r3, r0, r3
 8007536:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	429a      	cmp	r2, r3
 800753e:	d901      	bls.n	8007544 <f_read+0x260>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	8992      	ldrh	r2, [r2, #12]
 8007552:	fbb3 f0f2 	udiv	r0, r3, r2
 8007556:	fb00 f202 	mul.w	r2, r0, r2
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	440b      	add	r3, r1
 800755e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007560:	4619      	mov	r1, r3
 8007562:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007564:	f7fd fa11 	bl	800498a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800756a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800756c:	4413      	add	r3, r2
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007576:	441a      	add	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	619a      	str	r2, [r3, #24]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007582:	441a      	add	r2, r3
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f47f aee1 	bne.w	800735a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3738      	adds	r7, #56	@ 0x38
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b086      	sub	sp, #24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f107 0208 	add.w	r2, r7, #8
 80075b0:	4611      	mov	r1, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fc52 	bl	8006e5c <validate>
 80075b8:	4603      	mov	r3, r0
 80075ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d168      	bne.n	8007694 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	7d1b      	ldrb	r3, [r3, #20]
 80075c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d062      	beq.n	8007694 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	7d1b      	ldrb	r3, [r3, #20]
 80075d2:	b25b      	sxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	da15      	bge.n	8007604 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	7858      	ldrb	r0, [r3, #1]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1a      	ldr	r2, [r3, #32]
 80075e6:	2301      	movs	r3, #1
 80075e8:	f7fd f90e 	bl	8004808 <disk_write>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <f_sync+0x54>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e04f      	b.n	8007696 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7d1b      	ldrb	r3, [r3, #20]
 80075fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007604:	f7fd f840 	bl	8004688 <get_fattime>
 8007608:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fd fbe8 	bl	8004de8 <move_window>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d138      	bne.n	8007694 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	330b      	adds	r3, #11
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	330b      	adds	r3, #11
 8007632:	f042 0220 	orr.w	r2, r2, #32
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	461a      	mov	r2, r3
 8007644:	68f9      	ldr	r1, [r7, #12]
 8007646:	f7fe f973 	bl	8005930 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f103 021c 	add.w	r2, r3, #28
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7fd f96b 	bl	8004932 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3316      	adds	r3, #22
 8007660:	6939      	ldr	r1, [r7, #16]
 8007662:	4618      	mov	r0, r3
 8007664:	f7fd f965 	bl	8004932 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3312      	adds	r3, #18
 800766c:	2100      	movs	r1, #0
 800766e:	4618      	mov	r0, r3
 8007670:	f7fd f944 	bl	80048fc <st_word>
					fs->wflag = 1;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2201      	movs	r2, #1
 8007678:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd fbe1 	bl	8004e44 <sync_fs>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7d1b      	ldrb	r3, [r3, #20]
 800768a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800768e:	b2da      	uxtb	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007694:	7dfb      	ldrb	r3, [r7, #23]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff ff7b 	bl	80075a2 <f_sync>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d118      	bne.n	80076e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f107 0208 	add.w	r2, r7, #8
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff fbcc 	bl	8006e5c <validate>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10c      	bne.n	80076e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd fae4 	bl	8004ca0 <dec_lock>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b086      	sub	sp, #24
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <f_opendir+0x14>
 8007702:	2309      	movs	r3, #9
 8007704:	e064      	b.n	80077d0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800770a:	f107 010c 	add.w	r1, r7, #12
 800770e:	463b      	mov	r3, r7
 8007710:	2200      	movs	r2, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff f91c 	bl	8006950 <find_volume>
 8007718:	4603      	mov	r3, r0
 800771a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d14f      	bne.n	80077c2 <f_opendir+0xd0>
		obj->fs = fs;
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7fe ffff 	bl	8006730 <follow_path>
 8007732:	4603      	mov	r3, r0
 8007734:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007736:	7dfb      	ldrb	r3, [r7, #23]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d13d      	bne.n	80077b8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007742:	b25b      	sxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	db12      	blt.n	800776e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	799b      	ldrb	r3, [r3, #6]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f7fe f8c8 	bl	80058f2 <ld_clust>
 8007762:	4602      	mov	r2, r0
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	609a      	str	r2, [r3, #8]
 8007768:	e001      	b.n	800776e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800776a:	2305      	movs	r3, #5
 800776c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d121      	bne.n	80077b8 <f_opendir+0xc6>
				obj->id = fs->id;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	88da      	ldrh	r2, [r3, #6]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800777c:	2100      	movs	r1, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fd ff11 	bl	80055a6 <dir_sdi>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d114      	bne.n	80077b8 <f_opendir+0xc6>
					if (obj->sclust) {
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00d      	beq.n	80077b2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007796:	2100      	movs	r1, #0
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fd f9f3 	bl	8004b84 <inc_lock>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <f_opendir+0xc6>
 80077ac:	2312      	movs	r3, #18
 80077ae:	75fb      	strb	r3, [r7, #23]
 80077b0:	e002      	b.n	80077b8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2200      	movs	r2, #0
 80077b6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d101      	bne.n	80077c2 <f_opendir+0xd0>
 80077be:	2305      	movs	r3, #5
 80077c0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <f_opendir+0xdc>
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f107 0208 	add.w	r2, r7, #8
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff fb37 	bl	8006e5c <validate>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d110      	bne.n	800781a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d006      	beq.n	800780e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	4618      	mov	r0, r3
 8007806:	f7fd fa4b 	bl	8004ca0 <dec_lock>
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800781a:	7bfb      	ldrb	r3, [r7, #15]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f107 0208 	add.w	r2, r7, #8
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff fb10 	bl	8006e5c <validate>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d126      	bne.n	8007894 <f_readdir+0x70>
		if (!fno) {
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fd fea9 	bl	80055a6 <dir_sdi>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
 8007858:	e01c      	b.n	8007894 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800785a:	2100      	movs	r1, #0
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7fe fa72 	bl	8005d46 <dir_read>
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	2b04      	cmp	r3, #4
 800786a:	d101      	bne.n	8007870 <f_readdir+0x4c>
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10e      	bne.n	8007894 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fe fcc3 	bl	8006204 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800787e:	2100      	movs	r1, #0
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7fd ff19 	bl	80056b8 <dir_next>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d101      	bne.n	8007894 <f_readdir+0x70>
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b088      	sub	sp, #32
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
	int n = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80078b2:	e01c      	b.n	80078ee <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80078b4:	f107 0310 	add.w	r3, r7, #16
 80078b8:	f107 0114 	add.w	r1, r7, #20
 80078bc:	2201      	movs	r2, #1
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fd10 	bl	80072e4 <f_read>
		if (rc != 1) break;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d117      	bne.n	80078fa <f_gets+0x5c>
		c = s[0];
 80078ca:	7d3b      	ldrb	r3, [r7, #20]
 80078cc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b0d      	cmp	r3, #13
 80078d2:	d00b      	beq.n	80078ec <f_gets+0x4e>
		*p++ = c;
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	61ba      	str	r2, [r7, #24]
 80078da:	7dfa      	ldrb	r2, [r7, #23]
 80078dc:	701a      	strb	r2, [r3, #0]
		n++;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3301      	adds	r3, #1
 80078e2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	2b0a      	cmp	r3, #10
 80078e8:	d009      	beq.n	80078fe <f_gets+0x60>
 80078ea:	e000      	b.n	80078ee <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80078ec:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	dbdd      	blt.n	80078b4 <f_gets+0x16>
 80078f8:	e002      	b.n	8007900 <f_gets+0x62>
		if (rc != 1) break;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80078fe:	bf00      	nop
	}
	*p = 0;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <f_gets+0x72>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	e000      	b.n	8007912 <f_gets+0x74>
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3720      	adds	r7, #32
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800792a:	2301      	movs	r3, #1
 800792c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007932:	4b1f      	ldr	r3, [pc, #124]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 8007934:	7a5b      	ldrb	r3, [r3, #9]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d131      	bne.n	80079a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800793c:	4b1c      	ldr	r3, [pc, #112]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 800793e:	7a5b      	ldrb	r3, [r3, #9]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	4b1a      	ldr	r3, [pc, #104]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 8007946:	2100      	movs	r1, #0
 8007948:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800794a:	4b19      	ldr	r3, [pc, #100]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 800794c:	7a5b      	ldrb	r3, [r3, #9]
 800794e:	b2db      	uxtb	r3, r3
 8007950:	4a17      	ldr	r2, [pc, #92]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800795a:	4b15      	ldr	r3, [pc, #84]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 800795c:	7a5b      	ldrb	r3, [r3, #9]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 8007964:	4413      	add	r3, r2
 8007966:	79fa      	ldrb	r2, [r7, #7]
 8007968:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800796a:	4b11      	ldr	r3, [pc, #68]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 800796c:	7a5b      	ldrb	r3, [r3, #9]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	b2d1      	uxtb	r1, r2
 8007974:	4a0e      	ldr	r2, [pc, #56]	@ (80079b0 <FATFS_LinkDriverEx+0x94>)
 8007976:	7251      	strb	r1, [r2, #9]
 8007978:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800797a:	7dbb      	ldrb	r3, [r7, #22]
 800797c:	3330      	adds	r3, #48	@ 0x30
 800797e:	b2da      	uxtb	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	3301      	adds	r3, #1
 8007988:	223a      	movs	r2, #58	@ 0x3a
 800798a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	3302      	adds	r3, #2
 8007990:	222f      	movs	r2, #47	@ 0x2f
 8007992:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	3303      	adds	r3, #3
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	2000258c 	.word	0x2000258c

080079b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079be:	2200      	movs	r2, #0
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff ffaa 	bl	800791c <FATFS_LinkDriverEx>
 80079c8:	4603      	mov	r3, r0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	6039      	str	r1, [r7, #0]
 80079de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80079e4:	d802      	bhi.n	80079ec <ff_convert+0x18>
		c = chr;
 80079e6:	88fb      	ldrh	r3, [r7, #6]
 80079e8:	81fb      	strh	r3, [r7, #14]
 80079ea:	e025      	b.n	8007a38 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	2bff      	cmp	r3, #255	@ 0xff
 80079f6:	d805      	bhi.n	8007a04 <ff_convert+0x30>
 80079f8:	88fb      	ldrh	r3, [r7, #6]
 80079fa:	3b80      	subs	r3, #128	@ 0x80
 80079fc:	4a12      	ldr	r2, [pc, #72]	@ (8007a48 <ff_convert+0x74>)
 80079fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a02:	e000      	b.n	8007a06 <ff_convert+0x32>
 8007a04:	2300      	movs	r3, #0
 8007a06:	81fb      	strh	r3, [r7, #14]
 8007a08:	e016      	b.n	8007a38 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	81fb      	strh	r3, [r7, #14]
 8007a0e:	e009      	b.n	8007a24 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007a10:	89fb      	ldrh	r3, [r7, #14]
 8007a12:	4a0d      	ldr	r2, [pc, #52]	@ (8007a48 <ff_convert+0x74>)
 8007a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a18:	88fa      	ldrh	r2, [r7, #6]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d006      	beq.n	8007a2c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007a1e:	89fb      	ldrh	r3, [r7, #14]
 8007a20:	3301      	adds	r3, #1
 8007a22:	81fb      	strh	r3, [r7, #14]
 8007a24:	89fb      	ldrh	r3, [r7, #14]
 8007a26:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a28:	d9f2      	bls.n	8007a10 <ff_convert+0x3c>
 8007a2a:	e000      	b.n	8007a2e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007a2c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007a2e:	89fb      	ldrh	r3, [r7, #14]
 8007a30:	3380      	adds	r3, #128	@ 0x80
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007a38:	89fb      	ldrh	r3, [r7, #14]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	08008840 	.word	0x08008840

08007a4c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5c:	d201      	bcs.n	8007a62 <ff_wtoupper+0x16>
 8007a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b58 <ff_wtoupper+0x10c>)
 8007a60:	e000      	b.n	8007a64 <ff_wtoupper+0x18>
 8007a62:	4b3e      	ldr	r3, [pc, #248]	@ (8007b5c <ff_wtoupper+0x110>)
 8007a64:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	1c9a      	adds	r2, r3, #2
 8007a6a:	617a      	str	r2, [r7, #20]
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007a70:	8a7b      	ldrh	r3, [r7, #18]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d068      	beq.n	8007b48 <ff_wtoupper+0xfc>
 8007a76:	88fa      	ldrh	r2, [r7, #6]
 8007a78:	8a7b      	ldrh	r3, [r7, #18]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d364      	bcc.n	8007b48 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	1c9a      	adds	r2, r3, #2
 8007a82:	617a      	str	r2, [r7, #20]
 8007a84:	881b      	ldrh	r3, [r3, #0]
 8007a86:	823b      	strh	r3, [r7, #16]
 8007a88:	8a3b      	ldrh	r3, [r7, #16]
 8007a8a:	0a1b      	lsrs	r3, r3, #8
 8007a8c:	81fb      	strh	r3, [r7, #14]
 8007a8e:	8a3b      	ldrh	r3, [r7, #16]
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007a94:	88fa      	ldrh	r2, [r7, #6]
 8007a96:	8a79      	ldrh	r1, [r7, #18]
 8007a98:	8a3b      	ldrh	r3, [r7, #16]
 8007a9a:	440b      	add	r3, r1
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	da49      	bge.n	8007b34 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007aa0:	89fb      	ldrh	r3, [r7, #14]
 8007aa2:	2b08      	cmp	r3, #8
 8007aa4:	d84f      	bhi.n	8007b46 <ff_wtoupper+0xfa>
 8007aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aac <ff_wtoupper+0x60>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007ad1 	.word	0x08007ad1
 8007ab0:	08007ae3 	.word	0x08007ae3
 8007ab4:	08007af9 	.word	0x08007af9
 8007ab8:	08007b01 	.word	0x08007b01
 8007abc:	08007b09 	.word	0x08007b09
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007b19 	.word	0x08007b19
 8007ac8:	08007b21 	.word	0x08007b21
 8007acc:	08007b29 	.word	0x08007b29
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007ad0:	88fa      	ldrh	r2, [r7, #6]
 8007ad2:	8a7b      	ldrh	r3, [r7, #18]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4413      	add	r3, r2
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	80fb      	strh	r3, [r7, #6]
 8007ae0:	e027      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007ae2:	88fa      	ldrh	r2, [r7, #6]
 8007ae4:	8a7b      	ldrh	r3, [r7, #18]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	88fa      	ldrh	r2, [r7, #6]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	80fb      	strh	r3, [r7, #6]
 8007af6:	e01c      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	3b10      	subs	r3, #16
 8007afc:	80fb      	strh	r3, [r7, #6]
 8007afe:	e018      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	3b20      	subs	r3, #32
 8007b04:	80fb      	strh	r3, [r7, #6]
 8007b06:	e014      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	3b30      	subs	r3, #48	@ 0x30
 8007b0c:	80fb      	strh	r3, [r7, #6]
 8007b0e:	e010      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	3b1a      	subs	r3, #26
 8007b14:	80fb      	strh	r3, [r7, #6]
 8007b16:	e00c      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	80fb      	strh	r3, [r7, #6]
 8007b1e:	e008      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	3b50      	subs	r3, #80	@ 0x50
 8007b24:	80fb      	strh	r3, [r7, #6]
 8007b26:	e004      	b.n	8007b32 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007b2e:	80fb      	strh	r3, [r7, #6]
 8007b30:	bf00      	nop
			}
			break;
 8007b32:	e008      	b.n	8007b46 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007b34:	89fb      	ldrh	r3, [r7, #14]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d195      	bne.n	8007a66 <ff_wtoupper+0x1a>
 8007b3a:	8a3b      	ldrh	r3, [r7, #16]
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4413      	add	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007b44:	e78f      	b.n	8007a66 <ff_wtoupper+0x1a>
			break;
 8007b46:	bf00      	nop
	}

	return chr;
 8007b48:	88fb      	ldrh	r3, [r7, #6]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	08008940 	.word	0x08008940
 8007b5c:	08008b34 	.word	0x08008b34

08007b60 <atoi>:
 8007b60:	220a      	movs	r2, #10
 8007b62:	2100      	movs	r1, #0
 8007b64:	f000 b87a 	b.w	8007c5c <strtol>

08007b68 <_strtol_l.isra.0>:
 8007b68:	2b24      	cmp	r3, #36	@ 0x24
 8007b6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6e:	4686      	mov	lr, r0
 8007b70:	4690      	mov	r8, r2
 8007b72:	d801      	bhi.n	8007b78 <_strtol_l.isra.0+0x10>
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d106      	bne.n	8007b86 <_strtol_l.isra.0+0x1e>
 8007b78:	f000 f8b2 	bl	8007ce0 <__errno>
 8007b7c:	2316      	movs	r3, #22
 8007b7e:	6003      	str	r3, [r0, #0]
 8007b80:	2000      	movs	r0, #0
 8007b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b86:	4834      	ldr	r0, [pc, #208]	@ (8007c58 <_strtol_l.isra.0+0xf0>)
 8007b88:	460d      	mov	r5, r1
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b90:	5d06      	ldrb	r6, [r0, r4]
 8007b92:	f016 0608 	ands.w	r6, r6, #8
 8007b96:	d1f8      	bne.n	8007b8a <_strtol_l.isra.0+0x22>
 8007b98:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b9a:	d110      	bne.n	8007bbe <_strtol_l.isra.0+0x56>
 8007b9c:	782c      	ldrb	r4, [r5, #0]
 8007b9e:	2601      	movs	r6, #1
 8007ba0:	1c95      	adds	r5, r2, #2
 8007ba2:	f033 0210 	bics.w	r2, r3, #16
 8007ba6:	d115      	bne.n	8007bd4 <_strtol_l.isra.0+0x6c>
 8007ba8:	2c30      	cmp	r4, #48	@ 0x30
 8007baa:	d10d      	bne.n	8007bc8 <_strtol_l.isra.0+0x60>
 8007bac:	782a      	ldrb	r2, [r5, #0]
 8007bae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007bb2:	2a58      	cmp	r2, #88	@ 0x58
 8007bb4:	d108      	bne.n	8007bc8 <_strtol_l.isra.0+0x60>
 8007bb6:	786c      	ldrb	r4, [r5, #1]
 8007bb8:	3502      	adds	r5, #2
 8007bba:	2310      	movs	r3, #16
 8007bbc:	e00a      	b.n	8007bd4 <_strtol_l.isra.0+0x6c>
 8007bbe:	2c2b      	cmp	r4, #43	@ 0x2b
 8007bc0:	bf04      	itt	eq
 8007bc2:	782c      	ldrbeq	r4, [r5, #0]
 8007bc4:	1c95      	addeq	r5, r2, #2
 8007bc6:	e7ec      	b.n	8007ba2 <_strtol_l.isra.0+0x3a>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f6      	bne.n	8007bba <_strtol_l.isra.0+0x52>
 8007bcc:	2c30      	cmp	r4, #48	@ 0x30
 8007bce:	bf14      	ite	ne
 8007bd0:	230a      	movne	r3, #10
 8007bd2:	2308      	moveq	r3, #8
 8007bd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007bd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007bdc:	2200      	movs	r2, #0
 8007bde:	fbbc f9f3 	udiv	r9, ip, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	fb03 ca19 	mls	sl, r3, r9, ip
 8007be8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007bec:	2f09      	cmp	r7, #9
 8007bee:	d80f      	bhi.n	8007c10 <_strtol_l.isra.0+0xa8>
 8007bf0:	463c      	mov	r4, r7
 8007bf2:	42a3      	cmp	r3, r4
 8007bf4:	dd1b      	ble.n	8007c2e <_strtol_l.isra.0+0xc6>
 8007bf6:	1c57      	adds	r7, r2, #1
 8007bf8:	d007      	beq.n	8007c0a <_strtol_l.isra.0+0xa2>
 8007bfa:	4581      	cmp	r9, r0
 8007bfc:	d314      	bcc.n	8007c28 <_strtol_l.isra.0+0xc0>
 8007bfe:	d101      	bne.n	8007c04 <_strtol_l.isra.0+0x9c>
 8007c00:	45a2      	cmp	sl, r4
 8007c02:	db11      	blt.n	8007c28 <_strtol_l.isra.0+0xc0>
 8007c04:	fb00 4003 	mla	r0, r0, r3, r4
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c0e:	e7eb      	b.n	8007be8 <_strtol_l.isra.0+0x80>
 8007c10:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007c14:	2f19      	cmp	r7, #25
 8007c16:	d801      	bhi.n	8007c1c <_strtol_l.isra.0+0xb4>
 8007c18:	3c37      	subs	r4, #55	@ 0x37
 8007c1a:	e7ea      	b.n	8007bf2 <_strtol_l.isra.0+0x8a>
 8007c1c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007c20:	2f19      	cmp	r7, #25
 8007c22:	d804      	bhi.n	8007c2e <_strtol_l.isra.0+0xc6>
 8007c24:	3c57      	subs	r4, #87	@ 0x57
 8007c26:	e7e4      	b.n	8007bf2 <_strtol_l.isra.0+0x8a>
 8007c28:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2c:	e7ed      	b.n	8007c0a <_strtol_l.isra.0+0xa2>
 8007c2e:	1c53      	adds	r3, r2, #1
 8007c30:	d108      	bne.n	8007c44 <_strtol_l.isra.0+0xdc>
 8007c32:	2322      	movs	r3, #34	@ 0x22
 8007c34:	f8ce 3000 	str.w	r3, [lr]
 8007c38:	4660      	mov	r0, ip
 8007c3a:	f1b8 0f00 	cmp.w	r8, #0
 8007c3e:	d0a0      	beq.n	8007b82 <_strtol_l.isra.0+0x1a>
 8007c40:	1e69      	subs	r1, r5, #1
 8007c42:	e006      	b.n	8007c52 <_strtol_l.isra.0+0xea>
 8007c44:	b106      	cbz	r6, 8007c48 <_strtol_l.isra.0+0xe0>
 8007c46:	4240      	negs	r0, r0
 8007c48:	f1b8 0f00 	cmp.w	r8, #0
 8007c4c:	d099      	beq.n	8007b82 <_strtol_l.isra.0+0x1a>
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d1f6      	bne.n	8007c40 <_strtol_l.isra.0+0xd8>
 8007c52:	f8c8 1000 	str.w	r1, [r8]
 8007c56:	e794      	b.n	8007b82 <_strtol_l.isra.0+0x1a>
 8007c58:	08008bf1 	.word	0x08008bf1

08007c5c <strtol>:
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	460a      	mov	r2, r1
 8007c60:	4601      	mov	r1, r0
 8007c62:	4802      	ldr	r0, [pc, #8]	@ (8007c6c <strtol+0x10>)
 8007c64:	6800      	ldr	r0, [r0, #0]
 8007c66:	f7ff bf7f 	b.w	8007b68 <_strtol_l.isra.0>
 8007c6a:	bf00      	nop
 8007c6c:	20000024 	.word	0x20000024

08007c70 <siprintf>:
 8007c70:	b40e      	push	{r1, r2, r3}
 8007c72:	b510      	push	{r4, lr}
 8007c74:	b09d      	sub	sp, #116	@ 0x74
 8007c76:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007c78:	9002      	str	r0, [sp, #8]
 8007c7a:	9006      	str	r0, [sp, #24]
 8007c7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c80:	480a      	ldr	r0, [pc, #40]	@ (8007cac <siprintf+0x3c>)
 8007c82:	9107      	str	r1, [sp, #28]
 8007c84:	9104      	str	r1, [sp, #16]
 8007c86:	490a      	ldr	r1, [pc, #40]	@ (8007cb0 <siprintf+0x40>)
 8007c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c8c:	9105      	str	r1, [sp, #20]
 8007c8e:	2400      	movs	r4, #0
 8007c90:	a902      	add	r1, sp, #8
 8007c92:	6800      	ldr	r0, [r0, #0]
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007c98:	f000 f9aa 	bl	8007ff0 <_svfiprintf_r>
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	701c      	strb	r4, [r3, #0]
 8007ca0:	b01d      	add	sp, #116	@ 0x74
 8007ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca6:	b003      	add	sp, #12
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	20000024 	.word	0x20000024
 8007cb0:	ffff0208 	.word	0xffff0208

08007cb4 <memset>:
 8007cb4:	4402      	add	r2, r0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d100      	bne.n	8007cbe <memset+0xa>
 8007cbc:	4770      	bx	lr
 8007cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007cc2:	e7f9      	b.n	8007cb8 <memset+0x4>

08007cc4 <strchr>:
 8007cc4:	b2c9      	uxtb	r1, r1
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cce:	b112      	cbz	r2, 8007cd6 <strchr+0x12>
 8007cd0:	428a      	cmp	r2, r1
 8007cd2:	d1f9      	bne.n	8007cc8 <strchr+0x4>
 8007cd4:	4770      	bx	lr
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	bf18      	it	ne
 8007cda:	2000      	movne	r0, #0
 8007cdc:	4770      	bx	lr
	...

08007ce0 <__errno>:
 8007ce0:	4b01      	ldr	r3, [pc, #4]	@ (8007ce8 <__errno+0x8>)
 8007ce2:	6818      	ldr	r0, [r3, #0]
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	20000024 	.word	0x20000024

08007cec <__libc_init_array>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	4d0d      	ldr	r5, [pc, #52]	@ (8007d24 <__libc_init_array+0x38>)
 8007cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8007d28 <__libc_init_array+0x3c>)
 8007cf2:	1b64      	subs	r4, r4, r5
 8007cf4:	10a4      	asrs	r4, r4, #2
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	42a6      	cmp	r6, r4
 8007cfa:	d109      	bne.n	8007d10 <__libc_init_array+0x24>
 8007cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8007d2c <__libc_init_array+0x40>)
 8007cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8007d30 <__libc_init_array+0x44>)
 8007d00:	f000 fc6c 	bl	80085dc <_init>
 8007d04:	1b64      	subs	r4, r4, r5
 8007d06:	10a4      	asrs	r4, r4, #2
 8007d08:	2600      	movs	r6, #0
 8007d0a:	42a6      	cmp	r6, r4
 8007d0c:	d105      	bne.n	8007d1a <__libc_init_array+0x2e>
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d14:	4798      	blx	r3
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7ee      	b.n	8007cf8 <__libc_init_array+0xc>
 8007d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1e:	4798      	blx	r3
 8007d20:	3601      	adds	r6, #1
 8007d22:	e7f2      	b.n	8007d0a <__libc_init_array+0x1e>
 8007d24:	08008d2c 	.word	0x08008d2c
 8007d28:	08008d2c 	.word	0x08008d2c
 8007d2c:	08008d2c 	.word	0x08008d2c
 8007d30:	08008d30 	.word	0x08008d30

08007d34 <__retarget_lock_acquire_recursive>:
 8007d34:	4770      	bx	lr

08007d36 <__retarget_lock_release_recursive>:
 8007d36:	4770      	bx	lr

08007d38 <strcpy>:
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d3e:	f803 2b01 	strb.w	r2, [r3], #1
 8007d42:	2a00      	cmp	r2, #0
 8007d44:	d1f9      	bne.n	8007d3a <strcpy+0x2>
 8007d46:	4770      	bx	lr

08007d48 <_free_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	d041      	beq.n	8007dd4 <_free_r+0x8c>
 8007d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d54:	1f0c      	subs	r4, r1, #4
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	bfb8      	it	lt
 8007d5a:	18e4      	addlt	r4, r4, r3
 8007d5c:	f000 f8e0 	bl	8007f20 <__malloc_lock>
 8007d60:	4a1d      	ldr	r2, [pc, #116]	@ (8007dd8 <_free_r+0x90>)
 8007d62:	6813      	ldr	r3, [r2, #0]
 8007d64:	b933      	cbnz	r3, 8007d74 <_free_r+0x2c>
 8007d66:	6063      	str	r3, [r4, #4]
 8007d68:	6014      	str	r4, [r2, #0]
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d70:	f000 b8dc 	b.w	8007f2c <__malloc_unlock>
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	d908      	bls.n	8007d8a <_free_r+0x42>
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	1821      	adds	r1, r4, r0
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	bf01      	itttt	eq
 8007d80:	6819      	ldreq	r1, [r3, #0]
 8007d82:	685b      	ldreq	r3, [r3, #4]
 8007d84:	1809      	addeq	r1, r1, r0
 8007d86:	6021      	streq	r1, [r4, #0]
 8007d88:	e7ed      	b.n	8007d66 <_free_r+0x1e>
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	b10b      	cbz	r3, 8007d94 <_free_r+0x4c>
 8007d90:	42a3      	cmp	r3, r4
 8007d92:	d9fa      	bls.n	8007d8a <_free_r+0x42>
 8007d94:	6811      	ldr	r1, [r2, #0]
 8007d96:	1850      	adds	r0, r2, r1
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d10b      	bne.n	8007db4 <_free_r+0x6c>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	4401      	add	r1, r0
 8007da0:	1850      	adds	r0, r2, r1
 8007da2:	4283      	cmp	r3, r0
 8007da4:	6011      	str	r1, [r2, #0]
 8007da6:	d1e0      	bne.n	8007d6a <_free_r+0x22>
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	6053      	str	r3, [r2, #4]
 8007dae:	4408      	add	r0, r1
 8007db0:	6010      	str	r0, [r2, #0]
 8007db2:	e7da      	b.n	8007d6a <_free_r+0x22>
 8007db4:	d902      	bls.n	8007dbc <_free_r+0x74>
 8007db6:	230c      	movs	r3, #12
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	e7d6      	b.n	8007d6a <_free_r+0x22>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	1821      	adds	r1, r4, r0
 8007dc0:	428b      	cmp	r3, r1
 8007dc2:	bf04      	itt	eq
 8007dc4:	6819      	ldreq	r1, [r3, #0]
 8007dc6:	685b      	ldreq	r3, [r3, #4]
 8007dc8:	6063      	str	r3, [r4, #4]
 8007dca:	bf04      	itt	eq
 8007dcc:	1809      	addeq	r1, r1, r0
 8007dce:	6021      	streq	r1, [r4, #0]
 8007dd0:	6054      	str	r4, [r2, #4]
 8007dd2:	e7ca      	b.n	8007d6a <_free_r+0x22>
 8007dd4:	bd38      	pop	{r3, r4, r5, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200026dc 	.word	0x200026dc

08007ddc <sbrk_aligned>:
 8007ddc:	b570      	push	{r4, r5, r6, lr}
 8007dde:	4e0f      	ldr	r6, [pc, #60]	@ (8007e1c <sbrk_aligned+0x40>)
 8007de0:	460c      	mov	r4, r1
 8007de2:	6831      	ldr	r1, [r6, #0]
 8007de4:	4605      	mov	r5, r0
 8007de6:	b911      	cbnz	r1, 8007dee <sbrk_aligned+0x12>
 8007de8:	f000 fba4 	bl	8008534 <_sbrk_r>
 8007dec:	6030      	str	r0, [r6, #0]
 8007dee:	4621      	mov	r1, r4
 8007df0:	4628      	mov	r0, r5
 8007df2:	f000 fb9f 	bl	8008534 <_sbrk_r>
 8007df6:	1c43      	adds	r3, r0, #1
 8007df8:	d103      	bne.n	8007e02 <sbrk_aligned+0x26>
 8007dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8007dfe:	4620      	mov	r0, r4
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	1cc4      	adds	r4, r0, #3
 8007e04:	f024 0403 	bic.w	r4, r4, #3
 8007e08:	42a0      	cmp	r0, r4
 8007e0a:	d0f8      	beq.n	8007dfe <sbrk_aligned+0x22>
 8007e0c:	1a21      	subs	r1, r4, r0
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 fb90 	bl	8008534 <_sbrk_r>
 8007e14:	3001      	adds	r0, #1
 8007e16:	d1f2      	bne.n	8007dfe <sbrk_aligned+0x22>
 8007e18:	e7ef      	b.n	8007dfa <sbrk_aligned+0x1e>
 8007e1a:	bf00      	nop
 8007e1c:	200026d8 	.word	0x200026d8

08007e20 <_malloc_r>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	1ccd      	adds	r5, r1, #3
 8007e26:	f025 0503 	bic.w	r5, r5, #3
 8007e2a:	3508      	adds	r5, #8
 8007e2c:	2d0c      	cmp	r5, #12
 8007e2e:	bf38      	it	cc
 8007e30:	250c      	movcc	r5, #12
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	4606      	mov	r6, r0
 8007e36:	db01      	blt.n	8007e3c <_malloc_r+0x1c>
 8007e38:	42a9      	cmp	r1, r5
 8007e3a:	d904      	bls.n	8007e46 <_malloc_r+0x26>
 8007e3c:	230c      	movs	r3, #12
 8007e3e:	6033      	str	r3, [r6, #0]
 8007e40:	2000      	movs	r0, #0
 8007e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f1c <_malloc_r+0xfc>
 8007e4a:	f000 f869 	bl	8007f20 <__malloc_lock>
 8007e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e52:	461c      	mov	r4, r3
 8007e54:	bb44      	cbnz	r4, 8007ea8 <_malloc_r+0x88>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f7ff ffbf 	bl	8007ddc <sbrk_aligned>
 8007e5e:	1c43      	adds	r3, r0, #1
 8007e60:	4604      	mov	r4, r0
 8007e62:	d158      	bne.n	8007f16 <_malloc_r+0xf6>
 8007e64:	f8d8 4000 	ldr.w	r4, [r8]
 8007e68:	4627      	mov	r7, r4
 8007e6a:	2f00      	cmp	r7, #0
 8007e6c:	d143      	bne.n	8007ef6 <_malloc_r+0xd6>
 8007e6e:	2c00      	cmp	r4, #0
 8007e70:	d04b      	beq.n	8007f0a <_malloc_r+0xea>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	4639      	mov	r1, r7
 8007e76:	4630      	mov	r0, r6
 8007e78:	eb04 0903 	add.w	r9, r4, r3
 8007e7c:	f000 fb5a 	bl	8008534 <_sbrk_r>
 8007e80:	4581      	cmp	r9, r0
 8007e82:	d142      	bne.n	8007f0a <_malloc_r+0xea>
 8007e84:	6821      	ldr	r1, [r4, #0]
 8007e86:	1a6d      	subs	r5, r5, r1
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7ff ffa6 	bl	8007ddc <sbrk_aligned>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d03a      	beq.n	8007f0a <_malloc_r+0xea>
 8007e94:	6823      	ldr	r3, [r4, #0]
 8007e96:	442b      	add	r3, r5
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	bb62      	cbnz	r2, 8007efc <_malloc_r+0xdc>
 8007ea2:	f8c8 7000 	str.w	r7, [r8]
 8007ea6:	e00f      	b.n	8007ec8 <_malloc_r+0xa8>
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	1b52      	subs	r2, r2, r5
 8007eac:	d420      	bmi.n	8007ef0 <_malloc_r+0xd0>
 8007eae:	2a0b      	cmp	r2, #11
 8007eb0:	d917      	bls.n	8007ee2 <_malloc_r+0xc2>
 8007eb2:	1961      	adds	r1, r4, r5
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	6025      	str	r5, [r4, #0]
 8007eb8:	bf18      	it	ne
 8007eba:	6059      	strne	r1, [r3, #4]
 8007ebc:	6863      	ldr	r3, [r4, #4]
 8007ebe:	bf08      	it	eq
 8007ec0:	f8c8 1000 	streq.w	r1, [r8]
 8007ec4:	5162      	str	r2, [r4, r5]
 8007ec6:	604b      	str	r3, [r1, #4]
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 f82f 	bl	8007f2c <__malloc_unlock>
 8007ece:	f104 000b 	add.w	r0, r4, #11
 8007ed2:	1d23      	adds	r3, r4, #4
 8007ed4:	f020 0007 	bic.w	r0, r0, #7
 8007ed8:	1ac2      	subs	r2, r0, r3
 8007eda:	bf1c      	itt	ne
 8007edc:	1a1b      	subne	r3, r3, r0
 8007ede:	50a3      	strne	r3, [r4, r2]
 8007ee0:	e7af      	b.n	8007e42 <_malloc_r+0x22>
 8007ee2:	6862      	ldr	r2, [r4, #4]
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	bf0c      	ite	eq
 8007ee8:	f8c8 2000 	streq.w	r2, [r8]
 8007eec:	605a      	strne	r2, [r3, #4]
 8007eee:	e7eb      	b.n	8007ec8 <_malloc_r+0xa8>
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	6864      	ldr	r4, [r4, #4]
 8007ef4:	e7ae      	b.n	8007e54 <_malloc_r+0x34>
 8007ef6:	463c      	mov	r4, r7
 8007ef8:	687f      	ldr	r7, [r7, #4]
 8007efa:	e7b6      	b.n	8007e6a <_malloc_r+0x4a>
 8007efc:	461a      	mov	r2, r3
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	42a3      	cmp	r3, r4
 8007f02:	d1fb      	bne.n	8007efc <_malloc_r+0xdc>
 8007f04:	2300      	movs	r3, #0
 8007f06:	6053      	str	r3, [r2, #4]
 8007f08:	e7de      	b.n	8007ec8 <_malloc_r+0xa8>
 8007f0a:	230c      	movs	r3, #12
 8007f0c:	6033      	str	r3, [r6, #0]
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f000 f80c 	bl	8007f2c <__malloc_unlock>
 8007f14:	e794      	b.n	8007e40 <_malloc_r+0x20>
 8007f16:	6005      	str	r5, [r0, #0]
 8007f18:	e7d6      	b.n	8007ec8 <_malloc_r+0xa8>
 8007f1a:	bf00      	nop
 8007f1c:	200026dc 	.word	0x200026dc

08007f20 <__malloc_lock>:
 8007f20:	4801      	ldr	r0, [pc, #4]	@ (8007f28 <__malloc_lock+0x8>)
 8007f22:	f7ff bf07 	b.w	8007d34 <__retarget_lock_acquire_recursive>
 8007f26:	bf00      	nop
 8007f28:	200026d4 	.word	0x200026d4

08007f2c <__malloc_unlock>:
 8007f2c:	4801      	ldr	r0, [pc, #4]	@ (8007f34 <__malloc_unlock+0x8>)
 8007f2e:	f7ff bf02 	b.w	8007d36 <__retarget_lock_release_recursive>
 8007f32:	bf00      	nop
 8007f34:	200026d4 	.word	0x200026d4

08007f38 <__ssputs_r>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	688e      	ldr	r6, [r1, #8]
 8007f3e:	461f      	mov	r7, r3
 8007f40:	42be      	cmp	r6, r7
 8007f42:	680b      	ldr	r3, [r1, #0]
 8007f44:	4682      	mov	sl, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4690      	mov	r8, r2
 8007f4a:	d82d      	bhi.n	8007fa8 <__ssputs_r+0x70>
 8007f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f54:	d026      	beq.n	8007fa4 <__ssputs_r+0x6c>
 8007f56:	6965      	ldr	r5, [r4, #20]
 8007f58:	6909      	ldr	r1, [r1, #16]
 8007f5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f5e:	eba3 0901 	sub.w	r9, r3, r1
 8007f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f66:	1c7b      	adds	r3, r7, #1
 8007f68:	444b      	add	r3, r9
 8007f6a:	106d      	asrs	r5, r5, #1
 8007f6c:	429d      	cmp	r5, r3
 8007f6e:	bf38      	it	cc
 8007f70:	461d      	movcc	r5, r3
 8007f72:	0553      	lsls	r3, r2, #21
 8007f74:	d527      	bpl.n	8007fc6 <__ssputs_r+0x8e>
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7ff ff52 	bl	8007e20 <_malloc_r>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	b360      	cbz	r0, 8007fda <__ssputs_r+0xa2>
 8007f80:	6921      	ldr	r1, [r4, #16]
 8007f82:	464a      	mov	r2, r9
 8007f84:	f000 fae6 	bl	8008554 <memcpy>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	6126      	str	r6, [r4, #16]
 8007f96:	6165      	str	r5, [r4, #20]
 8007f98:	444e      	add	r6, r9
 8007f9a:	eba5 0509 	sub.w	r5, r5, r9
 8007f9e:	6026      	str	r6, [r4, #0]
 8007fa0:	60a5      	str	r5, [r4, #8]
 8007fa2:	463e      	mov	r6, r7
 8007fa4:	42be      	cmp	r6, r7
 8007fa6:	d900      	bls.n	8007faa <__ssputs_r+0x72>
 8007fa8:	463e      	mov	r6, r7
 8007faa:	6820      	ldr	r0, [r4, #0]
 8007fac:	4632      	mov	r2, r6
 8007fae:	4641      	mov	r1, r8
 8007fb0:	f000 faa6 	bl	8008500 <memmove>
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	1b9b      	subs	r3, r3, r6
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	4433      	add	r3, r6
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	f000 fad2 	bl	8008570 <_realloc_r>
 8007fcc:	4606      	mov	r6, r0
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d1e0      	bne.n	8007f94 <__ssputs_r+0x5c>
 8007fd2:	6921      	ldr	r1, [r4, #16]
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	f7ff feb7 	bl	8007d48 <_free_r>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	f8ca 3000 	str.w	r3, [sl]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	e7e9      	b.n	8007fc2 <__ssputs_r+0x8a>
	...

08007ff0 <_svfiprintf_r>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	4698      	mov	r8, r3
 8007ff6:	898b      	ldrh	r3, [r1, #12]
 8007ff8:	061b      	lsls	r3, r3, #24
 8007ffa:	b09d      	sub	sp, #116	@ 0x74
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	4614      	mov	r4, r2
 8008002:	d510      	bpl.n	8008026 <_svfiprintf_r+0x36>
 8008004:	690b      	ldr	r3, [r1, #16]
 8008006:	b973      	cbnz	r3, 8008026 <_svfiprintf_r+0x36>
 8008008:	2140      	movs	r1, #64	@ 0x40
 800800a:	f7ff ff09 	bl	8007e20 <_malloc_r>
 800800e:	6028      	str	r0, [r5, #0]
 8008010:	6128      	str	r0, [r5, #16]
 8008012:	b930      	cbnz	r0, 8008022 <_svfiprintf_r+0x32>
 8008014:	230c      	movs	r3, #12
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b01d      	add	sp, #116	@ 0x74
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	2340      	movs	r3, #64	@ 0x40
 8008024:	616b      	str	r3, [r5, #20]
 8008026:	2300      	movs	r3, #0
 8008028:	9309      	str	r3, [sp, #36]	@ 0x24
 800802a:	2320      	movs	r3, #32
 800802c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008030:	f8cd 800c 	str.w	r8, [sp, #12]
 8008034:	2330      	movs	r3, #48	@ 0x30
 8008036:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081d4 <_svfiprintf_r+0x1e4>
 800803a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800803e:	f04f 0901 	mov.w	r9, #1
 8008042:	4623      	mov	r3, r4
 8008044:	469a      	mov	sl, r3
 8008046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800804a:	b10a      	cbz	r2, 8008050 <_svfiprintf_r+0x60>
 800804c:	2a25      	cmp	r2, #37	@ 0x25
 800804e:	d1f9      	bne.n	8008044 <_svfiprintf_r+0x54>
 8008050:	ebba 0b04 	subs.w	fp, sl, r4
 8008054:	d00b      	beq.n	800806e <_svfiprintf_r+0x7e>
 8008056:	465b      	mov	r3, fp
 8008058:	4622      	mov	r2, r4
 800805a:	4629      	mov	r1, r5
 800805c:	4638      	mov	r0, r7
 800805e:	f7ff ff6b 	bl	8007f38 <__ssputs_r>
 8008062:	3001      	adds	r0, #1
 8008064:	f000 80a7 	beq.w	80081b6 <_svfiprintf_r+0x1c6>
 8008068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800806a:	445a      	add	r2, fp
 800806c:	9209      	str	r2, [sp, #36]	@ 0x24
 800806e:	f89a 3000 	ldrb.w	r3, [sl]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 809f 	beq.w	80081b6 <_svfiprintf_r+0x1c6>
 8008078:	2300      	movs	r3, #0
 800807a:	f04f 32ff 	mov.w	r2, #4294967295
 800807e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008082:	f10a 0a01 	add.w	sl, sl, #1
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	9307      	str	r3, [sp, #28]
 800808a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800808e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008090:	4654      	mov	r4, sl
 8008092:	2205      	movs	r2, #5
 8008094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008098:	484e      	ldr	r0, [pc, #312]	@ (80081d4 <_svfiprintf_r+0x1e4>)
 800809a:	f7f8 f8c1 	bl	8000220 <memchr>
 800809e:	9a04      	ldr	r2, [sp, #16]
 80080a0:	b9d8      	cbnz	r0, 80080da <_svfiprintf_r+0xea>
 80080a2:	06d0      	lsls	r0, r2, #27
 80080a4:	bf44      	itt	mi
 80080a6:	2320      	movmi	r3, #32
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ac:	0711      	lsls	r1, r2, #28
 80080ae:	bf44      	itt	mi
 80080b0:	232b      	movmi	r3, #43	@ 0x2b
 80080b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80080bc:	d015      	beq.n	80080ea <_svfiprintf_r+0xfa>
 80080be:	9a07      	ldr	r2, [sp, #28]
 80080c0:	4654      	mov	r4, sl
 80080c2:	2000      	movs	r0, #0
 80080c4:	f04f 0c0a 	mov.w	ip, #10
 80080c8:	4621      	mov	r1, r4
 80080ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ce:	3b30      	subs	r3, #48	@ 0x30
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	d94b      	bls.n	800816c <_svfiprintf_r+0x17c>
 80080d4:	b1b0      	cbz	r0, 8008104 <_svfiprintf_r+0x114>
 80080d6:	9207      	str	r2, [sp, #28]
 80080d8:	e014      	b.n	8008104 <_svfiprintf_r+0x114>
 80080da:	eba0 0308 	sub.w	r3, r0, r8
 80080de:	fa09 f303 	lsl.w	r3, r9, r3
 80080e2:	4313      	orrs	r3, r2
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	46a2      	mov	sl, r4
 80080e8:	e7d2      	b.n	8008090 <_svfiprintf_r+0xa0>
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	1d19      	adds	r1, r3, #4
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	9103      	str	r1, [sp, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfbb      	ittet	lt
 80080f6:	425b      	neglt	r3, r3
 80080f8:	f042 0202 	orrlt.w	r2, r2, #2
 80080fc:	9307      	strge	r3, [sp, #28]
 80080fe:	9307      	strlt	r3, [sp, #28]
 8008100:	bfb8      	it	lt
 8008102:	9204      	strlt	r2, [sp, #16]
 8008104:	7823      	ldrb	r3, [r4, #0]
 8008106:	2b2e      	cmp	r3, #46	@ 0x2e
 8008108:	d10a      	bne.n	8008120 <_svfiprintf_r+0x130>
 800810a:	7863      	ldrb	r3, [r4, #1]
 800810c:	2b2a      	cmp	r3, #42	@ 0x2a
 800810e:	d132      	bne.n	8008176 <_svfiprintf_r+0x186>
 8008110:	9b03      	ldr	r3, [sp, #12]
 8008112:	1d1a      	adds	r2, r3, #4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	9203      	str	r2, [sp, #12]
 8008118:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800811c:	3402      	adds	r4, #2
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081e4 <_svfiprintf_r+0x1f4>
 8008124:	7821      	ldrb	r1, [r4, #0]
 8008126:	2203      	movs	r2, #3
 8008128:	4650      	mov	r0, sl
 800812a:	f7f8 f879 	bl	8000220 <memchr>
 800812e:	b138      	cbz	r0, 8008140 <_svfiprintf_r+0x150>
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	eba0 000a 	sub.w	r0, r0, sl
 8008136:	2240      	movs	r2, #64	@ 0x40
 8008138:	4082      	lsls	r2, r0
 800813a:	4313      	orrs	r3, r2
 800813c:	3401      	adds	r4, #1
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	4824      	ldr	r0, [pc, #144]	@ (80081d8 <_svfiprintf_r+0x1e8>)
 8008146:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800814a:	2206      	movs	r2, #6
 800814c:	f7f8 f868 	bl	8000220 <memchr>
 8008150:	2800      	cmp	r0, #0
 8008152:	d036      	beq.n	80081c2 <_svfiprintf_r+0x1d2>
 8008154:	4b21      	ldr	r3, [pc, #132]	@ (80081dc <_svfiprintf_r+0x1ec>)
 8008156:	bb1b      	cbnz	r3, 80081a0 <_svfiprintf_r+0x1b0>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	3307      	adds	r3, #7
 800815c:	f023 0307 	bic.w	r3, r3, #7
 8008160:	3308      	adds	r3, #8
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	4433      	add	r3, r6
 8008168:	9309      	str	r3, [sp, #36]	@ 0x24
 800816a:	e76a      	b.n	8008042 <_svfiprintf_r+0x52>
 800816c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008170:	460c      	mov	r4, r1
 8008172:	2001      	movs	r0, #1
 8008174:	e7a8      	b.n	80080c8 <_svfiprintf_r+0xd8>
 8008176:	2300      	movs	r3, #0
 8008178:	3401      	adds	r4, #1
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	4619      	mov	r1, r3
 800817e:	f04f 0c0a 	mov.w	ip, #10
 8008182:	4620      	mov	r0, r4
 8008184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008188:	3a30      	subs	r2, #48	@ 0x30
 800818a:	2a09      	cmp	r2, #9
 800818c:	d903      	bls.n	8008196 <_svfiprintf_r+0x1a6>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0c6      	beq.n	8008120 <_svfiprintf_r+0x130>
 8008192:	9105      	str	r1, [sp, #20]
 8008194:	e7c4      	b.n	8008120 <_svfiprintf_r+0x130>
 8008196:	fb0c 2101 	mla	r1, ip, r1, r2
 800819a:	4604      	mov	r4, r0
 800819c:	2301      	movs	r3, #1
 800819e:	e7f0      	b.n	8008182 <_svfiprintf_r+0x192>
 80081a0:	ab03      	add	r3, sp, #12
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	462a      	mov	r2, r5
 80081a6:	4b0e      	ldr	r3, [pc, #56]	@ (80081e0 <_svfiprintf_r+0x1f0>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	4638      	mov	r0, r7
 80081ac:	f3af 8000 	nop.w
 80081b0:	1c42      	adds	r2, r0, #1
 80081b2:	4606      	mov	r6, r0
 80081b4:	d1d6      	bne.n	8008164 <_svfiprintf_r+0x174>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	065b      	lsls	r3, r3, #25
 80081ba:	f53f af2d 	bmi.w	8008018 <_svfiprintf_r+0x28>
 80081be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c0:	e72c      	b.n	800801c <_svfiprintf_r+0x2c>
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <_svfiprintf_r+0x1f0>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	4638      	mov	r0, r7
 80081ce:	f000 f879 	bl	80082c4 <_printf_i>
 80081d2:	e7ed      	b.n	80081b0 <_svfiprintf_r+0x1c0>
 80081d4:	08008cf1 	.word	0x08008cf1
 80081d8:	08008cfb 	.word	0x08008cfb
 80081dc:	00000000 	.word	0x00000000
 80081e0:	08007f39 	.word	0x08007f39
 80081e4:	08008cf7 	.word	0x08008cf7

080081e8 <_printf_common>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	4698      	mov	r8, r3
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	bfb8      	it	lt
 80081fc:	4613      	movlt	r3, r2
 80081fe:	6033      	str	r3, [r6, #0]
 8008200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008204:	4607      	mov	r7, r0
 8008206:	460c      	mov	r4, r1
 8008208:	b10a      	cbz	r2, 800820e <_printf_common+0x26>
 800820a:	3301      	adds	r3, #1
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	0699      	lsls	r1, r3, #26
 8008212:	bf42      	ittt	mi
 8008214:	6833      	ldrmi	r3, [r6, #0]
 8008216:	3302      	addmi	r3, #2
 8008218:	6033      	strmi	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	f015 0506 	ands.w	r5, r5, #6
 8008220:	d106      	bne.n	8008230 <_printf_common+0x48>
 8008222:	f104 0a19 	add.w	sl, r4, #25
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	6832      	ldr	r2, [r6, #0]
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc26      	bgt.n	800827e <_printf_common+0x96>
 8008230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	3b00      	subs	r3, #0
 8008238:	bf18      	it	ne
 800823a:	2301      	movne	r3, #1
 800823c:	0692      	lsls	r2, r2, #26
 800823e:	d42b      	bmi.n	8008298 <_printf_common+0xb0>
 8008240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008244:	4641      	mov	r1, r8
 8008246:	4638      	mov	r0, r7
 8008248:	47c8      	blx	r9
 800824a:	3001      	adds	r0, #1
 800824c:	d01e      	beq.n	800828c <_printf_common+0xa4>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	f003 0306 	and.w	r3, r3, #6
 8008256:	2b04      	cmp	r3, #4
 8008258:	bf02      	ittt	eq
 800825a:	68e5      	ldreq	r5, [r4, #12]
 800825c:	6833      	ldreq	r3, [r6, #0]
 800825e:	1aed      	subeq	r5, r5, r3
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	2600      	movs	r6, #0
 8008274:	341a      	adds	r4, #26
 8008276:	42b5      	cmp	r5, r6
 8008278:	d11a      	bne.n	80082b0 <_printf_common+0xc8>
 800827a:	2000      	movs	r0, #0
 800827c:	e008      	b.n	8008290 <_printf_common+0xa8>
 800827e:	2301      	movs	r3, #1
 8008280:	4652      	mov	r2, sl
 8008282:	4641      	mov	r1, r8
 8008284:	4638      	mov	r0, r7
 8008286:	47c8      	blx	r9
 8008288:	3001      	adds	r0, #1
 800828a:	d103      	bne.n	8008294 <_printf_common+0xac>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	3501      	adds	r5, #1
 8008296:	e7c6      	b.n	8008226 <_printf_common+0x3e>
 8008298:	18e1      	adds	r1, r4, r3
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	2030      	movs	r0, #48	@ 0x30
 800829e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082a2:	4422      	add	r2, r4
 80082a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082ac:	3302      	adds	r3, #2
 80082ae:	e7c7      	b.n	8008240 <_printf_common+0x58>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4622      	mov	r2, r4
 80082b4:	4641      	mov	r1, r8
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c8      	blx	r9
 80082ba:	3001      	adds	r0, #1
 80082bc:	d0e6      	beq.n	800828c <_printf_common+0xa4>
 80082be:	3601      	adds	r6, #1
 80082c0:	e7d9      	b.n	8008276 <_printf_common+0x8e>
	...

080082c4 <_printf_i>:
 80082c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	7e0f      	ldrb	r7, [r1, #24]
 80082ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082cc:	2f78      	cmp	r7, #120	@ 0x78
 80082ce:	4691      	mov	r9, r2
 80082d0:	4680      	mov	r8, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	469a      	mov	sl, r3
 80082d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082da:	d807      	bhi.n	80082ec <_printf_i+0x28>
 80082dc:	2f62      	cmp	r7, #98	@ 0x62
 80082de:	d80a      	bhi.n	80082f6 <_printf_i+0x32>
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	f000 80d1 	beq.w	8008488 <_printf_i+0x1c4>
 80082e6:	2f58      	cmp	r7, #88	@ 0x58
 80082e8:	f000 80b8 	beq.w	800845c <_printf_i+0x198>
 80082ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082f4:	e03a      	b.n	800836c <_printf_i+0xa8>
 80082f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082fa:	2b15      	cmp	r3, #21
 80082fc:	d8f6      	bhi.n	80082ec <_printf_i+0x28>
 80082fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008304 <_printf_i+0x40>)
 8008300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008304:	0800835d 	.word	0x0800835d
 8008308:	08008371 	.word	0x08008371
 800830c:	080082ed 	.word	0x080082ed
 8008310:	080082ed 	.word	0x080082ed
 8008314:	080082ed 	.word	0x080082ed
 8008318:	080082ed 	.word	0x080082ed
 800831c:	08008371 	.word	0x08008371
 8008320:	080082ed 	.word	0x080082ed
 8008324:	080082ed 	.word	0x080082ed
 8008328:	080082ed 	.word	0x080082ed
 800832c:	080082ed 	.word	0x080082ed
 8008330:	0800846f 	.word	0x0800846f
 8008334:	0800839b 	.word	0x0800839b
 8008338:	08008429 	.word	0x08008429
 800833c:	080082ed 	.word	0x080082ed
 8008340:	080082ed 	.word	0x080082ed
 8008344:	08008491 	.word	0x08008491
 8008348:	080082ed 	.word	0x080082ed
 800834c:	0800839b 	.word	0x0800839b
 8008350:	080082ed 	.word	0x080082ed
 8008354:	080082ed 	.word	0x080082ed
 8008358:	08008431 	.word	0x08008431
 800835c:	6833      	ldr	r3, [r6, #0]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6032      	str	r2, [r6, #0]
 8008364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800836c:	2301      	movs	r3, #1
 800836e:	e09c      	b.n	80084aa <_printf_i+0x1e6>
 8008370:	6833      	ldr	r3, [r6, #0]
 8008372:	6820      	ldr	r0, [r4, #0]
 8008374:	1d19      	adds	r1, r3, #4
 8008376:	6031      	str	r1, [r6, #0]
 8008378:	0606      	lsls	r6, r0, #24
 800837a:	d501      	bpl.n	8008380 <_printf_i+0xbc>
 800837c:	681d      	ldr	r5, [r3, #0]
 800837e:	e003      	b.n	8008388 <_printf_i+0xc4>
 8008380:	0645      	lsls	r5, r0, #25
 8008382:	d5fb      	bpl.n	800837c <_printf_i+0xb8>
 8008384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008388:	2d00      	cmp	r5, #0
 800838a:	da03      	bge.n	8008394 <_printf_i+0xd0>
 800838c:	232d      	movs	r3, #45	@ 0x2d
 800838e:	426d      	negs	r5, r5
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008394:	4858      	ldr	r0, [pc, #352]	@ (80084f8 <_printf_i+0x234>)
 8008396:	230a      	movs	r3, #10
 8008398:	e011      	b.n	80083be <_printf_i+0xfa>
 800839a:	6821      	ldr	r1, [r4, #0]
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	0608      	lsls	r0, r1, #24
 80083a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083a4:	d402      	bmi.n	80083ac <_printf_i+0xe8>
 80083a6:	0649      	lsls	r1, r1, #25
 80083a8:	bf48      	it	mi
 80083aa:	b2ad      	uxthmi	r5, r5
 80083ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80083ae:	4852      	ldr	r0, [pc, #328]	@ (80084f8 <_printf_i+0x234>)
 80083b0:	6033      	str	r3, [r6, #0]
 80083b2:	bf14      	ite	ne
 80083b4:	230a      	movne	r3, #10
 80083b6:	2308      	moveq	r3, #8
 80083b8:	2100      	movs	r1, #0
 80083ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083be:	6866      	ldr	r6, [r4, #4]
 80083c0:	60a6      	str	r6, [r4, #8]
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	db05      	blt.n	80083d2 <_printf_i+0x10e>
 80083c6:	6821      	ldr	r1, [r4, #0]
 80083c8:	432e      	orrs	r6, r5
 80083ca:	f021 0104 	bic.w	r1, r1, #4
 80083ce:	6021      	str	r1, [r4, #0]
 80083d0:	d04b      	beq.n	800846a <_printf_i+0x1a6>
 80083d2:	4616      	mov	r6, r2
 80083d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80083d8:	fb03 5711 	mls	r7, r3, r1, r5
 80083dc:	5dc7      	ldrb	r7, [r0, r7]
 80083de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083e2:	462f      	mov	r7, r5
 80083e4:	42bb      	cmp	r3, r7
 80083e6:	460d      	mov	r5, r1
 80083e8:	d9f4      	bls.n	80083d4 <_printf_i+0x110>
 80083ea:	2b08      	cmp	r3, #8
 80083ec:	d10b      	bne.n	8008406 <_printf_i+0x142>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	07df      	lsls	r7, r3, #31
 80083f2:	d508      	bpl.n	8008406 <_printf_i+0x142>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	6861      	ldr	r1, [r4, #4]
 80083f8:	4299      	cmp	r1, r3
 80083fa:	bfde      	ittt	le
 80083fc:	2330      	movle	r3, #48	@ 0x30
 80083fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008402:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008406:	1b92      	subs	r2, r2, r6
 8008408:	6122      	str	r2, [r4, #16]
 800840a:	f8cd a000 	str.w	sl, [sp]
 800840e:	464b      	mov	r3, r9
 8008410:	aa03      	add	r2, sp, #12
 8008412:	4621      	mov	r1, r4
 8008414:	4640      	mov	r0, r8
 8008416:	f7ff fee7 	bl	80081e8 <_printf_common>
 800841a:	3001      	adds	r0, #1
 800841c:	d14a      	bne.n	80084b4 <_printf_i+0x1f0>
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	b004      	add	sp, #16
 8008424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	f043 0320 	orr.w	r3, r3, #32
 800842e:	6023      	str	r3, [r4, #0]
 8008430:	4832      	ldr	r0, [pc, #200]	@ (80084fc <_printf_i+0x238>)
 8008432:	2778      	movs	r7, #120	@ 0x78
 8008434:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	6831      	ldr	r1, [r6, #0]
 800843c:	061f      	lsls	r7, r3, #24
 800843e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008442:	d402      	bmi.n	800844a <_printf_i+0x186>
 8008444:	065f      	lsls	r7, r3, #25
 8008446:	bf48      	it	mi
 8008448:	b2ad      	uxthmi	r5, r5
 800844a:	6031      	str	r1, [r6, #0]
 800844c:	07d9      	lsls	r1, r3, #31
 800844e:	bf44      	itt	mi
 8008450:	f043 0320 	orrmi.w	r3, r3, #32
 8008454:	6023      	strmi	r3, [r4, #0]
 8008456:	b11d      	cbz	r5, 8008460 <_printf_i+0x19c>
 8008458:	2310      	movs	r3, #16
 800845a:	e7ad      	b.n	80083b8 <_printf_i+0xf4>
 800845c:	4826      	ldr	r0, [pc, #152]	@ (80084f8 <_printf_i+0x234>)
 800845e:	e7e9      	b.n	8008434 <_printf_i+0x170>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	f023 0320 	bic.w	r3, r3, #32
 8008466:	6023      	str	r3, [r4, #0]
 8008468:	e7f6      	b.n	8008458 <_printf_i+0x194>
 800846a:	4616      	mov	r6, r2
 800846c:	e7bd      	b.n	80083ea <_printf_i+0x126>
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	6825      	ldr	r5, [r4, #0]
 8008472:	6961      	ldr	r1, [r4, #20]
 8008474:	1d18      	adds	r0, r3, #4
 8008476:	6030      	str	r0, [r6, #0]
 8008478:	062e      	lsls	r6, r5, #24
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	d501      	bpl.n	8008482 <_printf_i+0x1be>
 800847e:	6019      	str	r1, [r3, #0]
 8008480:	e002      	b.n	8008488 <_printf_i+0x1c4>
 8008482:	0668      	lsls	r0, r5, #25
 8008484:	d5fb      	bpl.n	800847e <_printf_i+0x1ba>
 8008486:	8019      	strh	r1, [r3, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	4616      	mov	r6, r2
 800848e:	e7bc      	b.n	800840a <_printf_i+0x146>
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	6032      	str	r2, [r6, #0]
 8008496:	681e      	ldr	r6, [r3, #0]
 8008498:	6862      	ldr	r2, [r4, #4]
 800849a:	2100      	movs	r1, #0
 800849c:	4630      	mov	r0, r6
 800849e:	f7f7 febf 	bl	8000220 <memchr>
 80084a2:	b108      	cbz	r0, 80084a8 <_printf_i+0x1e4>
 80084a4:	1b80      	subs	r0, r0, r6
 80084a6:	6060      	str	r0, [r4, #4]
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	6123      	str	r3, [r4, #16]
 80084ac:	2300      	movs	r3, #0
 80084ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b2:	e7aa      	b.n	800840a <_printf_i+0x146>
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	4632      	mov	r2, r6
 80084b8:	4649      	mov	r1, r9
 80084ba:	4640      	mov	r0, r8
 80084bc:	47d0      	blx	sl
 80084be:	3001      	adds	r0, #1
 80084c0:	d0ad      	beq.n	800841e <_printf_i+0x15a>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	079b      	lsls	r3, r3, #30
 80084c6:	d413      	bmi.n	80084f0 <_printf_i+0x22c>
 80084c8:	68e0      	ldr	r0, [r4, #12]
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	4298      	cmp	r0, r3
 80084ce:	bfb8      	it	lt
 80084d0:	4618      	movlt	r0, r3
 80084d2:	e7a6      	b.n	8008422 <_printf_i+0x15e>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4632      	mov	r2, r6
 80084d8:	4649      	mov	r1, r9
 80084da:	4640      	mov	r0, r8
 80084dc:	47d0      	blx	sl
 80084de:	3001      	adds	r0, #1
 80084e0:	d09d      	beq.n	800841e <_printf_i+0x15a>
 80084e2:	3501      	adds	r5, #1
 80084e4:	68e3      	ldr	r3, [r4, #12]
 80084e6:	9903      	ldr	r1, [sp, #12]
 80084e8:	1a5b      	subs	r3, r3, r1
 80084ea:	42ab      	cmp	r3, r5
 80084ec:	dcf2      	bgt.n	80084d4 <_printf_i+0x210>
 80084ee:	e7eb      	b.n	80084c8 <_printf_i+0x204>
 80084f0:	2500      	movs	r5, #0
 80084f2:	f104 0619 	add.w	r6, r4, #25
 80084f6:	e7f5      	b.n	80084e4 <_printf_i+0x220>
 80084f8:	08008d02 	.word	0x08008d02
 80084fc:	08008d13 	.word	0x08008d13

08008500 <memmove>:
 8008500:	4288      	cmp	r0, r1
 8008502:	b510      	push	{r4, lr}
 8008504:	eb01 0402 	add.w	r4, r1, r2
 8008508:	d902      	bls.n	8008510 <memmove+0x10>
 800850a:	4284      	cmp	r4, r0
 800850c:	4623      	mov	r3, r4
 800850e:	d807      	bhi.n	8008520 <memmove+0x20>
 8008510:	1e43      	subs	r3, r0, #1
 8008512:	42a1      	cmp	r1, r4
 8008514:	d008      	beq.n	8008528 <memmove+0x28>
 8008516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800851e:	e7f8      	b.n	8008512 <memmove+0x12>
 8008520:	4402      	add	r2, r0
 8008522:	4601      	mov	r1, r0
 8008524:	428a      	cmp	r2, r1
 8008526:	d100      	bne.n	800852a <memmove+0x2a>
 8008528:	bd10      	pop	{r4, pc}
 800852a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800852e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008532:	e7f7      	b.n	8008524 <memmove+0x24>

08008534 <_sbrk_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d06      	ldr	r5, [pc, #24]	@ (8008550 <_sbrk_r+0x1c>)
 8008538:	2300      	movs	r3, #0
 800853a:	4604      	mov	r4, r0
 800853c:	4608      	mov	r0, r1
 800853e:	602b      	str	r3, [r5, #0]
 8008540:	f7f9 f8c0 	bl	80016c4 <_sbrk>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d102      	bne.n	800854e <_sbrk_r+0x1a>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	b103      	cbz	r3, 800854e <_sbrk_r+0x1a>
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	200026d0 	.word	0x200026d0

08008554 <memcpy>:
 8008554:	440a      	add	r2, r1
 8008556:	4291      	cmp	r1, r2
 8008558:	f100 33ff 	add.w	r3, r0, #4294967295
 800855c:	d100      	bne.n	8008560 <memcpy+0xc>
 800855e:	4770      	bx	lr
 8008560:	b510      	push	{r4, lr}
 8008562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800856a:	4291      	cmp	r1, r2
 800856c:	d1f9      	bne.n	8008562 <memcpy+0xe>
 800856e:	bd10      	pop	{r4, pc}

08008570 <_realloc_r>:
 8008570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008574:	4607      	mov	r7, r0
 8008576:	4614      	mov	r4, r2
 8008578:	460d      	mov	r5, r1
 800857a:	b921      	cbnz	r1, 8008586 <_realloc_r+0x16>
 800857c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	4611      	mov	r1, r2
 8008582:	f7ff bc4d 	b.w	8007e20 <_malloc_r>
 8008586:	b92a      	cbnz	r2, 8008594 <_realloc_r+0x24>
 8008588:	f7ff fbde 	bl	8007d48 <_free_r>
 800858c:	4625      	mov	r5, r4
 800858e:	4628      	mov	r0, r5
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	f000 f81a 	bl	80085cc <_malloc_usable_size_r>
 8008598:	4284      	cmp	r4, r0
 800859a:	4606      	mov	r6, r0
 800859c:	d802      	bhi.n	80085a4 <_realloc_r+0x34>
 800859e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085a2:	d8f4      	bhi.n	800858e <_realloc_r+0x1e>
 80085a4:	4621      	mov	r1, r4
 80085a6:	4638      	mov	r0, r7
 80085a8:	f7ff fc3a 	bl	8007e20 <_malloc_r>
 80085ac:	4680      	mov	r8, r0
 80085ae:	b908      	cbnz	r0, 80085b4 <_realloc_r+0x44>
 80085b0:	4645      	mov	r5, r8
 80085b2:	e7ec      	b.n	800858e <_realloc_r+0x1e>
 80085b4:	42b4      	cmp	r4, r6
 80085b6:	4622      	mov	r2, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	bf28      	it	cs
 80085bc:	4632      	movcs	r2, r6
 80085be:	f7ff ffc9 	bl	8008554 <memcpy>
 80085c2:	4629      	mov	r1, r5
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff fbbf 	bl	8007d48 <_free_r>
 80085ca:	e7f1      	b.n	80085b0 <_realloc_r+0x40>

080085cc <_malloc_usable_size_r>:
 80085cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d0:	1f18      	subs	r0, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bfbc      	itt	lt
 80085d6:	580b      	ldrlt	r3, [r1, r0]
 80085d8:	18c0      	addlt	r0, r0, r3
 80085da:	4770      	bx	lr

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
